{"version":3,"file":"displaycontent.min.js","sources":["../src/displaycontent.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Display content module\n *\n * @module     mod_interactivevideo/displaycontent\n * @copyright  2024 Sokunthearith Makara <sokunthearithmakara@gmail.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\nimport $ from 'jquery';\nimport Fragment from 'core/fragment';\nimport {dispatchEvent} from 'core/event_dispatcher';\n\n/**\n * Return main formatted content of the annotation\n * @param {Object} annotation - The annotation object\n * @param {String} [format='html'] - The format of the content, either 'html' or 'json'\n * @returns {Promise<String|Object>} - The formatted content as a string or parsed JSON object\n */\nconst renderContent = async function(annotation, format = 'html') {\n    const annotationArgs = {\n        ...annotation,\n        contextid: annotation.contextid\n    };\n    let fragment;\n    try {\n        fragment = await Fragment.loadFragment('mod_interactivevideo', 'getcontent', annotation.contextid, annotationArgs);\n    } catch (error) {\n        throw new Error(JSON.stringify(error));\n    }\n    if (format === 'html') {\n        return fragment;\n    } else {\n        return JSON.parse(fragment);\n    }\n};\n\n/**\n * Format content text\n * @param {String} text unformatted text\n * @param {Boolean} shorttext short string or text\n * @returns formatted text\n */\nconst formatText = async function(text, shorttext = false) {\n    try {\n        const response = await $.ajax({\n            url: M.cfg.wwwroot + '/mod/interactivevideo/ajax.php',\n            type: 'POST',\n            dataType: \"text\",\n            data: {\n                text: text,\n                contextid: M.cfg.contextid,\n                action: 'format_text',\n                sesskey: M.cfg.sesskey,\n                shorttext: shorttext,\n            }\n        });\n        return response;\n    } catch (error) {\n        throw new Error('Failed to format text');\n    }\n};\n\n/**\n * Displays the content of an annotation based on the specified display options.\n *\n * @async\n * @function defaultDisplayContent\n * @param {Object} annotation - The annotation object containing details to be displayed.\n * @param {Object} player - The video player instance.\n * @returns {Promise<void>}\n *\n * @example\n * const annotation = {\n *   id: 1,\n *   displayoptions: 'popup',\n *   hascompletion: 1,\n *   xp: 10,\n *   completed: false,\n *   formattedtitle: 'Sample Annotation',\n *   prop: '{\"icon\": \"bi bi-info-circle\"}'\n * };\n * const player = videojs('my-video');\n * defaultDisplayContent(annotation, player);\n */\nconst defaultDisplayContent = async function(annotation, player) {\n    const isDarkMode = $('body').hasClass('darkmode');\n\n    // Play pop sound\n    const audio = new Audio(M.cfg.wwwroot + '/mod/interactivevideo/sounds/pop.mp3');\n    audio.play();\n\n    let displayoptions = annotation.displayoptions;\n\n    const responsiveDisplay = (displayoptions) => {\n        if (displayoptions == 'side') {\n            return displayoptions;\n        }\n\n        // If the theme is mobile, display the message as a popup.\n        if ($('body').hasClass('mobiletheme') && displayoptions == 'inline') {\n            displayoptions = 'popup';\n        }\n\n        if ($('body').hasClass('embed-mode')) {\n            // Check the size of the body. If it is less than 800px, display the message as inline.\n            if ($(window).width() < 1000 || $(window).height() < 500) {\n                displayoptions = 'inline';\n            } else {\n                displayoptions = displayoptions == 'inline' ? 'inline' : 'popup';\n            }\n        }\n\n        // If the wrapper is in fullscreen mode, display the message inline (on top of the video).\n        if ($('#wrapper').hasClass('fullscreen')) {\n            displayoptions = 'inline';\n        }\n        return displayoptions;\n    };\n\n    displayoptions = responsiveDisplay(displayoptions);\n\n    // Add completion button if the annotation has completion criteria.\n    let completionbutton = \"\";\n    // Display the xp badge conditionally.\n    if (annotation.hascompletion == 1 && annotation.xp > 0) {\n        const earned = annotation.earned == annotation.xp ? annotation.earned : annotation.earned + '/' + annotation.xp;\n        completionbutton += `<span class=\"badge ${annotation.completed ? 'alert-success' : 'badge-secondary'} mr-2\">\n        ${annotation.completed ? earned : Number(annotation.xp)} XP</span>`;\n    }\n    // Display the completion button conditionally.\n    if (annotation.hascompletion == 1 && annotation.completed) {\n        completionbutton += `<button id=\"completiontoggle\" class=\"btn mark-undone btn-success btn-sm border-0\"\n             data-id=\"${annotation.id}\"><i class=\"bi bi-check2\"></i>\n             <span class=\"ml-2 d-none d-sm-block\">\n             ${M.util.get_string('completionmarkincomplete', 'mod_interactivevideo')}</span></button>`;\n    } else if (annotation.hascompletion == 1 && annotation.completed == false) {\n        completionbutton += `<button  id=\"completiontoggle\" class=\"btn mark-done btn-secondary btn-sm border-0\"\n             data-id=\"${annotation.id}\"><i class=\"bi bi-circle\"></i>\n             <span class=\"ml-2 d-none d-sm-block\">\n             ${M.util.get_string('completionmarkcomplete', 'mod_interactivevideo')}</span></button>`;\n    }\n\n    // Append refresh button after the completion button.\n    if (!$('body').hasClass('page-interactions')) {\n        completionbutton += `<button class=\"btn btn-secondary btn-sm ml-2 rotatez-360 border-0\"\n         data-id=\"${annotation.id}\" id=\"refresh\">\n        <i class=\"bi bi-arrow-repeat\"></i></button>`;\n    } else {\n        completionbutton = ``;\n    }\n\n    // Message title.\n    let prop = JSON.parse(annotation.prop);\n    let messageTitle = `<h5 class=\"modal-title text-truncate mb-0\">\n    <i class=\"${prop.icon} mr-2 d-none d-md-inline\"></i>${annotation.formattedtitle}</h5>\n                            <div class=\"btns d-flex align-items-center\">\n                            ${completionbutton}\n                            <button class=\"btn mx-2 p-0 border-0\" id=\"close-${annotation.id}\" aria-label=\"Close\">\n                            <i class=\"bi bi-x-lg fa-fw fs-25px\"></i>\n                            </button>\n                            </div>`;\n\n    // Hide existing modal if it shows.\n    $('#annotation-modal').modal('hide');\n\n    // Handle annotation close event:: when user click on the close button of the annotation.\n    $(document).off('click', `#close-${annotation.id}`).on('click', `#close-${annotation.id}`, async function(e) {\n        e.preventDefault();\n        if (!$('body').hasClass('page-interactions')) { // Do not auto resume if on interactions page.\n            if (player.end != await player.getCurrentTime()) {\n                player.play();\n            }\n        }\n\n        if (displayoptions == 'side') {\n            $('body').removeClass('hassidebar');\n            $('#annotation-sidebar').addClass('hide');\n            return;\n        }\n        $(this).closest(\"#annotation-modal\").modal('hide');\n        const targetMessage = $(this).closest(\"#message\");\n        targetMessage.addClass('bottom-0');\n        setTimeout(function() {\n            targetMessage.remove();\n            dispatchEvent('interactionclose', {\n                annotation: annotation,\n            });\n        }, 100);\n\n\n    });\n\n    const handlePopupDisplay = (annotation, messageTitle) => {\n        let modal = `<div class=\"modal fade ${$('body').hasClass('iframe') ? 'modal-fullscreen' : ''}\"\n             id=\"annotation-modal\" role=\"dialog\" aria-labelledby=\"annotation-modal\"\n         aria-hidden=\"true\" data-backdrop=\"static\" data-keyboard=\"false\">\n         <div id=\"message\" data-id=\"${annotation.id}\" data-placement=\"popup\"\n          class=\"modal-dialog modal-xl modal-dialog-centered modal-dialog-scrollable ${annotation.type}\" role=\"document\">\n                <div class=\"modal-content rounded-lg\">\n                    <div class=\"modal-header d-flex align-items-center shadow-sm pr-0\" id=\"title\">\n                        ${messageTitle}\n                    </div>\n                    <div class=\"modal-body\" id=\"content\"></div>\n                    </div>\n                </div>\n        </div>`;\n        $('#wrapper').append(modal);\n        $('#annotation-modal').modal('show');\n\n        $('#annotation-modal').on('hide.bs.modal', function() {\n            $('#annotation-modal').remove();\n        });\n\n        $('#annotation-modal').on('shown.bs.modal', function() {\n            $('#annotation-modal .modal-body').fadeIn(300);\n            return Promise.resolve();\n        });\n    };\n\n    const handleInlineDisplay = (annotation, messageTitle) => {\n        $('#video-wrapper').append(`<div id=\"message\" style=\"z-index:105;top:100%\" data-placement=\"inline\"\n         data-id=\"${annotation.id}\" class=\"${annotation.type}\">\n        <div id=\"title\" class=\"modal-header shadow-sm pr-0 rounded-0\">${messageTitle}</div><div class=\"modal-body\" id=\"content\">\n        </div></div>`);\n        $(`#message[data-id='${annotation.id}']`).animate({\n            top: '0',\n        }, 300, 'linear', function() {\n            return Promise.resolve();\n        });\n    };\n\n    const handleBottomDisplay = (annotation, messageTitle, isDarkMode) => {\n        $('#annotation-content').empty();\n        $('#annotation-content').append(`<div id=\"message\" class=\"fade show mt-3 ${!isDarkMode ? 'border' : ''}\n                 rounded-lg bg-white ${annotation.type}\" data-placement=\"bottom\" data-id=\"${annotation.id}\">\n                 <div id='title' class='modal-header shadow-sm pr-0'>${messageTitle}</div>\n                <div class=\"modal-body\" id=\"content\"></div></div>`);\n        $('html, body, #page.drawers, .modal-body').animate({\n            scrollTop: $(\"#annotation-content\").offset().top\n        }, 1000, 'swing', function() {\n            return Promise.resolve();\n        });\n    };\n\n    const handleSideDisplay = (annotation, messageTitle) => {\n        $('body').addClass('hassidebar');\n        // Make sure all sidebar are hidden.\n        $('#wrapper .iv-sidebar').addClass('hide');\n        // Create sidebar if it does not exist.\n        if ($('#wrapper #annotation-sidebar').length == 0) {\n            $('#wrapper').append(`<div id=\"annotation-sidebar\" class=\"iv-sidebar p-0 hide\">\n                <div id=\"sidebar-nav\" class=\"d-flex w-100\"></div>\n                <div id=\"sidebar-content\" class=\"p-0\"></div>\n                </div>`);\n            $(document).on('click', '#sidebar-nav .sidebar-nav-item', function() {\n                const target = $(this).data('id');\n                $(this).addClass('active').siblings().removeClass('active');\n                $('#sidebar-content #message').fadeOut(300);\n                $(`#sidebar-content #message[data-id='${target}']`).fadeIn(300);\n            });\n        }\n        // Add annotation toggle button if it does not exist.\n        if ($('#wrapper #toolbar #annotation-toggle').length == 0) {\n            $('#wrapper #toolbar')\n                .append(`<button id=\"annotation-toggle\" class=\"btn btn-secondary btn-sm border-0\">\n                    <i class=\"bi bi-chevron-left\"></i></button>`);\n        }\n        // Show the sidebar.\n        $('#annotation-sidebar').removeClass('hide');\n        // Remove the message if it exists.\n        $(`#sidebar-content #message[data-id='${annotation.id}']`).remove();\n        // Replace the navigation item if it exists.\n        if ($(`#sidebar-nav .sidebar-nav-item[data-id='${annotation.id}']`).length == 0) {\n            // Add a navigation item.\n            $('#annotation-sidebar #sidebar-nav').append(`<div class=\"sidebar-nav-item active w-100\" data-toggle=\"tooltip\"\n            data-html=\"true\" title=\"<i class='${prop.icon} mr-2'></i>${annotation.formattedtitle}\"\n            data-id=\"${annotation.id}\"></div>`);\n        }\n        // Hide other messages on the sidebar.\n        $('#annotation-sidebar #message').fadeOut(300);\n        $('#annotation-sidebar #sidebar-nav .sidebar-nav-item:not([data-id=\"' + annotation.id + '\"])').removeClass('active');\n        // Append the message to the sidebar.\n        $('#annotation-sidebar #sidebar-content').append(`<div id=\"message\" data-placement=\"side\"\n                    data-id=\"${annotation.id}\" class=\"${annotation.type} sticky\">\n                    <div id=\"title\" class=\"modal-header shadow-sm pr-0\">${messageTitle}</div>\n                    <div class=\"modal-body\" id=\"content\"></div>\n                    </div>`);\n    };\n\n    switch (displayoptions) {\n        case 'popup':\n            handlePopupDisplay(annotation, messageTitle);\n            break;\n        case 'inline':\n            handleInlineDisplay(annotation, messageTitle);\n            break;\n        case 'bottom':\n            handleBottomDisplay(annotation, messageTitle, isDarkMode);\n            break;\n        case 'side':\n            handleSideDisplay(annotation, messageTitle, isDarkMode);\n            break;\n    }\n};\n\nexport {renderContent, defaultDisplayContent, formatText};\n"],"names":["async","annotation","format","annotationArgs","contextid","fragment","Fragment","loadFragment","error","Error","JSON","stringify","parse","text","shorttext","$","ajax","url","M","cfg","wwwroot","type","dataType","data","action","sesskey","player","isDarkMode","hasClass","Audio","play","displayoptions","window","width","height","responsiveDisplay","completionbutton","hascompletion","xp","earned","completed","Number","id","util","get_string","prop","messageTitle","icon","formattedtitle","modal","document","off","on","e","preventDefault","end","getCurrentTime","removeClass","addClass","this","closest","targetMessage","setTimeout","remove","handleSideDisplay","length","append","target","siblings","fadeOut","fadeIn","Promise","resolve","handlePopupDisplay","animate","top","handleInlineDisplay","empty","scrollTop","offset","handleBottomDisplay"],"mappings":"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"}