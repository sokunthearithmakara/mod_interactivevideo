{"version":3,"file":"html5video.min.js","sources":["../../src/player/html5video.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * HTML5 Video Player class\n *\n * @module     mod_interactivevideo/player/html5video\n * @copyright  2024 Sokunthearith Makara <sokunthearithmakara@gmail.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\nimport {dispatchEvent} from 'core/event_dispatcher';\n\nclass Html5Video {\n    /**\n     * Creates an instance of an HTML5 video player.\n     *\n     * @constructor\n     * @param {string} url - The URL of the video to be played.\n     * @param {number} start - The start time of the video in seconds.\n     * @param {number} [end] - The end time of the video in seconds. If not provided, defaults to the video's duration.\n    * @param {object} opts - The options for the player.\n     */\n    constructor(url, start, end, opts = {}) {\n        const showControls = opts.showControls || false;\n        const node = opts.node || 'player';\n        const autoplay = opts.autoplay || false;\n        this.type = \"html5video\";\n        this.start = start;\n        this.end = end;\n        this.frequency = 0.28;\n        this.support = {\n            playbackrate: true,\n            quality: false,\n        };\n        var player = document.getElementById(node);\n        this.posterImage = player.poster;\n        // Check if the url is for video or audio.\n        const video = ['fmp4', 'm4v', 'mov', 'mp4', 'ogv', 'webm'];\n        const ext = url.split('.').pop();\n        if (video.indexOf(ext) === -1) {\n            this.audio = true;\n            // Append a canvas element to the video.\n            const canvas = '<canvas id=\"visualizer\"></canvas>';\n            player.insertAdjacentHTML('afterend', canvas);\n            this.posterImage = M.cfg.wwwroot + '/mod/interactivevideo/pix/audioposter.jpg';\n            player.poster = this.posterImage;\n        }\n        player.src = url;\n        player.controls = showControls;\n        player.currentTime = start;\n        if (document.body.classList.contains('mobiletheme') || autoplay) {\n            // Preload video on mobile app. Must mute to avoid browser restriction.\n            player.muted = true;\n            player.autoplay = true;\n        }\n        // Disable keyboard controls.\n        player.tabIndex = -1;\n\n        let self = this;\n        if (!showControls) {\n            document.body.classList.add('no-original-controls');\n        }\n\n        // Play inline.\n        player.setAttribute('playsinline', '');\n\n        // Disable picture-in-picture.\n        player.setAttribute('disablePictureInPicture', '');\n\n        // Disable picture-in-picture.\n        player.setAttribute('disablePictureInPicture', '');\n\n        player.addEventListener('loadedmetadata', function() {\n            self.aspectratio = self.ratio();\n            end = !end ? player.duration : Math.min(end, player.duration);\n            player.pause();\n            dispatchEvent('iv:playerReady');\n        });\n\n        player.addEventListener('seeked', function() {\n            dispatchEvent('iv:playerSeek', {time: player.currentTime});\n        });\n\n        player.addEventListener('timeupdate', function() {\n            if (player.ended || (end && player.currentTime >= end)) {\n                dispatchEvent('iv:playerEnded');\n                player.pause();\n            } else if (player.paused) {\n                dispatchEvent('iv:playerPaused');\n            } else if (!player.paused) {\n                dispatchEvent('iv:playerPlaying');\n            }\n        });\n\n        player.addEventListener('error', function(e) {\n            dispatchEvent('iv:playerError', {error: e});\n        });\n\n        player.addEventListener('ratechange', function() {\n            dispatchEvent('iv:playerRateChange', {rate: player.playbackRate});\n        });\n\n        this.player = player;\n    }\n\n    /**\n     * Visualizes the audio frequency data of the HTML5 video player using a canvas element.\n     * Credit: https://codepen.io/nfj525/pen/rVBaab by Nick Jones\n     * This method creates an audio context and connects it to the video player's audio source.\n     * It then sets up an analyser to get the frequency data and renders a bar graph visualization\n     * on a canvas element with the id \"visualizer\".\n     *\n     * The visualization is updated in real-time using the `requestAnimationFrame` method.\n     *\n     * @method visualizer\n     */\n    visualizer() {\n        var context = new AudioContext();\n        var src = context.createMediaElementSource(this.player);\n        var analyser = context.createAnalyser();\n        var canvas = document.getElementById(\"visualizer\");\n        canvas.width = window.innerWidth;\n        canvas.height = window.innerHeight;\n        var ctx = canvas.getContext(\"2d\");\n        src.connect(analyser);\n        analyser.connect(context.destination);\n\n        analyser.fftSize = 256;\n\n        var bufferLength = analyser.frequencyBinCount;\n        var dataArray = new Uint8Array(bufferLength);\n\n        var WIDTH = canvas.width;\n        var HEIGHT = canvas.height;\n\n        var barWidth = (WIDTH / bufferLength) * 2.5;\n        var barHeight;\n        var x = 0;\n\n        const renderFrame = () => {\n            requestAnimationFrame(renderFrame);\n            x = 0;\n            analyser.getByteFrequencyData(dataArray);\n            ctx.fillStyle = \"#000\";\n            ctx.fillRect(0, 0, WIDTH, HEIGHT);\n\n            for (var i = 0; i < bufferLength; i++) {\n                barHeight = dataArray[i];\n                var r = barHeight + (25 * (i / bufferLength));\n                var g = 250 * (i / bufferLength);\n                var b = 50;\n\n                ctx.fillStyle = \"rgb(\" + r + \",\" + g + \",\" + b + \")\";\n                ctx.fillRect(x, HEIGHT - barHeight, barWidth, barHeight);\n\n                x += barWidth + 1;\n            }\n        };\n        renderFrame();\n    }\n\n    /**\n     * Plays the HTML5 video using the player instance.\n     *\n     * @method play\n     */\n    play() {\n        this.player.play();\n    }\n    /**\n     * Pauses the video playback.\n     *\n     * This method calls the pause function on the player instance to stop the video.\n     */\n    async pause() {\n        await this.player.pause();\n    }\n    /**\n     * Stops the video playback and sets the current time to the specified start time.\n     *\n     * @param {number} starttime - The time (in seconds) to set the video's current time to.\n     */\n    stop(starttime) {\n        this.player.pause();\n        this.player.currentTime = starttime;\n    }\n    /**\n     * Seeks the video to a specified time.\n     *\n     * @param {number} time - The time in seconds to seek to.\n     * @returns {boolean} Returns true when the seek operation is initiated.\n     */\n    seek(time) {\n        this.player.currentTime = time;\n        return true;\n    }\n    /**\n     * Retrieves the current playback time of the video.\n     *\n     * @returns {number} The current time of the video in seconds.\n     */\n    getCurrentTime() {\n        return this.player.currentTime;\n    }\n    /**\n     * Retrieves the duration of the video.\n     *\n     * @returns {number} The duration of the video in seconds.\n     */\n    getDuration() {\n        return this.player.duration;\n    }\n    /**\n     * Checks if the video player is currently paused.\n     *\n     * @returns {boolean} True if the player is paused, false otherwise.\n     */\n    isPaused() {\n        return this.player.paused;\n    }\n    /**\n     * Checks if the video player is currently playing.\n     *\n     * @returns {boolean} True if the video is playing, false if it is paused.\n     */\n    isPlaying() {\n        return !this.player.paused;\n    }\n\n    /**\n     * Checks if the video has ended.\n     *\n     * @returns {boolean} True if the video has ended, otherwise false.\n     */\n    isEnded() {\n        return this.player.ended;\n    }\n    /**\n     * Calculates the aspect ratio of the video.\n     * If the video is wider than a 16:9 ratio, it returns the actual video ratio.\n     * Otherwise, it returns the 16:9 ratio.\n     *\n     * @returns {number} The aspect ratio of the video.\n     */\n    ratio() {\n        if (this.audio) {\n            return 16 / 9;\n        }\n        return this.player.videoWidth / this.player.videoHeight;\n    }\n    /**\n     * Destroys the HTML5 video player instance.\n     *\n     * This method pauses the video, removes the source attribute, and reloads the player.\n     * It is used to clean up the player instance and release any resources it may be holding.\n     */\n    destroy() {\n        document.getElementById('video-wrapper').innerHTML = '<div id=\"player\" style=\"width:100%; max-width: 100%\"></div>';\n        this.player.pause();\n        this.player.removeAttribute('src');\n        this.player.load();\n    }\n    /**\n     * Retrieves the current state of the video player.\n     *\n     * @returns {string} - Returns 'paused' if the player is paused, otherwise 'playing'.\n     */\n    getState() {\n        return this.player.paused ? 'paused' : 'playing';\n    }\n\n    /**\n     * Sets the playback rate of the video player.\n     *\n     * @param {number} rate - The desired playback rate. A value of 1.0 represents normal speed.\n     */\n    setRate(rate) {\n        this.player.playbackRate = rate;\n    }\n\n    /**\n     * Mutes the HTML5 video player.\n     */\n    mute() {\n        this.player.muted = true;\n    }\n    /**\n     * Unmutes the video player.\n     */\n    unMute() {\n        this.player.muted = false;\n    }\n\n    /**\n     * Returns the original video player instance.\n     *\n     * @returns {Object} The video player instance.\n     */\n    originalPlayer() {\n        return this.player;\n    }\n\n    /**\n     * Sets the video quality.\n     *\n     * Note: This functionality is not supported.\n     *\n     * @param {string} quality - The desired quality setting.\n     * @returns {string} The quality setting that was passed in.\n     */\n    setQuality(quality) {\n        return quality;\n    }\n}\n\nexport default Html5Video;"],"names":["constructor","url","start","end","opts","showControls","node","autoplay","type","frequency","support","playbackrate","quality","player","document","getElementById","posterImage","poster","ext","split","pop","indexOf","audio","canvas","insertAdjacentHTML","M","cfg","wwwroot","this","src","controls","currentTime","body","classList","contains","muted","tabIndex","self","add","setAttribute","addEventListener","aspectratio","ratio","Math","min","duration","pause","time","ended","paused","e","error","rate","playbackRate","visualizer","context","AudioContext","createMediaElementSource","analyser","createAnalyser","width","window","innerWidth","height","innerHeight","ctx","getContext","connect","destination","fftSize","barHeight","bufferLength","frequencyBinCount","dataArray","Uint8Array","WIDTH","HEIGHT","barWidth","x","renderFrame","requestAnimationFrame","getByteFrequencyData","fillStyle","fillRect","i","r","g","play","stop","starttime","seek","getCurrentTime","getDuration","isPaused","isPlaying","isEnded","videoWidth","videoHeight","destroy","innerHTML","removeAttribute","load","getState","setRate","mute","unMute","originalPlayer","setQuality"],"mappings":"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"}