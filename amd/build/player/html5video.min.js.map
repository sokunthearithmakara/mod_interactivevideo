{"version":3,"file":"html5video.min.js","sources":["../../src/player/html5video.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * HTML5 Video Player class\n *\n * @module     mod_interactivevideo/player/html5video\n * @copyright  2024 Sokunthearith Makara <sokunthearithmakara@gmail.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\nimport {dispatchEvent} from 'core/event_dispatcher';\nimport $ from 'jquery';\n\nclass Html5Video {\n    /**\n     * Creates an instance of an HTML5 video player.\n     *\n     * @constructor\n     * @param {string} url - The URL of the video to be played.\n     * @param {number} start - The start time of the video in seconds.\n     * @param {number} [end] - The end time of the video in seconds. If not provided, defaults to the video's duration.\n     * @param {boolean} showControls - Whether to show the video controls.\n     *\n     * @property {string} type - The type of the player, set to \"html5video\".\n     * @property {number} start - The start time of the video.\n     * @property {number} end - The end time of the video.\n     * @property {number} frequency - The frequency of some operation, set to 0.28.\n     * @property {Object} support - An object indicating support for playback rate and quality.\n     * @property {boolean} support.playbackrate - Indicates if playback rate control is supported.\n     * @property {boolean} support.quality - Indicates if quality control is supported.\n     * @property {HTMLVideoElement} player - The HTML5 video element.\n     * @property {string} posterImage - The poster image of the video.\n     *\n     * @fires iv:playerReady - Dispatched when the video's metadata is loaded.\n     * @fires iv:playerSeek - Dispatched when the video is seeked.\n     * @fires iv:playerEnded - Dispatched when the video ends.\n     * @fires iv:playerPaused - Dispatched when the video is paused.\n     * @fires iv:playerPlaying - Dispatched when the video is playing.\n     * @fires iv:playerError - Dispatched when there is an error with the video.\n     * @fires iv:playerRateChange - Dispatched when the playback rate changes.\n     */\n    constructor(url, start, end, showControls) {\n        this.type = \"html5video\";\n        this.start = start;\n        this.end = end;\n        this.frequency = 0.28;\n        this.support = {\n            playbackrate: true,\n            quality: false,\n        };\n        var player = document.getElementById('player');\n        player.src = url;\n        player.controls = showControls;\n        player.autoplay = false;\n        player.currentTime = start;\n        // Disable keyboard controls.\n        player.tabIndex = -1;\n        this.posterImage = player.poster;\n        let self = this;\n        if (!showControls) {\n            $('body').addClass('no-original-controls');\n        }\n\n        // Play inline.\n        player.setAttribute('playsinline', '');\n\n        // Disable picture-in-picture.\n        player.setAttribute('disablePictureInPicture', '');\n\n        player.addEventListener('loadedmetadata', function() {\n            self.aspectratio = self.ratio();\n            dispatchEvent('iv:playerReady');\n            end = !end ? player.duration : Math.min(end, player.duration);\n\n        });\n\n        player.addEventListener('seeked', function() {\n            dispatchEvent('iv:playerSeek', {time: player.currentTime});\n        });\n\n        player.addEventListener('timeupdate', function() {\n            if (player.ended || (end && player.currentTime >= end)) {\n                dispatchEvent('iv:playerEnded');\n                player.pause();\n            } else if (player.paused) {\n                dispatchEvent('iv:playerPaused');\n            } else if (!player.paused) {\n                dispatchEvent('iv:playerPlaying');\n            }\n        });\n\n        player.addEventListener('error', function(e) {\n            dispatchEvent('iv:playerError', {error: e});\n        });\n\n        player.addEventListener('ratechange', function() {\n            dispatchEvent('iv:playerRateChange', {rate: player.playbackRate});\n        });\n\n        this.player = player;\n    }\n\n    /**\n     * Plays the HTML5 video using the player instance.\n     *\n     * @method play\n     */\n    play() {\n        this.player.play();\n    }\n    /**\n     * Pauses the video playback.\n     *\n     * This method calls the pause function on the player instance to stop the video.\n     */\n    pause() {\n        this.player.pause();\n    }\n    /**\n     * Stops the video playback and sets the current time to the specified start time.\n     *\n     * @param {number} starttime - The time (in seconds) to set the video's current time to.\n     */\n    stop(starttime) {\n        this.player.pause();\n        this.player.currentTime = starttime;\n    }\n    /**\n     * Seeks the video to a specified time.\n     *\n     * @param {number} time - The time in seconds to seek to.\n     * @returns {boolean} Returns true when the seek operation is initiated.\n     */\n    seek(time) {\n        this.player.currentTime = time;\n        return true;\n    }\n    /**\n     * Retrieves the current playback time of the video.\n     *\n     * @returns {number} The current time of the video in seconds.\n     */\n    getCurrentTime() {\n        return this.player.currentTime;\n    }\n    /**\n     * Retrieves the duration of the video.\n     *\n     * @returns {number} The duration of the video in seconds.\n     */\n    getDuration() {\n        return this.player.duration;\n    }\n    /**\n     * Checks if the video player is currently paused.\n     *\n     * @returns {boolean} True if the player is paused, false otherwise.\n     */\n    isPaused() {\n        return this.player.paused;\n    }\n    /**\n     * Checks if the video player is currently playing.\n     *\n     * @returns {boolean} True if the video is playing, false if it is paused.\n     */\n    isPlaying() {\n        return !this.player.paused;\n    }\n    /**\n     * Checks if the video has ended.\n     *\n     * @returns {boolean} True if the video has ended, otherwise false.\n     */\n    isEnded() {\n        return this.player.ended;\n    }\n    /**\n     * Calculates the aspect ratio of the video.\n     * If the video is wider than a 16:9 ratio, it returns the actual video ratio.\n     * Otherwise, it returns the 16:9 ratio.\n     *\n     * @returns {number} The aspect ratio of the video.\n     */\n    ratio() {\n        // If wide video, use that ratio; otherwise, 16:9\n        return this.player.videoWidth / this.player.videoHeight;\n    }\n    /**\n     * Destroys the HTML5 video player instance.\n     *\n     * This method pauses the video, removes the source attribute, and reloads the player.\n     * It is used to clean up the player instance and release any resources it may be holding.\n     */\n    destroy() {\n        this.player.pause();\n        this.player.removeAttribute('src');\n        this.player.load();\n    }\n    /**\n     * Retrieves the current state of the video player.\n     *\n     * @returns {string} - Returns 'paused' if the player is paused, otherwise 'playing'.\n     */\n    getState() {\n        return this.player.paused ? 'paused' : 'playing';\n    }\n    /**\n     * Sets the playback rate of the video player.\n     *\n     * @param {number} rate - The desired playback rate. A value of 1.0 represents normal speed.\n     */\n    setRate(rate) {\n        this.player.playbackRate = rate;\n    }\n    /**\n     * Mutes the HTML5 video player.\n     */\n    mute() {\n        this.player.muted = true;\n    }\n    /**\n     * Unmutes the video player.\n     */\n    unMute() {\n        this.player.muted = false;\n    }\n    /**\n     * Returns the original video player instance.\n     *\n     * @returns {Object} The video player instance.\n     */\n    originalPlayer() {\n        return this.player;\n    }\n    /**\n     * Sets the video quality.\n     *\n     * Note: This functionality is not supported.\n     *\n     * @param {string} quality - The desired quality setting.\n     * @returns {string} The quality setting that was passed in.\n     */\n    setQuality(quality) {\n        return quality;\n    }\n}\n\nexport default Html5Video;"],"names":["constructor","url","start","end","showControls","type","frequency","support","playbackrate","quality","player","document","getElementById","src","controls","autoplay","currentTime","tabIndex","posterImage","poster","self","this","addClass","setAttribute","addEventListener","aspectratio","ratio","Math","min","duration","time","ended","pause","paused","e","error","rate","playbackRate","play","stop","starttime","seek","getCurrentTime","getDuration","isPaused","isPlaying","isEnded","videoWidth","videoHeight","destroy","removeAttribute","load","getState","setRate","mute","muted","unMute","originalPlayer","setQuality"],"mappings":";;;;;;;gKAqDIA,YAAYC,IAAKC,MAAOC,IAAKC,mBACpBC,KAAO,kBACPH,MAAQA,WACRC,IAAMA,SACNG,UAAY,SACZC,QAAU,CACXC,cAAc,EACdC,SAAS,OAETC,OAASC,SAASC,eAAe,UACrCF,OAAOG,IAAMZ,IACbS,OAAOI,SAAWV,aAClBM,OAAOK,UAAW,EAClBL,OAAOM,YAAcd,MAErBQ,OAAOO,UAAY,OACdC,YAAcR,OAAOS,WACtBC,KAAOC,KACNjB,kCACC,QAAQkB,SAAS,wBAIvBZ,OAAOa,aAAa,cAAe,IAGnCb,OAAOa,aAAa,0BAA2B,IAE/Cb,OAAOc,iBAAiB,kBAAkB,WACtCJ,KAAKK,YAAcL,KAAKM,4CACV,kBACdvB,IAAOA,IAAwBwB,KAAKC,IAAIzB,IAAKO,OAAOmB,UAAvCnB,OAAOmB,YAIxBnB,OAAOc,iBAAiB,UAAU,+CAChB,gBAAiB,CAACM,KAAMpB,OAAOM,iBAGjDN,OAAOc,iBAAiB,cAAc,WAC9Bd,OAAOqB,OAAU5B,KAAOO,OAAOM,aAAeb,yCAChC,kBACdO,OAAOsB,SACAtB,OAAOuB,2CACA,mBACNvB,OAAOuB,4CACD,uBAItBvB,OAAOc,iBAAiB,SAAS,SAASU,uCACxB,iBAAkB,CAACC,MAAOD,OAG5CxB,OAAOc,iBAAiB,cAAc,+CACpB,sBAAuB,CAACY,KAAM1B,OAAO2B,uBAGlD3B,OAASA,OAQlB4B,YACS5B,OAAO4B,OAOhBN,aACStB,OAAOsB,QAOhBO,KAAKC,gBACI9B,OAAOsB,aACPtB,OAAOM,YAAcwB,UAQ9BC,KAAKX,kBACIpB,OAAOM,YAAcc,MACnB,EAOXY,wBACWrB,KAAKX,OAAOM,YAOvB2B,qBACWtB,KAAKX,OAAOmB,SAOvBe,kBACWvB,KAAKX,OAAOuB,OAOvBY,mBACYxB,KAAKX,OAAOuB,OAOxBa,iBACWzB,KAAKX,OAAOqB,MASvBL,eAEWL,KAAKX,OAAOqC,WAAa1B,KAAKX,OAAOsC,YAQhDC,eACSvC,OAAOsB,aACPtB,OAAOwC,gBAAgB,YACvBxC,OAAOyC,OAOhBC,kBACW/B,KAAKX,OAAOuB,OAAS,SAAW,UAO3CoB,QAAQjB,WACC1B,OAAO2B,aAAeD,KAK/BkB,YACS5C,OAAO6C,OAAQ,EAKxBC,cACS9C,OAAO6C,OAAQ,EAOxBE,wBACWpC,KAAKX,OAUhBgD,WAAWjD,gBACAA"}