{"version":3,"file":"dailymotion.min.js","sources":["../../src/player/dailymotion.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * DailyMotion Player class\n * Documented at https://developers.dailymotion.com/sdk/player-sdk/web/\n * @module     mod_interactivevideo/player/dailymotion\n * @copyright  2024 Sokunthearith Makara <sokunthearithmakara@gmail.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\nimport {dispatchEvent} from 'core/event_dispatcher';\nimport $ from 'jquery';\nlet player;\nclass DailyMotion {\n    /**\n     * Constructs a new Dailymotion player instance.\n     *\n     * @param {string} url - The URL of the Dailymotion video.\n     * @param {number} start - The start time of the video in seconds.\n     * @param {number} end - The end time of the video in seconds.\n     * @param {object} opts - The options for the player.\n     */\n    constructor(url, start, end, opts = {}) {\n        const showControls = opts.showControls || false;\n        const customStart = opts.customStart || false;\n        const node = opts.node || 'player';\n        this.type = 'dailymotion';\n        this.start = start;\n        this.frequency = 0.27;\n        this.support = {\n            playbackrate: true,\n            quality: true,\n        };\n\n        const reg = /(?:https?:\\/\\/)?(?:www\\.)?(?:dai\\.ly|dailymotion\\.com)\\/(?:embed\\/video\\/|video\\/|)([^/]+)/g;\n        const match = reg.exec(url);\n        const videoId = match[1];\n        this.videoId = videoId;\n        var self = this;\n        fetch(`https://api.dailymotion.com/video/${videoId}?fields=thumbnail_720_url`)\n            .then(response => response.json())\n            .then(data => {\n                self.posterImage = data.thumbnail_720_url;\n                return;\n            })\n            .catch(() => {\n                return;\n            });\n        var ready = false;\n        var dmOptions = {\n            video: videoId,\n            params: {\n                startTime: start,\n            },\n        };\n        let dailymotion;\n        const dailymotionEvents = async(player) => {\n            self.aspectratio = await self.ratio();\n            if (showControls) {\n                player.setQuality(480);\n            }\n            const state = await player.getState();\n            const totaltime = Number(state.videoDuration.toFixed(2));\n            end = !end ? totaltime : Math.min(end, totaltime);\n            end = Number(end.toFixed(2));\n            self.end = end;\n            self.totaltime = totaltime;\n            self.duration = self.end - self.start;\n            self.title = state.videoTitle;\n\n            // Get the available captions.\n            // Unset the captions.\n            player.setSubtitles(null);\n            let tracks = state.videoSubtitlesList;\n            if (tracks && tracks.length > 0) {\n                tracks = tracks.map(track => {\n                    const locale = track.split('-')[0];\n                    const country = track.split('-')[1];\n                    const displayNames = new Intl.DisplayNames([`${M.cfg.language}`], {type: 'language'});\n                    let label;\n                    if (country == 'auto') {\n                        label = displayNames.of(locale) + ' (Auto)';\n                    } else {\n                        label = displayNames.of(track) ?? track.toUpperCase();\n                    }\n                    return {\n                        label,\n                        code: track,\n                    };\n                });\n                self.captions = tracks;\n            }\n\n            // Fire iv:playerLoaded event\n            dispatchEvent('iv:playerLoaded', {\n                tracks: tracks, qualities: self.getQualities(),\n            });\n\n            // Handle Dailymotion behavior. Video always start from the start time,\n            // So if you seek before starting the video, it will just start from the beginning.\n            // So, to deal with this, we have to start the video as soon as the player is ready.\n            // Let it plays on mute which sometimes include ads. When the ad is done, the VIDEO_START event will fire.\n            // That's when we let user know, player is ready.\n            const playerEvents = () => {\n                player.on(dailymotion.events.VIDEO_SEEKEND, function(e) {\n                    dispatchEvent('iv:playerSeek', e.videoTime);\n                });\n\n                player.on(dailymotion.events.VIDEO_END, function() {\n                    player.seek(start);\n                    player.pause();\n                    dispatchEvent('iv:playerEnded');\n                });\n\n                player.off(dailymotion.events.VIDEO_TIMECHANGE);\n                player.on(dailymotion.events.VIDEO_TIMECHANGE, function(e) {\n                    if (!ready) {\n                        return;\n                    }\n\n                    if (e.videoTime >= end) {\n                        dispatchEvent('iv:playerEnded');\n                        player.pause();\n                    } else if (e.playerIsPlaying === false) {\n                        dispatchEvent('iv:playerPaused');\n                    } else if (e.playerIsPlaying === true) {\n                        dispatchEvent('iv:playerPlaying');\n                    }\n                });\n\n                player.on(dailymotion.events.VIDEO_PLAY, function() {\n                    dispatchEvent('iv:playerPlaying');\n                });\n\n                player.on(dailymotion.events.VIDEO_PAUSE, function() {\n                    dispatchEvent('iv:playerPaused');\n                });\n\n                player.on(dailymotion.events.VIDEO_END, function() {\n                    dispatchEvent('iv:playerEnded');\n                });\n\n                player.on(dailymotion.events.PLAYER_ERROR, function(e) {\n                    window.console.log(e);\n                    dispatchEvent('iv:playerError', {error: e});\n                });\n\n                player.on(dailymotion.events.PLAYER_PLAYBACKSPEEDCHANGE, function(e) {\n                    dispatchEvent('iv:playerRateChange', {rate: e.playerPlaybackSpeed});\n                });\n\n                player.on(dailymotion.events.VIDEO_QUALITYCHANGE, function(e) {\n                    dispatchEvent('iv:playerQualityChange', {quality: e.videoQuality});\n                });\n            };\n\n            if (customStart) {\n                player.setMute(true);\n                player.play(); // Start the video to get the ad out of the way.\n                player.on(dailymotion.events.VIDEO_TIMECHANGE, function() {\n                    $(\"#start-screen\").removeClass('bg-transparent');\n                    if (ready == true) { // When the video is replayed, it will fire VIDEO_START event again.\n                        player.setMute(true);\n                    }\n                    setTimeout(async() => {\n                        player.seek(start);\n                        player.setMute(false);\n                        if (!ready) {\n                            await self.pause();\n                            playerEvents();\n                            ready = true;\n                            dispatchEvent('iv:playerReady');\n                        }\n                    }, 1000);\n                });\n            } else {\n                playerEvents();\n                ready = true;\n                dispatchEvent('iv:playerReady');\n            }\n\n            // Show ads to user so they know ad is playing, not because something is wrong.\n            player.on(dailymotion.events.AD_START, function() {\n                $(\".video-block\").css('background', 'transparent');\n                $(\"#start-screen\").addClass('bg-transparent');\n                $('#annotation-canvas').removeClass('d-none');\n            });\n        };\n\n        if (!window.dailymotion) {\n            // Add dailymotion script.\n            // At the time of writing this, the dailymotion player script is not generally available.\n            // Developers must set up the players and get the script from the dailymotion website.\n            var tag = document.createElement('script');\n            if (showControls) {\n                // If you fork this, change this to your own dailymotion player.\n                tag.src = \"https://geo.dailymotion.com/libs/player/xsyje.js\";\n            } else {\n                // If you fork this, change this to your own dailymotion player.\n                tag.src = \"https://geo.dailymotion.com/libs/player/xsyj8.js\";\n            }\n            var firstScriptTag = document.getElementsByTagName('script')[0];\n            firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);\n\n            window.dailymotion = {\n                onScriptLoaded: () => {\n                    dailymotion = window.dailymotion;\n                    dailymotion.createPlayer(node, dmOptions).then(function(pl) {\n                        player = pl;\n                        dailymotionEvents(player);\n                        return;\n                    }).catch(() => {\n                        // Do nothing.\n                    });\n                }\n            };\n        } else {\n            window.dailymotion.createPlayer(node, dmOptions).then(function(pl) {\n                player = pl;\n                dailymotionEvents(player);\n                dailymotion = window.dailymotion;\n                return;\n            }).catch(() => {\n                // Do nothing.\n            });\n        }\n    }\n    /**\n     * Plays the Dailymotion video using the player instance.\n     */\n    play() {\n        player.play();\n    }\n    /**\n     * Pauses the Dailymotion player.\n     *\n     * This method calls the `pause` function on the `player` object to halt video playback.\n     */\n    async pause() {\n        await player.pause();\n    }\n    /**\n     * Stops the video playback and seeks to the specified start time.\n     *\n     * @param {number} starttime - The time (in seconds) to seek to before pausing the video.\n     */\n    stop(starttime) {\n        player.seek(starttime);\n        player.pause();\n    }\n    /**\n     * Seeks the video player to a specified time.\n     *\n     * @param {number} time - The time in seconds to seek to.\n     * @returns {Promise<void>} A promise that resolves when the seek operation is complete.\n     */\n    async seek(time) {\n        await player.seek(time);\n        dispatchEvent('iv:playerSeek', {time: time});\n    }\n    /**\n     * Retrieves the current playback time of the video.\n     *\n     * @returns {Promise<number>} A promise that resolves to the current video time in seconds.\n     */\n    async getCurrentTime() {\n        const state = await player.getState();\n        return state.videoTime;\n    }\n    /**\n     * Asynchronously retrieves the duration of the video.\n     *\n     * @returns {Promise<number>} A promise that resolves to the duration of the video in seconds.\n     */\n    async getDuration() {\n        const state = await player.getState();\n        return state.videoDuration;\n    }\n    /**\n     * Checks if the Dailymotion player is paused.\n     *\n     * @async\n     * @function isPaused\n     * @returns {Promise<boolean>} A promise that resolves to a boolean indicating whether the player is paused.\n     */\n    async isPaused() {\n        const state = await player.getState();\n        return !state.playerIsPlaying;\n    }\n    /**\n     * Checks if the Dailymotion player is currently playing.\n     *\n     * @returns {Promise<boolean>} A promise that resolves to a boolean indicating if the player is playing.\n     */\n    async isPlaying() {\n        const state = await player.getState();\n        return state.playerIsPlaying;\n    }\n\n    /**\n     * Checks if the Dailymotion player has ended and is on the replay screen.\n     *\n     * @returns {Promise<boolean>} A promise that resolves to a boolean indicating if the player is on the replay screen.\n     */\n    async isEnded() {\n        const state = await player.getState();\n        return state.playerIsReplayScreen;\n    }\n    /**\n     * Calculates the aspect ratio of the player and compares it to 16:9.\n     * If the player's aspect ratio is greater than 16:9, it returns the player's aspect ratio.\n     * Otherwise, it returns 16:9.\n     *\n     * @returns {Promise<number>} The aspect ratio of the player or 16:9.\n     */\n    async ratio() {\n        const state = await player.getState();\n        const ratio = state.playerAspectRatio.split(':');\n        return ratio[0] / ratio[1];\n    }\n    /**\n     * Destroys the Dailymotion player instance.\n     *\n     * This method calls the `destroy` method on the `player` object to clean up\n     * and release any resources held by the player.\n     */\n    destroy() {\n        player.destroy();\n    }\n    /**\n     * Asynchronously retrieves the current state of the player.\n     *\n     * @returns {Promise<Object>} A promise that resolves to the current state of the player.\n     */\n    async getState() {\n        const state = await player.getState();\n        return state;\n    }\n    /**\n     * Sets the playback speed of the Dailymotion player.\n     *\n     * @param {number} rate - The playback rate to set.\n     */\n    setRate(rate) {\n        player.setPlaybackSpeed(rate);\n    }\n    /**\n     * Mutes the Dailymotion player.\n     *\n     * This method sets the player's mute state to true, effectively silencing any audio.\n     */\n    mute() {\n        player.setMute(true);\n    }\n    /**\n     * Unmutes the Dailymotion player.\n     */\n    unMute() {\n        player.setMute(false);\n    }\n    /**\n     * Returns the original Dailymotion player instance.\n     *\n     * @returns {Object} The Dailymotion player instance.\n     */\n    originalPlayer() {\n        return player;\n    }\n    /**\n     * Sets the quality of the video player.\n     *\n     * @param {string} quality - The desired quality level for the video player.\n     */\n    setQuality(quality) {\n        player.setQuality(quality);\n    }\n    /**\n     * Retrieves the available video qualities and the current quality setting.\n     *\n     * @returns {Promise<Object>} An object containing:\n     * - `qualities` {Array<string>}: A list of available video qualities including 'default'.\n     * - `qualitiesLabel` {Array<string>}: A list of video quality labels including 'Auto'.\n     * - `currentQuality` {string}: The current video quality setting, 'default' if set to 'Auto'.\n     */\n    async getQualities() {\n        let states = await this.getState();\n        return {\n            qualities: ['default', ...states.videoQualitiesList],\n            qualitiesLabel: ['Auto', ...states.videoQualitiesList],\n            currentQuality: states.videoQuality == 'Auto' ? 'default' : states.videoQuality,\n        };\n    }\n\n    /**\n     * Sets the caption track for the video player.\n     * @param {string} track - The caption track to set.\n     */\n    setCaption(track) {\n        player.setSubtitles(track);\n    }\n}\n\nexport default DailyMotion;"],"names":["player","constructor","url","start","end","opts","showControls","customStart","node","type","frequency","support","playbackrate","quality","videoId","exec","self","this","fetch","then","response","json","data","posterImage","thumbnail_720_url","catch","ready","dmOptions","video","params","startTime","dailymotion","dailymotionEvents","async","aspectratio","ratio","setQuality","state","getState","totaltime","Number","videoDuration","toFixed","Math","min","duration","title","videoTitle","setSubtitles","tracks","videoSubtitlesList","length","map","track","locale","split","country","displayNames","Intl","DisplayNames","M","cfg","language","label","of","toUpperCase","code","captions","qualities","getQualities","playerEvents","on","events","VIDEO_SEEKEND","e","videoTime","VIDEO_END","seek","pause","off","VIDEO_TIMECHANGE","playerIsPlaying","VIDEO_PLAY","VIDEO_PAUSE","PLAYER_ERROR","window","console","log","error","PLAYER_PLAYBACKSPEEDCHANGE","rate","playerPlaybackSpeed","VIDEO_QUALITYCHANGE","videoQuality","setMute","play","removeClass","setTimeout","AD_START","css","addClass","createPlayer","pl","tag","document","createElement","src","firstScriptTag","getElementsByTagName","parentNode","insertBefore","onScriptLoaded","stop","starttime","time","playerIsReplayScreen","playerAspectRatio","destroy","setRate","setPlaybackSpeed","mute","unMute","originalPlayer","states","videoQualitiesList","qualitiesLabel","currentQuality","setCaption"],"mappings":"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"}