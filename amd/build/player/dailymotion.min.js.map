{"version":3,"file":"dailymotion.min.js","sources":["../../src/player/dailymotion.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * DailyMotion Player class\n * Documented at https://developers.dailymotion.com/sdk/player-sdk/web/\n * @module     mod_interactivevideo/player/dailymotion\n * @copyright  2024 Sokunthearith Makara <sokunthearithmakara@gmail.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\nimport {dispatchEvent} from 'core/event_dispatcher';\nimport $ from 'jquery';\nlet player;\nclass DailyMotion {\n    /**\n     * Constructs a new Dailymotion player instance.\n     *\n     * @param {string} url - The URL of the Dailymotion video.\n     * @param {number} start - The start time of the video in seconds.\n     * @param {number} end - The end time of the video in seconds.\n     * @param {object} opts - The options for the player.\n     */\n    constructor(url, start, end, opts = {}) {\n        const showControls = opts.showControls || false;\n        const customStart = opts.customStart || false;\n        const node = opts.node || 'player';\n        this.type = 'dailymotion';\n        this.start = start;\n        this.frequency = 0.27;\n        this.support = {\n            playbackrate: true,\n            quality: true,\n        };\n\n        const reg = /(?:https?:\\/\\/)?(?:www\\.)?(?:dai\\.ly|dailymotion\\.com)\\/(?:embed\\/video\\/|video\\/|)([^\\/]+)/g;\n        const match = reg.exec(url);\n        const videoId = match[1];\n        this.videoId = videoId;\n        var self = this;\n        fetch(`https://api.dailymotion.com/video/${videoId}?fields=thumbnail_720_url`)\n            .then(response => response.json())\n            .then(data => {\n                self.posterImage = data.thumbnail_720_url;\n                return;\n            })\n            .catch(() => {\n                return;\n            });\n        var ready = false;\n        var dmOptions = {\n            video: videoId,\n            params: {\n                startTime: start,\n            },\n        };\n        let dailymotion;\n        const dailymotionEvents = async (player) => {\n            self.aspectratio = await self.ratio();\n            if (showControls) {\n                player.setQuality(480);\n            }\n            const state = await player.getState();\n            end = !end ? state.videoDuration : Math.min(end, state.videoDuration);\n            self.end = end;\n            self.title = state.videoTitle;\n            // Handle Dailymotion behavior. Video always start from the start time,\n            // So if you seek before starting the video, it will just start from the beginning.\n            // So, to deal with this, we have to start the video as soon as the player is ready.\n            // Let it plays on mute which sometimes include ads. When the ad is done, the VIDEO_START event will fire.\n            // That's when we let user know, player is ready.\n            if (customStart) {\n                player.setMute(true);\n                player.play();\n                player.on(dailymotion.events.VIDEO_START, function() {\n                    $(\"#start-screen\").removeClass('bg-transparent');\n                    if (ready == true) { // When the video is replayed, it will fire VIDEO_START event again.\n                        player.setMute(true);\n                    }\n                    setTimeout(() => {\n                        player.seek(start);\n                        player.setMute(false);\n                        if (!ready) {\n                            player.pause();\n                            ready = true;\n                            dispatchEvent('iv:playerReady');\n                        }\n                    }, 1000);\n                });\n            } else {\n                ready = true;\n                dispatchEvent('iv:playerReady');\n            }\n\n            // Show ads to user so they know ad is playing, not because something is wrong.\n            player.on(dailymotion.events.AD_START, function() {\n                $(\".video-block\").css('background', 'transparent');\n                $(\"#start-screen\").addClass('bg-transparent');\n            });\n\n            player.on(dailymotion.events.VIDEO_SEEKEND, function(e) {\n                dispatchEvent('iv:playerSeek', e.videoTime);\n            });\n\n            player.on(dailymotion.events.VIDEO_END, function() {\n                player.seek(start);\n                player.pause();\n                dispatchEvent('iv:playerEnded');\n            });\n\n            player.on(dailymotion.events.VIDEO_TIMECHANGE, function(e) {\n                if (!ready) {\n                    return;\n                }\n\n                if (e.videoTime >= end) {\n                    dispatchEvent('iv:playerEnded');\n                    player.pause();\n                } else if (e.playerIsPlaying === false) {\n                    dispatchEvent('iv:playerPaused');\n                } else if (e.playerIsPlaying === true) {\n                    dispatchEvent('iv:playerPlaying');\n                }\n            });\n\n            player.on(dailymotion.events.VIDEO_PLAY, function() {\n                dispatchEvent('iv:playerPlaying');\n            });\n\n            player.on(dailymotion.events.VIDEO_PAUSE, function() {\n                dispatchEvent('iv:playerPaused');\n            });\n\n            player.on(dailymotion.events.VIDEO_END, function() {\n                dispatchEvent('iv:playerEnded');\n            });\n\n            player.on(dailymotion.events.PLAYER_ERROR, function(e) {\n                dispatchEvent('iv:playerError', {error: e});\n            });\n\n            player.on(dailymotion.events.PLAYER_PLAYBACKSPEEDCHANGE, function(e) {\n                dispatchEvent('iv:playerRateChange', {rate: e.playerPlaybackSpeed});\n            });\n\n            player.on(dailymotion.events.VIDEO_QUALITYCHANGE, function(e) {\n                dispatchEvent('iv:playerQualityChange', {quality: e.videoQuality});\n            });\n        };\n\n        if (!window.dailymotion) {\n            // Add dailymotion script.\n            var tag = document.createElement('script');\n            if (showControls) {\n                tag.src = \"https://geo.dailymotion.com/libs/player/xsyje.js\";\n            } else {\n                tag.src = \"https://geo.dailymotion.com/libs/player/xsyj8.js\";\n            }\n            var firstScriptTag = document.getElementsByTagName('script')[0];\n            firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);\n\n            window.dailymotion = {\n                onScriptLoaded: () => {\n                    dailymotion = window.dailymotion;\n                    dailymotion.createPlayer(node, dmOptions).then(function(pl) {\n                        player = pl;\n                        dailymotionEvents(player);\n                        return;\n                    }).catch(() => {\n                        // Do nothing.\n                    });\n                }\n            };\n        } else {\n            window.dailymotion.createPlayer(node, dmOptions).then(function(pl) {\n                player = pl;\n                dailymotionEvents(player);\n                dailymotion = window.dailymotion;\n                return;\n            }).catch(() => {\n                // Do nothing.\n            });\n        }\n    }\n    /**\n     * Plays the Dailymotion video using the player instance.\n     */\n    play() {\n        player.play();\n    }\n    /**\n     * Pauses the Dailymotion player.\n     *\n     * This method calls the `pause` function on the `player` object to halt video playback.\n     */\n    async pause() {\n        await player.pause();\n    }\n    /**\n     * Stops the video playback and seeks to the specified start time.\n     *\n     * @param {number} starttime - The time (in seconds) to seek to before pausing the video.\n     */\n    stop(starttime) {\n        player.seek(starttime);\n        player.pause();\n    }\n    /**\n     * Seeks the video player to a specified time.\n     *\n     * @param {number} time - The time in seconds to seek to.\n     * @returns {Promise<void>} A promise that resolves when the seek operation is complete.\n     */\n    async seek(time) {\n        await player.seek(time);\n        dispatchEvent('iv:playerSeek', {time: time});\n    }\n    /**\n     * Retrieves the current playback time of the video.\n     *\n     * @returns {Promise<number>} A promise that resolves to the current video time in seconds.\n     */\n    async getCurrentTime() {\n        const state = await player.getState();\n        return state.videoTime;\n    }\n    /**\n     * Asynchronously retrieves the duration of the video.\n     *\n     * @returns {Promise<number>} A promise that resolves to the duration of the video in seconds.\n     */\n    async getDuration() {\n        const state = await player.getState();\n        return state.videoDuration;\n    }\n    /**\n     * Checks if the Dailymotion player is paused.\n     *\n     * @async\n     * @function isPaused\n     * @returns {Promise<boolean>} A promise that resolves to a boolean indicating whether the player is paused.\n     */\n    async isPaused() {\n        const state = await player.getState();\n        return !state.playerIsPlaying;\n    }\n    /**\n     * Checks if the Dailymotion player is currently playing.\n     *\n     * @returns {Promise<boolean>} A promise that resolves to a boolean indicating if the player is playing.\n     */\n    async isPlaying() {\n        const state = await player.getState();\n        return state.playerIsPlaying;\n    }\n\n    /**\n     * Checks if the Dailymotion player has ended and is on the replay screen.\n     *\n     * @returns {Promise<boolean>} A promise that resolves to a boolean indicating if the player is on the replay screen.\n     */\n    async isEnded() {\n        const state = await player.getState();\n        return state.playerIsReplayScreen;\n    }\n    /**\n     * Calculates the aspect ratio of the player and compares it to 16:9.\n     * If the player's aspect ratio is greater than 16:9, it returns the player's aspect ratio.\n     * Otherwise, it returns 16:9.\n     *\n     * @returns {Promise<number>} The aspect ratio of the player or 16:9.\n     */\n    async ratio() {\n        const state = await player.getState();\n        const ratio = state.playerAspectRatio.split(':');\n        return ratio[0] / ratio[1];\n    }\n    /**\n     * Destroys the Dailymotion player instance.\n     *\n     * This method calls the `destroy` method on the `player` object to clean up\n     * and release any resources held by the player.\n     */\n    destroy() {\n        player.destroy();\n    }\n    /**\n     * Asynchronously retrieves the current state of the player.\n     *\n     * @returns {Promise<Object>} A promise that resolves to the current state of the player.\n     */\n    async getState() {\n        const state = await player.getState();\n        return state;\n    }\n    /**\n     * Sets the playback speed of the Dailymotion player.\n     *\n     * @param {number} rate - The playback rate to set.\n     */\n    setRate(rate) {\n        player.setPlaybackSpeed(rate);\n    }\n    /**\n     * Mutes the Dailymotion player.\n     *\n     * This method sets the player's mute state to true, effectively silencing any audio.\n     */\n    mute() {\n        player.setMute(true);\n    }\n    /**\n     * Unmutes the Dailymotion player.\n     */\n    unMute() {\n        player.setMute(false);\n    }\n    /**\n     * Returns the original Dailymotion player instance.\n     *\n     * @returns {Object} The Dailymotion player instance.\n     */\n    originalPlayer() {\n        return player;\n    }\n    /**\n     * Sets the quality of the video player.\n     *\n     * @param {string} quality - The desired quality level for the video player.\n     */\n    setQuality(quality) {\n        player.setQuality(quality);\n    }\n    /**\n     * Retrieves the available video qualities and the current quality setting.\n     *\n     * @returns {Promise<Object>} An object containing:\n     * - `qualities` {Array<string>}: A list of available video qualities including 'default'.\n     * - `qualitiesLabel` {Array<string>}: A list of video quality labels including 'Auto'.\n     * - `currentQuality` {string}: The current video quality setting, 'default' if set to 'Auto'.\n     */\n    async getQualities() {\n        let states = await this.getState();\n        return {\n            qualities: ['default', ...states.videoQualitiesList],\n            qualitiesLabel: ['Auto', ...states.videoQualitiesList],\n            currentQuality: states.videoQuality == 'Auto' ? 'default' : states.videoQuality,\n        };\n    }\n}\n\nexport default DailyMotion;"],"names":["player","constructor","url","start","end","opts","showControls","customStart","node","type","frequency","support","playbackrate","quality","videoId","exec","self","this","fetch","then","response","json","data","posterImage","thumbnail_720_url","catch","ready","dmOptions","video","params","startTime","dailymotion","dailymotionEvents","async","aspectratio","ratio","setQuality","state","getState","Math","min","videoDuration","title","videoTitle","setMute","play","on","events","VIDEO_START","removeClass","setTimeout","seek","pause","AD_START","css","addClass","VIDEO_SEEKEND","e","videoTime","VIDEO_END","VIDEO_TIMECHANGE","playerIsPlaying","VIDEO_PLAY","VIDEO_PAUSE","PLAYER_ERROR","error","PLAYER_PLAYBACKSPEEDCHANGE","rate","playerPlaybackSpeed","VIDEO_QUALITYCHANGE","videoQuality","window","createPlayer","pl","tag","document","createElement","src","firstScriptTag","getElementsByTagName","parentNode","insertBefore","onScriptLoaded","stop","starttime","time","playerIsReplayScreen","playerAspectRatio","split","destroy","setRate","setPlaybackSpeed","mute","unMute","originalPlayer","states","qualities","videoQualitiesList","qualitiesLabel","currentQuality"],"mappings":"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"}