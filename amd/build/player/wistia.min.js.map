{"version":3,"file":"wistia.min.js","sources":["../../src/player/wistia.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Wistia Player class\n * Doc: https://docs.wistia.com/docs/javascript-player-api\n *\n * @module     mod_interactivevideo/player/wistia\n * @copyright  2024 Sokunthearith Makara <sokunthearithmakara@gmail.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\nimport $ from 'jquery';\nimport {dispatchEvent} from 'core/event_dispatcher';\nlet player;\n\nclass Wistia {\n    /**\n     * Constructs a new Wistia player instance.\n     *\n     * @param {string} url - The URL of the Wistia video.\n     * @param {number} start - The start time of the video in seconds.\n     * @param {number} end - The end time of the video in seconds.\n     * @param {boolean} showControls - Flag indicating whether to show video controls.\n     */\n    constructor(url, start, end, showControls) {\n        this.type = 'wistia';\n        this.start = start;\n        this.frequency = 0.3;\n        this.support = {\n            playbackrate: true,\n            quality: true,\n        };\n        if (!showControls) {\n            $('body').addClass('no-original-controls');\n        }\n        const regex = /(?:https?:\\/\\/)?(?:www\\.)?(?:wistia\\.com)\\/medias\\/([^\\/]+)/g;\n        const match = regex.exec(url);\n        const videoId = match[1];\n        this.videoId = videoId;\n        $(\"#player\").html(`<div class=\"wistia_embed wistia_async_${videoId} wmode=transparent\n             controlsVisibleOnLoad=${showControls} playButton=${showControls} videoFoam=false silentAutoPlay=allow playsinline=true\n              fullscreenButton=false time=${start} fitStrategy=contain\" style=\"height:100%;width:100%\"></div>`);\n        let self = this;\n        $.get('https://fast.wistia.com/oembed.json?url=' + url)\n            .then(function(data) {\n                self.posterImage = data.thumbnail_url;\n            });\n        let ready = false;\n        const wistiaOptions = {\n            id: videoId,\n            onReady: function(video) {\n                player = video;\n                end = !end ? video.duration() : Math.min(end, video.duration());\n                self.aspectratio = self.ratio();\n                if (start > 0) {\n                    video.play();\n                    video.time(start);\n                    video.pause();\n                    video.on(\"pause\", () => {\n                        if (!ready) {\n                            ready = true;\n                            dispatchEvent('iv:playerReady');\n                        }\n                    });\n                } else {\n                    ready = true;\n                    dispatchEvent('iv:playerReady');\n                }\n                video.unmute();\n\n                video.on(\"pause\", () => {\n                    if (!ready) {\n                        return;\n                    }\n                    dispatchEvent('iv:playerPaused');\n                });\n\n                video.on(\"seek\", (e) => {\n                    if (!ready) {\n                        return;\n                    }\n                    dispatchEvent('iv:playerSeek', {time: e});\n                });\n\n                video.bind('play', () => {\n                    if (!ready) {\n                        return;\n                    }\n                    dispatchEvent('iv:playerPlaying');\n                    if (video.time() > end) {\n                        dispatchEvent('iv:playerEnded');\n                        video.time(start);\n                        video.pause();\n                    }\n                });\n\n                video.on('timechange', (s) => {\n                    if (!ready) {\n                        return;\n                    }\n                    if (s > end) {\n                        dispatchEvent('iv:playerEnded');\n                        video.time(start);\n                        video.pause();\n                    }\n                });\n\n                video.on(\"error\", (e) => {\n                    dispatchEvent('iv:playerError', {error: e});\n                });\n\n                video.on(\"playbackratechange\", (e) => {\n                    dispatchEvent('iv:playerRateChange', {rate: e});\n                });\n\n            },\n            onError: function(e) {\n                dispatchEvent('iv:playerError', {error: e});\n            }\n        };\n\n        if (!window._wq) {\n            // Add wistia script\n            var tag = document.createElement('script');\n            tag.src = \"https://fast.wistia.com/assets/external/E-v1.js\";\n            var firstScriptTag = document.getElementsByTagName('script')[0];\n            firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);\n\n            var interval = setInterval(() => {\n                if (window._wq) {\n                    clearInterval(interval);\n                    window._wq.push(wistiaOptions);\n                }\n            }, 1000);\n        } else {\n            window._wq.push(wistiaOptions);\n        }\n    }\n    /**\n     * Plays the Wistia video player.\n     *\n     * This method triggers the play action on the Wistia player instance.\n     */\n    play() {\n        player.play();\n    }\n    /**\n     * Pauses the Wistia video player.\n     *\n     * This method calls the `pause` function on the Wistia player instance,\n     * effectively pausing the video playback.\n     */\n    pause() {\n        player.pause();\n    }\n    /**\n     * Stops the video playback and sets the playback time to the specified start time.\n     *\n     * @param {number} starttime - The time (in seconds) to set the video playback to after pausing.\n     */\n    stop(starttime) {\n        player.pause();\n        player.time(starttime);\n    }\n    /**\n     * Seeks the video player to a specified time.\n     *\n     * @param {number} time - The time in seconds to seek to.\n     * @returns {number} The time that was sought to.\n     */\n    seek(time) {\n        player.time(time);\n        dispatchEvent('iv:playerSeek', {time: time});\n        return time;\n    }\n    /**\n     * Retrieves the current playback time of the video player.\n     *\n     * @returns {number} The current time of the video in seconds.\n     */\n    getCurrentTime() {\n        return player.time();\n    }\n    /**\n     * Retrieves the duration of the video.\n     *\n     * @returns {number} The duration of the video in seconds.\n     */\n    getDuration() {\n        return player.duration();\n    }\n    /**\n     * Checks if the video player is currently paused.\n     *\n     * @returns {boolean} True if the player is paused, false otherwise.\n     */\n    isPaused() {\n        return player.state() === 'paused';\n    }\n    /**\n     * Checks if the video player is currently playing.\n     *\n     * @returns {boolean} True if the player is in the 'playing' state, otherwise false.\n     */\n    isPlaying() {\n        return player.state() === 'playing';\n    }\n    /**\n     * Checks if the video player has reached the end of the video.\n     *\n     * @returns {boolean} True if the video has ended, otherwise false.\n     */\n    isEnded() {\n        return player.state() === 'ended';\n    }\n    /**\n     * Calculates the aspect ratio for the video player.\n     * If the player's aspect ratio is greater than 16:9, it returns the player's aspect ratio.\n     * Otherwise, it returns the default aspect ratio of 16:9.\n     *\n     * @returns {number} The aspect ratio of the video player.\n     */\n    ratio() {\n        return player.aspect();\n    }\n\n    /**\n     * Destroys the Wistia player instance by removing it from the DOM.\n     */\n    destroy() {\n        player.remove();\n    }\n    /**\n     * Retrieves the current state of the player.\n     *\n     * @returns {Object} The current state of the player.\n     */\n    getState() {\n        return player.state();\n    }\n    /**\n     * Sets the playback rate of the video player.\n     *\n     * @param {number} rate - The desired playback rate.\n     */\n    setRate(rate) {\n        player.playbackRate(rate);\n    }\n    /**\n     * Mutes the Wistia player.\n     */\n    mute() {\n        player.mute();\n    }\n    /**\n     * Unmutes the video player.\n     */\n    unMute() {\n        player.unmute();\n    }\n    /**\n     * Returns the original Wistia player instance.\n     *\n     * @returns {Object} The Wistia player instance.\n     */\n    originalPlayer() {\n        return player;\n    }\n    /**\n     * Sets the video quality for the player and dispatches a quality change event.\n     *\n     * @param {string} quality - The desired video quality to set.\n     * @returns {string} The quality that was set.\n     */\n    setQuality(quality) {\n        player.videoQuality(quality);\n        dispatchEvent('iv:playerQualityChange', {quality: quality});\n        return quality;\n    }\n    /**\n     * Retrieves the available video qualities and the current quality setting.\n     *\n     * @returns {Object} An object containing:\n     * - `qualities` {Array<string>}: List of available video quality options.\n     * - `qualitiesLabel` {Array<string>}: List of labels corresponding to the video quality options.\n     * - `currentQuality` {string|number}: The current video quality setting.\n     */\n    getQualities() {\n        return {\n            qualities: ['auto', '360', '540', '720', '1080', '2160'],\n            qualitiesLabel: ['Auto', '360p', '540p', '720p', '1080p', '4k'],\n            currentQuality: player.videoQuality() == 'auto' ? 0 : player.videoQuality(),\n        };\n    }\n}\n\nexport default Wistia;"],"names":["player","constructor","url","start","end","showControls","type","frequency","support","playbackrate","quality","addClass","videoId","exec","html","self","this","get","then","data","posterImage","thumbnail_url","ready","wistiaOptions","id","onReady","video","Math","min","duration","aspectratio","ratio","play","time","pause","on","unmute","e","bind","s","error","rate","onError","window","_wq","push","tag","document","createElement","src","firstScriptTag","getElementsByTagName","parentNode","insertBefore","interval","setInterval","clearInterval","stop","starttime","seek","getCurrentTime","getDuration","isPaused","state","isPlaying","isEnded","aspect","destroy","remove","getState","setRate","playbackRate","mute","unMute","originalPlayer","setQuality","videoQuality","getQualities","qualities","qualitiesLabel","currentQuality"],"mappings":";;;;;;;;SAyBIA,kKAWAC,YAAYC,IAAKC,MAAOC,IAAKC,mBACpBC,KAAO,cACPH,MAAQA,WACRI,UAAY,QACZC,QAAU,CACXC,cAAc,EACdC,SAAS,GAERL,kCACC,QAAQM,SAAS,8BAIjBC,QAFQ,+DACMC,KAAKX,KACH,QACjBU,QAAUA,4BACb,WAAWE,qDAA8CF,0EAC9BP,oCAA2BA,0HACpBF,0EAChCY,KAAOC,qBACTC,IAAI,2CAA6Cf,KAC9CgB,MAAK,SAASC,MACXJ,KAAKK,YAAcD,KAAKE,qBAE5BC,OAAQ,QACNC,cAAgB,CAClBC,GAAIZ,QACJa,QAAS,SAASC,OACd1B,OAAS0B,MACTtB,IAAOA,IAAyBuB,KAAKC,IAAIxB,IAAKsB,MAAMG,YAAvCH,MAAMG,WACnBd,KAAKe,YAAcf,KAAKgB,QACpB5B,MAAQ,GACRuB,MAAMM,OACNN,MAAMO,KAAK9B,OACXuB,MAAMQ,QACNR,MAAMS,GAAG,SAAS,KACTb,QACDA,OAAQ,sCACM,wBAItBA,OAAQ,sCACM,mBAElBI,MAAMU,SAENV,MAAMS,GAAG,SAAS,KACTb,2CAGS,sBAGlBI,MAAMS,GAAG,QAASE,IACTf,2CAGS,gBAAiB,CAACW,KAAMI,OAG1CX,MAAMY,KAAK,QAAQ,KACVhB,4CAGS,oBACVI,MAAMO,OAAS7B,0CACD,kBACdsB,MAAMO,KAAK9B,OACXuB,MAAMQ,aAIdR,MAAMS,GAAG,cAAeI,IACfjB,OAGDiB,EAAInC,0CACU,kBACdsB,MAAMO,KAAK9B,OACXuB,MAAMQ,YAIdR,MAAMS,GAAG,SAAUE,wCACD,iBAAkB,CAACG,MAAOH,OAG5CX,MAAMS,GAAG,sBAAuBE,wCACd,sBAAuB,CAACI,KAAMJ,QAIpDK,QAAS,SAASL,uCACA,iBAAkB,CAACG,MAAOH,SAI3CM,OAAOC,IAcRD,OAAOC,IAAIC,KAAKtB,mBAdH,KAETuB,IAAMC,SAASC,cAAc,UACjCF,IAAIG,IAAM,sDACNC,eAAiBH,SAASI,qBAAqB,UAAU,GAC7DD,eAAeE,WAAWC,aAAaP,IAAKI,oBAExCI,SAAWC,aAAY,KACnBZ,OAAOC,MACPY,cAAcF,UACdX,OAAOC,IAAIC,KAAKtB,kBAErB,MAUXS,OACIhC,OAAOgC,OAQXE,QACIlC,OAAOkC,QAOXuB,KAAKC,WACD1D,OAAOkC,QACPlC,OAAOiC,KAAKyB,WAQhBC,KAAK1B,aACDjC,OAAOiC,KAAKA,0CACE,gBAAiB,CAACA,KAAMA,OAC/BA,KAOX2B,wBACW5D,OAAOiC,OAOlB4B,qBACW7D,OAAO6B,WAOlBiC,iBAC8B,WAAnB9D,OAAO+D,QAOlBC,kBAC8B,YAAnBhE,OAAO+D,QAOlBE,gBAC8B,UAAnBjE,OAAO+D,QASlBhC,eACW/B,OAAOkE,SAMlBC,UACInE,OAAOoE,SAOXC,kBACWrE,OAAO+D,QAOlBO,QAAQ7B,MACJzC,OAAOuE,aAAa9B,MAKxB+B,OACIxE,OAAOwE,OAKXC,SACIzE,OAAOoC,SAOXsC,wBACW1E,OAQX2E,WAAWjE,gBACPV,OAAO4E,aAAalE,6CACN,yBAA0B,CAACA,QAASA,UAC3CA,QAUXmE,qBACW,CACHC,UAAW,CAAC,OAAQ,MAAO,MAAO,MAAO,OAAQ,QACjDC,eAAgB,CAAC,OAAQ,OAAQ,OAAQ,OAAQ,QAAS,MAC1DC,eAAyC,QAAzBhF,OAAO4E,eAA2B,EAAI5E,OAAO4E"}