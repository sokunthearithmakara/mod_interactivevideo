{"version":3,"file":"yt.min.js","sources":["../../src/player/yt.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Youtube Player class\n *\n * @module     mod_interactivevideo/player/yt\n * @copyright  2024 Sokunthearith Makara <sokunthearithmakara@gmail.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\nimport { dispatchEvent } from 'core/event_dispatcher';\nlet player;\nclass Yt {\n    constructor(url, start, end, showControls, customStart = false, preload = false) {\n        this.type = 'yt';\n        this.start = start;\n        this.end = end;\n        this.frequency = 0.15;\n\n        // Documented at https://developers.google.com/youtube/iframe_api_reference\n        var YT;\n        var regex = /(?:https?:\\/\\/)?(?:www\\.)?(?:youtube\\.com|youtu\\.be)(?:\\/embed\\/|\\/watch\\?v=|\\/)([^\\/]+)/g;\n        var match = regex.exec(url);\n        var videoId = match[1];\n        this.videoId = videoId;\n        this.posterImage = `https://img.youtube.com/vi/${videoId}/maxresdefault.jpg`;\n        var ready = false;\n        var self = this;\n        var options = {\n            videoId: videoId,\n            host: 'https://www.youtube-nocookie.com',\n            width: 1080,\n            height: 720,\n            playerVars: {\n                origin: window.location.host,\n                autoplay: 0,\n                hl: M.cfg.language,\n                start: start,\n                end: end,\n                controls: showControls ? 1 : 0,\n                showinfo: 0,\n                fs: 0,\n                cc_load_policy: 1,\n                cc_lang_pref: M.cfg.language,\n                iv_load_policy: 3,\n                autohide: 1,\n                rel: 0,\n                playsinline: 1,\n                disablekb: 1,\n            },\n            events: {\n                onError: function (e) {\n                    dispatchEvent('iv:playerError', { error: e.data });\n                },\n                onReady: function (e) {\n                    self.end = !self.end ? e.target.getDuration() : Math.min(self.end, e.target.getDuration());\n                    // It's always good idea to play the video at the beginning to download some data.\n                    // Otherwise, if user seek before start, they're gonna get blackscreen.\n                    if (preload == true && customStart == false) {\n                        ready = true;\n                        dispatchEvent('iv:playerReady');\n                    } else {\n                        e.target.mute();\n                        e.target.playVideo();\n                        let interval = setInterval(() => {\n                            if (e.target.getCurrentTime() > 0) {\n                                clearInterval(interval);\n                                e.target.seekTo(self.start);\n                                e.target.pauseVideo();\n                                e.target.unMute();\n                                ready = true;\n                                dispatchEvent('iv:playerReady');\n                            }\n                        }, 1000);\n                    }\n                },\n\n                onStateChange: function (e) {\n                    if (ready === false) {\n                        return;\n                    }\n                    switch (e.data) {\n                        case YT.PlayerState.ENDED:\n                            dispatchEvent('iv:playerEnded');\n                            break;\n                        case YT.PlayerState.PLAYING:\n                            if (player.getCurrentTime() >= self.end || player.getCurrentTime() < self.start) {\n                                player.seekTo(self.start);\n                                dispatchEvent('iv:playerEnded');\n                            } else {\n                                dispatchEvent('iv:playerPlaying');\n                            }\n                            break;\n                        case YT.PlayerState.PAUSED:\n                            dispatchEvent('iv:playerPaused');\n                            break;\n                        case YT.PlayerState.CUED:\n                            if (player.getCurrentTime() >= self.end) {\n                                player.seekTo(self.start);\n                            }\n                            break;\n                    }\n                }\n            }\n        };\n\n        // Load the IFrame Player API code asynchronously.\n        if (!window.YT) {\n            var tag = document.createElement('script');\n            tag.src = \"https://www.youtube.com/iframe_api\";\n            var firstScriptTag = document.getElementsByTagName('script')[0];\n            firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);\n            // Replace the 'player' element with an <iframe> and YouTube player\n            window.onYouTubeIframeAPIReady = function () {\n                YT = window.YT || {};\n                player = new YT.Player('player', options);\n            };\n        } else {\n            YT = window.YT || {};\n            player = new YT.Player('player', options);\n        }\n    }\n    play() {\n        player.playVideo();\n    }\n    pause() {\n        player.pauseVideo();\n    }\n    stop(starttime) {\n        player.seekTo(starttime);\n        player.pauseVideo();\n    }\n    seek(time) {\n        player.seekTo(time, true);\n        dispatchEvent('iv:playerSeek', { time: time });\n        return Promise.resolve();\n    }\n    getCurrentTime() {\n        return Promise.resolve(player.getCurrentTime());\n    }\n    getDuration() {\n        return Promise.resolve(player.getDuration());\n    }\n    isPaused() {\n        return Promise.resolve(player.getPlayerState() === 2);\n    }\n    isPlaying() {\n        return Promise.resolve(player.getPlayerState() === 1);\n    }\n    isEnded() {\n        if (player.getPlayerState() === 0) {\n            return Promise.resolve(true);\n        } else {\n            if (player.getCurrentTime() >= this.end) {\n                return Promise.resolve(true);\n            }\n        }\n        return Promise.resolve(false);\n    }\n    ratio() {\n        return Promise.resolve(16 / 9);\n    }\n    destroy() {\n        player.destroy();\n        dispatchEvent('iv:playerDestroyed');\n    }\n    getState() {\n        return Promise.resolve(player.getPlayerState());\n    }\n    setRate(rate) {\n        player.setPlaybackRate(rate);\n    }\n    mute() {\n        player.mute();\n    }\n    unMute() {\n        player.unMute();\n    }\n    originalPlayer() {\n        return player;\n    }\n}\n\nexport default Yt;"],"names":["player","constructor","url","start","end","showControls","customStart","preload","YT","type","frequency","videoId","exec","posterImage","ready","self","this","options","host","width","height","playerVars","origin","window","location","autoplay","hl","M","cfg","language","controls","showinfo","fs","cc_load_policy","cc_lang_pref","iv_load_policy","autohide","rel","playsinline","disablekb","events","onError","e","error","data","onReady","Math","min","target","getDuration","mute","playVideo","interval","setInterval","getCurrentTime","clearInterval","seekTo","pauseVideo","unMute","onStateChange","PlayerState","ENDED","PLAYING","PAUSED","CUED","Player","tag","document","createElement","src","firstScriptTag","getElementsByTagName","parentNode","insertBefore","onYouTubeIframeAPIReady","play","pause","stop","starttime","seek","time","Promise","resolve","isPaused","getPlayerState","isPlaying","isEnded","ratio","destroy","getState","setRate","rate","setPlaybackRate","originalPlayer"],"mappings":"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"}