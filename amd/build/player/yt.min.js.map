{"version":3,"file":"yt.min.js","sources":["../../src/player/yt.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Youtube Player class\n *\n * @module     mod_interactivevideo/player/yt\n * @copyright  2024 Sokunthearith Makara <sokunthearithmakara@gmail.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\nimport {dispatchEvent} from 'core/event_dispatcher';\nlet player;\nclass Yt {\n    /**\n     * Creates an instance of the YouTube player.\n     *\n     * @constructor\n     * @param {string} url - The URL of the YouTube video.\n     * @param {number} start - The start time of the video in seconds.\n     * @param {number} end - The end time of the video in seconds.\n     * @param {object} opts - The options for the player.\n     */\n    constructor(url, start, end, opts = {}) {\n        const showControls = opts.showControls || false;\n        const customStart = opts.customStart || false;\n        const preload = opts.preload || false;\n        const node = opts.node || 'player';\n        /**\n         * The type of the player\n         * @type {String}\n         * @default yt\n         * @private\n         * @readonly\n         */\n        this.type = 'yt';\n        /**\n         * The start time of the video\n         * @type {Number}\n         * @private\n         */\n        this.start = start;\n        /**\n         * The end time of the video\n         * @type {Number}\n         */\n        this.end = end;\n        /**\n         * Interval frequency\n         * @type {Number}\n         */\n        this.frequency = 0.25;\n        this.support = {\n            playbackrate: true,\n            quality: false,\n        };\n        // Documented at https://developers.google.com/youtube/iframe_api_reference\n        var YT;\n        let regex = new RegExp(\n            '(?:https?:\\\\/\\\\/)?' +\n            '(?:www\\\\.)?' +\n            '(?:youtube\\\\.com|youtu\\\\.be|youtube-nocookie\\\\.com)' +\n            '(?:\\\\/embed\\\\/|\\\\/watch\\\\?v=|\\\\/)([^\\\\/]+)',\n            'g'\n        );\n        var match = regex.exec(url);\n        var videoId = match[1];\n        videoId = videoId.split(\"&\")[0];\n        this.videoId = videoId;\n        this.posterImage = `https://img.youtube.com/vi/${videoId}/maxresdefault.jpg`;\n        var ready = false;\n        var self = this;\n        var options = {\n            videoId: videoId,\n            width: 1080,\n            height: 720,\n            playerVars: {\n                autoplay: opts.autoplay || 0,\n                hl: M.cfg.language,\n                start: start,\n                end: end,\n                controls: showControls ? 1 : 0,\n                showinfo: 0,\n                fs: 0,\n                iv_load_policy: 3,\n                cc_load_policy: 0,\n                autohide: 1,\n                rel: 0,\n                playsinline: 1,\n                disablekb: 1,\n                mute: 1,\n            },\n            events: {\n                onError: function(e) {\n                    dispatchEvent('iv:playerError', {error: e.data});\n                },\n                onReady: function(e) {\n                    self.title = e.target.videoTitle;\n                    self.end = !self.end ? e.target.getDuration() : Math.min(self.end, e.target.getDuration());\n                    self.aspectratio = self.ratio();\n                    // It's always good idea to play the video at the beginning to download some data.\n                    // Otherwise, if user seek before start, they're gonna get blackscreen.\n                    if (preload == true && customStart == false) {\n                        ready = true;\n                        dispatchEvent('iv:playerReady');\n                    } else {\n                        e.target.mute();\n                        e.target.playVideo();\n                        let interval = setInterval(() => {\n                            if (e.target.getCurrentTime() > 0) {\n                                clearInterval(interval);\n                                e.target.seekTo(self.start);\n                                e.target.pauseVideo();\n                                e.target.unMute();\n                                ready = true;\n                                dispatchEvent('iv:playerReady');\n                            }\n                        }, 1000);\n                    }\n                },\n\n                onStateChange: function(e) {\n                    if (ready === false) {\n                        return;\n                    }\n                    switch (e.data) {\n\n                        case YT.PlayerState.ENDED:\n                            dispatchEvent('iv:playerEnded');\n                            break;\n                        case YT.PlayerState.PLAYING:\n                            if (player.getCurrentTime() >= self.end || player.getCurrentTime() < self.start) {\n                                player.seekTo(self.start);\n                                dispatchEvent('iv:playerEnded');\n                            } else {\n                                dispatchEvent('iv:playerPlaying');\n                            }\n                            break;\n                        case YT.PlayerState.PAUSED:\n                            dispatchEvent('iv:playerPaused');\n                            break;\n                        case YT.PlayerState.CUED:\n                            if (player.getCurrentTime() >= self.end) {\n                                player.seekTo(self.start);\n                            }\n                            break;\n                    }\n                },\n\n                onPlaybackRateChange: function(e) {\n                    dispatchEvent('iv:playerRateChange', {rate: e.data});\n                }\n            }\n        };\n\n        if (url.includes('youtube-nocookie')) {\n            options.host = 'https://www.youtube-nocookie.com';\n        }\n        // Load the IFrame Player API code asynchronously.\n        if (!window.YT) {\n            var tag = document.createElement('script');\n            tag.src = \"https://www.youtube.com/iframe_api\";\n            var firstScriptTag = document.getElementsByTagName('script')[0];\n            firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);\n            // Replace the 'player' element with an <iframe> and YouTube player\n            window.onYouTubeIframeAPIReady = function() {\n                YT = window.YT || {};\n                player = new YT.Player(node, options);\n            };\n        } else {\n            YT = window.YT || {};\n            player = new YT.Player(node, options);\n        }\n    }\n    /**\n     * Play the video\n     * @return {Void}\n     */\n    play() {\n        player.playVideo();\n    }\n    /**\n     * Pause the video\n     * @return {Void}\n     */\n    async pause() {\n        await player.pauseVideo();\n    }\n    /**\n     * Stop the video\n     * @param {Number} starttime\n     * @return {Void}\n     */\n    stop(starttime) {\n        player.seekTo(starttime);\n        player.pauseVideo();\n    }\n    /**\n     * Seek the video to a specific time\n     * @param {Number} time\n     * @return {Boolean}\n     */\n    async seek(time) {\n        player.seekTo(time, true);\n        dispatchEvent('iv:playerSeek', {time: time});\n        return true;\n    }\n    /**\n     * Get the current time of the video\n     * @return {Number}\n     */\n    getCurrentTime() {\n        return player.getCurrentTime();\n    }\n    /**\n     * Get the duration of the video\n     * @return {Number}\n     */\n    getDuration() {\n        return player.getDuration();\n    }\n    /**\n     * Check if the video is paused\n     * @return {Boolean}\n     */\n    isPaused() {\n        return player.getPlayerState() === 2;\n    }\n    /**\n     * Check if the video is playing\n     * @return {Boolean}\n     */\n    isPlaying() {\n        return player.getPlayerState() === 1;\n    }\n    /**\n     * Check if the video is ended\n     * @return {Boolean}\n     */\n    isEnded() {\n        if (player.getPlayerState() === 0) {\n            return true;\n        } else {\n            if (player.getCurrentTime() >= this.end) {\n                return true;\n            }\n        }\n        return false;\n    }\n    /**\n     * Get the aspect ratio of the video\n     * @return {Number}\n     */\n    ratio() {\n        return 16 / 9; // YT always return 16:9 as of 2024.\n    }\n    /**\n     * Destroy the player\n     * @return {Void}\n     */\n    destroy() {\n        player.destroy();\n        dispatchEvent('iv:playerDestroyed');\n    }\n    /**\n     * Get the state of the player\n     * @return {Number}\n     */\n    getState() {\n        return player.getPlayerState();\n    }\n    /**\n     * Set playback rate of the video\n     * @param {Number} rate\n     */\n    setRate(rate) {\n        player.setPlaybackRate(rate);\n        return rate;\n    }\n    /**\n     * Mute the video\n     */\n    mute() {\n        player.mute();\n    }\n    /**\n     * Unmute the video\n     */\n    unMute() {\n        player.unMute();\n    }\n    /**\n     * Get the original player object\n     */\n    originalPlayer() {\n        return player;\n    }\n    /**\n     * Set quality of the video\n     * @param {String} quality\n     */\n    setQuality(quality) {\n        player.setPlaybackQuality(quality);\n        return quality;\n    }\n    /**\n     * Get the available qualities of the video\n     */\n    getQualities() {\n        return {\n            qualities: ['auto', 'medium', 'large', 'hd720', 'hd1080', 'hd2160'],\n            qualitiesLabel: ['Auto', '360p', '540p', '720p', '1080p', '4k'],\n            currentQuality: null,\n        };\n    }\n}\n\nexport default Yt;"],"names":["player","constructor","url","start","end","opts","showControls","customStart","preload","node","YT","type","frequency","support","playbackrate","quality","videoId","RegExp","exec","split","posterImage","ready","self","this","options","width","height","playerVars","autoplay","hl","M","cfg","language","controls","showinfo","fs","iv_load_policy","cc_load_policy","autohide","rel","playsinline","disablekb","mute","events","onError","e","error","data","onReady","title","target","videoTitle","Math","min","getDuration","aspectratio","ratio","playVideo","interval","setInterval","getCurrentTime","clearInterval","seekTo","pauseVideo","unMute","onStateChange","PlayerState","ENDED","PLAYING","PAUSED","CUED","onPlaybackRateChange","rate","includes","host","window","Player","tag","document","createElement","src","firstScriptTag","getElementsByTagName","parentNode","insertBefore","onYouTubeIframeAPIReady","play","stop","starttime","time","isPaused","getPlayerState","isPlaying","isEnded","destroy","getState","setRate","setPlaybackRate","originalPlayer","setQuality","setPlaybackQuality","getQualities","qualities","qualitiesLabel","currentQuality"],"mappings":"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"}