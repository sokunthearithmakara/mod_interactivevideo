{"version":3,"file":"yt.min.js","sources":["../../src/player/yt.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Youtube Player class\n *\n * @module     mod_interactivevideo/player/yt\n * @copyright  2024 Sokunthearith Makara <sokunthearithmakara@gmail.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\nimport {dispatchEvent} from 'core/event_dispatcher';\nlet player;\nclass Yt {\n    constructor(url, start, end, showControls, customStart = false, preload = false) {\n        /**\n         * The type of the player\n         * @type {String}\n         * @default yt\n         * @private\n         * @readonly\n         */\n        this.type = 'yt';\n        /**\n         * The start time of the video\n         * @type {Number}\n         * @private\n         */\n        this.start = start;\n        /**\n         * The end time of the video\n         * @type {Number}\n         */\n        this.end = end;\n        /**\n         * Interval frequency\n         * @type {Number}\n         */\n        this.frequency = 0.15;\n        this.support = {\n            playbackrate: true,\n            quality: false,\n        };\n        // Documented at https://developers.google.com/youtube/iframe_api_reference\n        var YT;\n        var regex = /(?:https?:\\/\\/)?(?:www\\.)?(?:youtube\\.com|youtu\\.be)(?:\\/embed\\/|\\/watch\\?v=|\\/)([^\\/]+)/g;\n        var match = regex.exec(url);\n        var videoId = match[1];\n        this.videoId = videoId;\n        this.posterImage = `https://img.youtube.com/vi/${videoId}/maxresdefault.jpg`;\n        var ready = false;\n        var self = this;\n        var options = {\n            videoId: videoId,\n            // host: 'https://www.youtube-nocookie.com',\n            width: 1080,\n            height: 720,\n            playerVars: {\n                origin: window.location.host,\n                autoplay: 0,\n                hl: M.cfg.language,\n                start: start,\n                end: end,\n                controls: showControls ? 1 : 0,\n                showinfo: 0,\n                fs: 0,\n                cc_load_policy: 1,\n                cc_lang_pref: M.cfg.language,\n                iv_load_policy: 3,\n                autohide: 1,\n                rel: 0,\n                playsinline: 1,\n                disablekb: 1,\n            },\n            events: {\n                onError: function(e) {\n                    dispatchEvent('iv:playerError', {error: e.data});\n                },\n                onReady: function(e) {\n                    e.target.getOptions();\n                    self.end = !self.end ? e.target.getDuration() : Math.min(self.end, e.target.getDuration());\n                    // It's always good idea to play the video at the beginning to download some data.\n                    // Otherwise, if user seek before start, they're gonna get blackscreen.\n                    if (preload == true && customStart == false) {\n                        ready = true;\n                        dispatchEvent('iv:playerReady');\n                    } else {\n                        e.target.mute();\n                        e.target.playVideo();\n                        let interval = setInterval(() => {\n                            if (e.target.getCurrentTime() > 0) {\n                                clearInterval(interval);\n                                e.target.seekTo(self.start);\n                                e.target.pauseVideo();\n                                e.target.unMute();\n                                ready = true;\n                                dispatchEvent('iv:playerReady');\n                            }\n                        }, 1000);\n                    }\n                },\n\n                onStateChange: function(e) {\n                    if (ready === false) {\n                        return;\n                    }\n                    switch (e.data) {\n\n                        case YT.PlayerState.ENDED:\n                            dispatchEvent('iv:playerEnded');\n                            break;\n                        case YT.PlayerState.PLAYING:\n                            if (player.getCurrentTime() >= self.end || player.getCurrentTime() < self.start) {\n                                player.seekTo(self.start);\n                                dispatchEvent('iv:playerEnded');\n                            } else {\n                                dispatchEvent('iv:playerPlaying');\n                            }\n                            break;\n                        case YT.PlayerState.PAUSED:\n                            dispatchEvent('iv:playerPaused');\n                            break;\n                        case YT.PlayerState.CUED:\n                            if (player.getCurrentTime() >= self.end) {\n                                player.seekTo(self.start);\n                            }\n                            break;\n                    }\n                },\n\n                onPlaybackRateChange: function(e) {\n                    dispatchEvent('iv:playerRateChange', {rate: e.data});\n                }\n            }\n        };\n\n        // Load the IFrame Player API code asynchronously.\n        if (!window.YT) {\n            var tag = document.createElement('script');\n            tag.src = \"https://www.youtube.com/iframe_api\";\n            var firstScriptTag = document.getElementsByTagName('script')[0];\n            firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);\n            // Replace the 'player' element with an <iframe> and YouTube player\n            window.onYouTubeIframeAPIReady = function() {\n                YT = window.YT || {};\n                player = new YT.Player('player', options);\n            };\n        } else {\n            YT = window.YT || {};\n            player = new YT.Player('player', options);\n        }\n    }\n    /**\n     * Play the video\n     * @return {Void}\n     */\n    play() {\n        player.playVideo();\n    }\n    /**\n     * Pause the video\n     * @return {Void}\n     */\n    pause() {\n        player.pauseVideo();\n    }\n    /**\n     * Stop the video\n     * @param {Number} starttime\n     * @return {Void}\n     */\n    stop(starttime) {\n        player.seekTo(starttime);\n        player.pauseVideo();\n    }\n    /**\n     * Seek the video to a specific time\n     * @param {Number} time\n     * @return {Boolean}\n     */\n    async seek(time) {\n        player.seekTo(time, true);\n        dispatchEvent('iv:playerSeek', {time: time});\n        return true;\n    }\n    /**\n     * Get the current time of the video\n     * @return {Number}\n     */\n    getCurrentTime() {\n        return player.getCurrentTime();\n    }\n    /**\n     * Get the duration of the video\n     * @return {Number}\n     */\n    getDuration() {\n        return player.getDuration();\n    }\n    /**\n     * Check if the video is paused\n     * @return {Boolean}\n     */\n    isPaused() {\n        return player.getPlayerState() === 2;\n    }\n    /**\n     * Check if the video is playing\n     * @return {Boolean}\n     */\n    isPlaying() {\n        return player.getPlayerState() === 1;\n    }\n    /**\n     * Check if the video is ended\n     * @return {Boolean}\n     */\n    isEnded() {\n        if (player.getPlayerState() === 0) {\n            return true;\n        } else {\n            if (player.getCurrentTime() >= this.end) {\n                return true;\n            }\n        }\n        return false;\n    }\n    /**\n     * Get the aspect ratio of the video\n     * @return {Number}\n     */\n    ratio() {\n        return 16 / 9;\n    }\n    /**\n     * Destroy the player\n     * @return {Void}\n     */\n    destroy() {\n        player.destroy();\n        dispatchEvent('iv:playerDestroyed');\n    }\n    /**\n     * Get the state of the player\n     * @return {Number}\n     */\n    getState() {\n        return player.getPlayerState();\n    }\n    /**\n     * Set playback rate of the video\n     * @param {Number} rate\n     */\n    setRate(rate) {\n        player.setPlaybackRate(rate);\n        return rate;\n    }\n    /**\n     * Mute the video\n     */\n    mute() {\n        player.mute();\n    }\n    /**\n     * Unmute the video\n     */\n    unMute() {\n        player.unMute();\n    }\n    /**\n     * Get the original player object\n     */\n    originalPlayer() {\n        return player;\n    }\n    /**\n     * Set quality of the video\n     * @param {String} quality\n     */\n    setQuality(quality) {\n        player.setPlaybackQuality(quality);\n        return quality;\n    }\n    /**\n     * Get the available qualities of the video\n     */\n    getQualities() {\n        return {\n            qualities: ['auto', 'medium', 'large', 'hd720', 'hd1080', 'hd2160'],\n            qualitiesLabel: ['Auto', '360p', '540p', '720p', '1080p', '4k'],\n            currentQuality: null,\n        };\n    }\n}\n\nexport default Yt;"],"names":["player","constructor","url","start","end","showControls","customStart","preload","YT","type","frequency","support","playbackrate","quality","videoId","exec","posterImage","ready","self","this","options","width","height","playerVars","origin","window","location","host","autoplay","hl","M","cfg","language","controls","showinfo","fs","cc_load_policy","cc_lang_pref","iv_load_policy","autohide","rel","playsinline","disablekb","events","onError","e","error","data","onReady","target","getOptions","Math","min","getDuration","mute","playVideo","interval","setInterval","getCurrentTime","clearInterval","seekTo","pauseVideo","unMute","onStateChange","PlayerState","ENDED","PLAYING","PAUSED","CUED","onPlaybackRateChange","rate","Player","tag","document","createElement","src","firstScriptTag","getElementsByTagName","parentNode","insertBefore","onYouTubeIframeAPIReady","play","pause","stop","starttime","time","isPaused","getPlayerState","isPlaying","isEnded","ratio","destroy","getState","setRate","setPlaybackRate","originalPlayer","setQuality","setPlaybackQuality","getQualities","qualities","qualitiesLabel","currentQuality"],"mappings":"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"}