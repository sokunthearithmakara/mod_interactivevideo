{"version":3,"file":"vimeo.min.js","sources":["../../src/player/vimeo.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Vimeo Player class\n *\n * @module     mod_interactivevideo/player/vimeo\n * @copyright  2024 Sokunthearith Makara <sokunthearithmakara@gmail.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\nimport {dispatchEvent} from 'core/event_dispatcher';\nlet player;\n\nclass Vimeo {\n    /**\n     * Constructs a Vimeo player instance.\n     *\n     * @param {string} url - The URL of the Vimeo video.\n     * @param {number} start - The start time of the video in seconds.\n     * @param {number} end - The end time of the video in seconds.\n     * @param {object} opts - The options for the player.\n     */\n    constructor(url, start, end, opts = {}) {\n        const showControls = opts.showControls || false;\n        const node = opts.node || 'player';\n        this.type = 'vimeo';\n        this.start = start;\n        this.frequency = 0.27;\n        this.support = {\n            playbackrate: true,\n            quality: true,\n        };\n        // Documented at https://developer.vimeo.com/player/sdk/reference or https://github.com/vimeo/player.js\n        let VimeoPlayer;\n        var regex = /(?:https?:\\/\\/)?(?:www\\.)?vimeo\\.com\\/(?:video\\/)?([^/]+)/g;\n        this.videoId = regex.exec(url)[1];\n        // Get poster image using oEmbed.\n        var posterUrl = 'https://vimeo.com/api/oembed.json?url=https%3A//vimeo.com/' + this.videoId;\n        fetch(posterUrl)\n            .then(response => response.json())\n            .then(data => {\n                var poster = data.thumbnail_url;\n                // Change the dimensions of the poster image to 16:9.\n                poster = poster.replace(/_\\d+x\\d+/, '_720x405');\n                this.posterImage = poster;\n                this.title = data.title;\n                this.aspectratio = data.width / data.height;\n                return poster;\n            }).catch(() => {\n                return;\n            });\n        let self = this;\n        const option = {\n            url: url,\n            width: 1080,\n            height: 720,\n            autoplay: !showControls,\n            controls: showControls,\n            loop: false,\n            muted: true,\n            playsinline: true,\n            background: false,\n            byline: false,\n            portrait: false,\n            title: false,\n            transparent: false,\n            responsive: false,\n            start_time: start,\n            end_time: end,\n            pip: false,\n            fullscreen: false,\n            watch_full_video: false,\n            keyboard: false,\n            dnt: true,\n        };\n\n        let ready = false;\n        const vimeoEvents = (player) => {\n            player.on('loaded', async function() {\n                let duration = await player.getDuration();\n                end = !end ? duration - 0.1 : Math.min(end, duration - 0.1);\n                end = Number(end.toFixed(2));\n                self.end = end;\n                self.duration = self.end - self.start;\n                self.totaltime = Number((duration - 0.1).toFixed(2));\n                // Get track list.\n                // Unset the captions.\n                player.disableTextTrack();\n                let tracks = await player.getTextTracks();\n                if (tracks && tracks.length > 0) {\n                    tracks = tracks.map((track) => {\n                        return {\n                            label: track.label,\n                            code: track.language\n                        };\n                    });\n                }\n\n                dispatchEvent('iv:playerLoaded', {\n                    tracks: tracks,\n                    qualities: self.getQualities(),\n                });\n\n                if (showControls) {\n                    ready = true;\n                    dispatchEvent('iv:playerReady');\n                }\n            });\n\n            if (!showControls) {\n                player.on('play', async function() {\n                    if (!ready) {\n                        // Pause the video if it is not ready.\n                        await player.pause();\n                        player.setCurrentTime(start);\n                        // Unmute the video.\n                        player.setVolume(1);\n                        ready = true;\n                        dispatchEvent('iv:playerReady');\n                    }\n                });\n            }\n\n            player.on('timeupdate', async function() {\n                if (!ready) {\n                    return;\n                }\n                let isEnded = await player.getEnded();\n                let currentTime = await player.getCurrentTime();\n                if (isEnded || (end && currentTime >= end)) {\n                    dispatchEvent('iv:playerEnded');\n                    player.pause();\n                } else if (await player.getPaused()) {\n                    dispatchEvent('iv:playerPaused');\n                } else {\n                    dispatchEvent('iv:playerPlaying');\n                }\n            });\n\n            player.on('seeked', function(e) {\n                if (!ready) {\n                    return;\n                }\n                dispatchEvent('iv:playerSeek', {time: e.seconds});\n            });\n\n            player.on('playbackratechange', function(e) {\n                if (!ready) {\n                    return;\n                }\n                dispatchEvent('iv:playerRateChange', {rate: e.playbackRate});\n            });\n\n            player.on('bufferstart', function() {\n                if (!ready) {\n                    return;\n                }\n                dispatchEvent('iv:playerPaused');\n            });\n\n            player.on('bufferend', function() {\n                if (!ready) {\n                    return;\n                }\n                dispatchEvent('iv:playerPlaying');\n            });\n\n            player.on('ended', function() {\n                if (!ready) {\n                    return;\n                }\n                dispatchEvent('iv:playerEnded');\n            });\n\n            player.on('qualitychange', function(e) {\n                if (!ready) {\n                    return;\n                }\n                dispatchEvent('iv:playerQualityChange', {quality: e.quality});\n            });\n        };\n\n        if (!VimeoPlayer) {\n            require(['https://player.vimeo.com/api/player.js'], function(Player) {\n                VimeoPlayer = Player;\n                player = new Player(node, option);\n                vimeoEvents(player);\n            });\n        } else {\n            player = new VimeoPlayer(node, option);\n            vimeoEvents(player);\n        }\n    }\n    /**\n     * Plays the video using the Vimeo player instance.\n     * If the player is not initialized, logs an error to the console.\n     */\n    play() {\n        player.play();\n    }\n    /**\n     * Pauses the Vimeo player.\n     *\n     * This method calls the `pause` function on the `player` object to pause the video playback.\n     */\n    async pause() {\n        await player.pause();\n    }\n    /**\n     * Stops the video playback and sets the current time to the specified start time.\n     *\n     * @param {number} starttime - The time in seconds to which the video should be set before pausing.\n     */\n    stop(starttime) {\n        player.setCurrentTime(starttime);\n        player.pause();\n    }\n    /**\n     * Seeks the video to a specified time.\n     *\n     * @param {number} time - The time in seconds to seek to.\n     * @returns {Promise<number>} A promise that resolves to the time sought to.\n     */\n    async seek(time) {\n        if (time < 0) {\n            time = 0;\n        }\n        await player.setCurrentTime(time);\n        return time;\n    }\n    /**\n     * Retrieves the current playback time of the video.\n     *\n     * @returns {Promise<number>} A promise that resolves to the current time in seconds.\n     */\n    async getCurrentTime() {\n        return player.getCurrentTime();\n    }\n    /**\n     * Asynchronously retrieves the duration of the video.\n     *\n     * @returns {Promise<number>} A promise that resolves to the duration of the video in seconds.\n     */\n    async getDuration() {\n        const duration = await player.getDuration();\n        return duration;\n    }\n    /**\n     * Checks if the Vimeo player is paused.\n     *\n     * @returns {Promise<boolean>} A promise that resolves to a boolean indicating whether the player is paused.\n     */\n    async isPaused() {\n        const paused = await player.getPaused();\n        return paused;\n    }\n    /**\n     * Checks if the Vimeo player is currently playing.\n     *\n     * @returns {Promise<boolean>} A promise that resolves to `true` if the player is playing, otherwise `false`.\n     */\n    async isPlaying() {\n        const paused = await player.getPaused();\n        return !paused;\n    }\n    /**\n     * Checks if the Vimeo player has ended.\n     *\n     * @async\n     * @function isEnded\n     * @returns {Promise<boolean>} A promise that resolves to a boolean indicating whether the player has ended.\n     */\n    async isEnded() {\n        const ended = await player.getEnded();\n        return ended;\n    }\n    /**\n     * Calculates the aspect ratio of the video.\n     * If the video's aspect ratio is greater than 16:9, it returns the actual aspect ratio.\n     * Otherwise, it returns the 16:9 aspect ratio.\n     *\n     * @returns {Promise<number>} The aspect ratio of the video.\n     */\n    async ratio() {\n        const width = await player.getVideoWidth();\n        const height = await player.getVideoHeight();\n        return width / height;\n    }\n    /**\n     * Destroys the Vimeo player instance if it is initialized.\n     * If the player is not initialized, logs an error message to the console.\n     */\n    destroy() {\n        if (player) {\n            player.destroy();\n        } else {\n            window.console.error('Player is not initialized.');\n        }\n    }\n    /**\n     * Asynchronously retrieves the current state of the video player.\n     *\n     * @returns {Promise<string>} A promise that resolves to a string indicating the player's state, either 'paused' or 'playing'.\n     */\n    async getState() {\n        const paused = await player.getPaused();\n        return paused ? 'paused' : 'playing';\n    }\n    /**\n     * Sets the playback rate for the Vimeo player.\n     *\n     * @param {number} rate - The desired playback rate.\n     *                        This should be a value supported by the Vimeo player.\n     */\n    setRate(rate) {\n        player.setPlaybackRate(rate);\n    }\n    /**\n     * Mutes the Vimeo player by setting the volume to 0.\n     */\n    mute() {\n        player.setVolume(0);\n    }\n    /**\n     * Unmutes the Vimeo player by setting the volume to 1.\n     */\n    unMute() {\n        player.setVolume(1);\n    }\n\n    /**\n     * Set quality of the video\n     * @param {String} quality\n     */\n    setQuality(quality) {\n        player.setQuality(quality);\n        return quality;\n    }\n    /**\n     * Get the available qualities of the video\n     */\n    async getQualities() {\n        let qualities = await player.getQualities();\n        let keys = qualities.map(x => x.id);\n        let values = qualities.map(x => x.label);\n        let current = qualities.find(x => x.active).id;\n        return {\n            qualities: keys,\n            qualitiesLabel: values,\n            currentQuality: current,\n        };\n    }\n\n    /**\n     * Set subtitle\n     *\n     * @param {string} track language code\n     */\n    setCaption(track) {\n        if (track != '') {\n            player.enableTextTrack(track);\n        } else {\n            player.disableTextTrack();\n        }\n    }\n\n    /**\n     * Returns the original Vimeo player instance.\n     *\n     * @returns {Object} The Vimeo player instance.\n     */\n    originalPlayer() {\n        return player;\n    }\n}\n\nexport default Vimeo;"],"names":["player","constructor","url","start","end","opts","showControls","node","VimeoPlayer","type","frequency","support","playbackrate","quality","videoId","exec","posterUrl","this","fetch","then","response","json","data","poster","thumbnail_url","replace","posterImage","title","aspectratio","width","height","catch","self","option","autoplay","controls","loop","muted","playsinline","background","byline","portrait","transparent","responsive","start_time","end_time","pip","fullscreen","watch_full_video","keyboard","dnt","ready","vimeoEvents","on","async","duration","getDuration","Math","min","Number","toFixed","totaltime","disableTextTrack","tracks","getTextTracks","length","map","track","label","code","language","qualities","getQualities","pause","setCurrentTime","setVolume","isEnded","getEnded","currentTime","getCurrentTime","getPaused","e","time","seconds","rate","playbackRate","require","Player","play","stop","starttime","getVideoWidth","getVideoHeight","destroy","window","console","error","setRate","setPlaybackRate","mute","unMute","setQuality","x","id","qualitiesLabel","currentQuality","find","active","setCaption","enableTextTrack","originalPlayer"],"mappings":"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"}