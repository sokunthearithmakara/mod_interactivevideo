{"version":3,"file":"vimeo.min.js","sources":["../../src/player/vimeo.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Vimeo Player class\n *\n * @module     mod_interactivevideo/player/vimeo\n * @copyright  2024 Sokunthearith Makara <sokunthearithmakara@gmail.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\nimport {dispatchEvent} from 'core/event_dispatcher';\nlet player;\n\nclass Vimeo {\n    /**\n     * Constructs a Vimeo player instance.\n     *\n     * @param {string} url - The URL of the Vimeo video.\n     * @param {number} start - The start time of the video in seconds.\n     * @param {number} end - The end time of the video in seconds.\n     * @param {boolean} showControls - Flag to show or hide video controls.\n     */\n    constructor(url, start, end, showControls) {\n        this.type = 'vimeo';\n        this.start = start;\n        this.frequency = 0.27;\n        this.support = {\n            playbackrate: true,\n            quality: false,\n        };\n        // Documented at https://developer.vimeo.com/player/sdk/reference\n        let VimeoPlayer;\n        var regex = /(?:https?:\\/\\/)?(?:www\\.)?vimeo\\.com\\/(?:video\\/)?([^/]+)/g;\n        this.videoId = regex.exec(url)[1];\n        // Get poster image using oEmbed.\n        var posterUrl = 'https://vimeo.com/api/oembed.json?url=https%3A//vimeo.com/' + this.videoId;\n        fetch(posterUrl)\n            .then(response => response.json())\n            .then(data => {\n                var poster = data.thumbnail_url;\n                // Change the dimensions of the poster image to 16:9.\n                poster = poster.replace(/_\\d+x\\d+/, '_720x405');\n                this.posterImage = poster;\n            });\n        let self = this;\n        const option = {\n            url: url,\n            width: 1080,\n            height: 720,\n            autoplay: false,\n            quality: showControls ? '540p' : 'auto', // Reduce quality in editor.\n            controls: showControls,\n            loop: false,\n            muted: false,\n            playsinline: true,\n            background: false,\n            byline: false,\n            portrait: false,\n            title: false,\n            transparent: false,\n            responsive: false,\n            start_time: start,\n            end_time: end,\n            pip: false,\n            fullscreen: false,\n            watch_full_video: false,\n            play_button_position: 'bottom',\n            keyboard: false,\n        };\n\n        const vimeoEvents = (player) => {\n            player.on('loaded', async function() {\n                let duration = await player.getDuration();\n                end = !end ? duration : Math.min(end, duration);\n                self.aspectratio = await self.ratio();\n                dispatchEvent('iv:playerReady');\n            });\n\n            player.on('timeupdate', async function() {\n                let isEnded = await player.getEnded();\n                let currentTime = await player.getCurrentTime();\n                if (isEnded || (end && currentTime >= end)) {\n                    dispatchEvent('iv:playerEnded');\n                    if (player) {\n                        player.pause();\n                    }\n                } else if (await player.getPaused()) {\n                    dispatchEvent('iv:playerPaused');\n                } else {\n                    dispatchEvent('iv:playerPlaying');\n                }\n            });\n\n            player.on('seeked', function(e) {\n                dispatchEvent('iv:playerSeek', {time: e.seconds});\n            });\n\n            player.on('playbackratechange', function(e) {\n                dispatchEvent('iv:playerRateChange', {rate: e.playbackRate});\n            });\n\n            player.on('bufferstart', function() {\n                dispatchEvent('iv:playerPaused');\n            });\n\n            player.on('bufferend', function() {\n                dispatchEvent('iv:playerPlaying');\n            });\n\n            player.on('ended', function() {\n                dispatchEvent('iv:playerEnded');\n            });\n        };\n        if (!VimeoPlayer) {\n            require(['https://player.vimeo.com/api/player.js'], function(Player) {\n                VimeoPlayer = Player;\n                player = new Player('player', option);\n                vimeoEvents(player);\n            });\n        } else {\n            player = new VimeoPlayer('player', option);\n            vimeoEvents(player);\n        }\n    }\n    /**\n     * Plays the video using the Vimeo player instance.\n     * If the player is not initialized, logs an error to the console.\n     */\n    play() {\n        if (player) {\n            player.play();\n        } else {\n            window.console.error('Player is not initialized.');\n        }\n    }\n    /**\n     * Pauses the Vimeo player.\n     *\n     * This method calls the `pause` function on the `player` object to pause the video playback.\n     */\n    pause() {\n        player.pause();\n    }\n    /**\n     * Stops the video playback and sets the current time to the specified start time.\n     *\n     * @param {number} starttime - The time in seconds to which the video should be set before pausing.\n     */\n    stop(starttime) {\n        player.setCurrentTime(starttime);\n        player.pause();\n    }\n    /**\n     * Seeks the video to a specified time.\n     *\n     * @param {number} time - The time in seconds to seek to.\n     * @returns {Promise<number>} A promise that resolves to the time sought to.\n     */\n    async seek(time) {\n        await player.setCurrentTime(time);\n        return time;\n    }\n    /**\n     * Retrieves the current playback time of the video.\n     *\n     * @returns {Promise<number>} A promise that resolves to the current time in seconds.\n     */\n    async getCurrentTime() {\n        return player.getCurrentTime();\n    }\n    /**\n     * Asynchronously retrieves the duration of the video.\n     *\n     * @returns {Promise<number>} A promise that resolves to the duration of the video in seconds.\n     */\n    async getDuration() {\n        const duration = await player.getDuration();\n        return duration;\n    }\n    /**\n     * Checks if the Vimeo player is paused.\n     *\n     * @returns {Promise<boolean>} A promise that resolves to a boolean indicating whether the player is paused.\n     */\n    async isPaused() {\n        const paused = await player.getPaused();\n        return paused;\n    }\n    /**\n     * Checks if the Vimeo player is currently playing.\n     *\n     * @returns {Promise<boolean>} A promise that resolves to `true` if the player is playing, otherwise `false`.\n     */\n    async isPlaying() {\n        const paused = await player.getPaused();\n        return !paused;\n    }\n    /**\n     * Checks if the Vimeo player has ended.\n     *\n     * @async\n     * @function isEnded\n     * @returns {Promise<boolean>} A promise that resolves to a boolean indicating whether the player has ended.\n     */\n    async isEnded() {\n        const ended = await player.getEnded();\n        return ended;\n    }\n    /**\n     * Calculates the aspect ratio of the video.\n     * If the video's aspect ratio is greater than 16:9, it returns the actual aspect ratio.\n     * Otherwise, it returns the 16:9 aspect ratio.\n     *\n     * @returns {Promise<number>} The aspect ratio of the video.\n     */\n    async ratio() {\n        const width = await player.getVideoWidth();\n        const height = await player.getVideoHeight();\n        return width / height;\n    }\n    /**\n     * Destroys the Vimeo player instance if it is initialized.\n     * If the player is not initialized, logs an error message to the console.\n     */\n    destroy() {\n        if (player) {\n            player.destroy();\n        } else {\n            window.console.error('Player is not initialized.');\n        }\n    }\n    /**\n     * Asynchronously retrieves the current state of the video player.\n     *\n     * @returns {Promise<string>} A promise that resolves to a string indicating the player's state, either 'paused' or 'playing'.\n     */\n    async getState() {\n        const paused = await player.getPaused();\n        return paused ? 'paused' : 'playing';\n    }\n    /**\n     * Sets the playback rate for the Vimeo player.\n     *\n     * @param {number} rate - The desired playback rate.\n     *                        This should be a value supported by the Vimeo player.\n     */\n    setRate(rate) {\n        player.setPlaybackRate(rate);\n    }\n    /**\n     * Mutes the Vimeo player by setting the volume to 0.\n     */\n    mute() {\n        player.setVolume(0);\n    }\n    /**\n     * Unmutes the Vimeo player by setting the volume to 1.\n     */\n    unMute() {\n        player.setVolume(1);\n    }\n    /**\n     * Returns the original Vimeo player instance.\n     *\n     * @returns {Object} The Vimeo player instance.\n     */\n    originalPlayer() {\n        return player;\n    }\n}\n\nexport default Vimeo;"],"names":["player","constructor","url","start","end","showControls","VimeoPlayer","type","frequency","support","playbackrate","quality","videoId","exec","posterUrl","this","fetch","then","response","json","data","poster","thumbnail_url","replace","posterImage","self","option","width","height","autoplay","controls","loop","muted","playsinline","background","byline","portrait","title","transparent","responsive","start_time","end_time","pip","fullscreen","watch_full_video","play_button_position","keyboard","vimeoEvents","on","async","duration","getDuration","Math","min","aspectratio","ratio","isEnded","getEnded","currentTime","getCurrentTime","pause","getPaused","e","time","seconds","rate","playbackRate","require","Player","play","window","console","error","stop","starttime","setCurrentTime","getVideoWidth","getVideoHeight","destroy","setRate","setPlaybackRate","mute","setVolume","unMute","originalPlayer"],"mappings":";;;;;;;;IAuBIA,0GAWAC,YAAYC,IAAKC,MAAOC,IAAKC,kBASrBC,iBARCC,KAAO,aACPJ,MAAQA,WACRK,UAAY,SACZC,QAAU,CACXC,cAAc,EACdC,SAAS,QAKRC,QADO,6DACSC,KAAKX,KAAK,OAE3BY,UAAY,6DAA+DC,KAAKH,QACpFI,MAAMF,WACDG,MAAKC,UAAYA,SAASC,SAC1BF,MAAKG,WACEC,OAASD,KAAKE,cAElBD,OAASA,OAAOE,QAAQ,WAAY,iBAC/BC,YAAcH,cAEvBI,KAAOV,WACLW,OAAS,CACXxB,IAAKA,IACLyB,MAAO,KACPC,OAAQ,IACRC,UAAU,EACVlB,QAASN,aAAe,OAAS,OACjCyB,SAAUzB,aACV0B,MAAM,EACNC,OAAO,EACPC,aAAa,EACbC,YAAY,EACZC,QAAQ,EACRC,UAAU,EACVC,OAAO,EACPC,aAAa,EACbC,YAAY,EACZC,WAAYrC,MACZsC,SAAUrC,IACVsC,KAAK,EACLC,YAAY,EACZC,kBAAkB,EAClBC,qBAAsB,SACtBC,UAAU,GAGRC,YAAe/C,SACjBA,OAAOgD,GAAG,UAAUC,qBACZC,eAAiBlD,OAAOmD,cAC5B/C,IAAOA,IAAiBgD,KAAKC,IAAIjD,IAAK8C,UAAzBA,SACbzB,KAAK6B,kBAAoB7B,KAAK8B,4CAChB,qBAGlBvD,OAAOgD,GAAG,cAAcC,qBAChBO,cAAgBxD,OAAOyD,WACvBC,kBAAoB1D,OAAO2D,iBAC3BH,SAAYpD,KAAOsD,aAAetD,yCACpB,kBACVJ,QACAA,OAAO4D,eAEE5D,OAAO6D,gDACN,uDAEA,uBAItB7D,OAAOgD,GAAG,UAAU,SAASc,uCACX,gBAAiB,CAACC,KAAMD,EAAEE,aAG5ChE,OAAOgD,GAAG,sBAAsB,SAASc,uCACvB,sBAAuB,CAACG,KAAMH,EAAEI,kBAGlDlE,OAAOgD,GAAG,eAAe,+CACP,sBAGlBhD,OAAOgD,GAAG,aAAa,+CACL,uBAGlBhD,OAAOgD,GAAG,SAAS,+CACD,sBAGjB1C,aAODN,OAAS,IAAIM,YAAY,SAAUoB,QACnCqB,YAAY/C,SAPZmE,QAAQ,CAAC,2CAA2C,SAASC,QACzD9D,YAAc8D,OACdpE,OAAS,IAAIoE,OAAO,SAAU1C,QAC9BqB,YAAY/C,WAWxBqE,OACQrE,OACAA,OAAOqE,OAEPC,OAAOC,QAAQC,MAAM,8BAQ7BZ,QACI5D,OAAO4D,QAOXa,KAAKC,WACD1E,OAAO2E,eAAeD,WACtB1E,OAAO4D,mBAQAG,mBACD/D,OAAO2E,eAAeZ,MACrBA,mCAQA/D,OAAO2D,kDAQS3D,OAAOmD,4CASTnD,OAAO6D,2CASP7D,OAAO6D,yCAWR7D,OAAOyD,sCAWPzD,OAAO4E,sBACN5E,OAAO6E,iBAOhCC,UACQ9E,OACAA,OAAO8E,UAEPR,OAAOC,QAAQC,MAAM,4DASJxE,OAAO6D,YACZ,SAAW,UAQ/BkB,QAAQd,MACJjE,OAAOgF,gBAAgBf,MAK3BgB,OACIjF,OAAOkF,UAAU,GAKrBC,SACInF,OAAOkF,UAAU,GAOrBE,wBACWpF"}