{"version":3,"file":"viewannotation.min.js","sources":["../src/viewannotation.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n\n/**\n * View page module\n *\n * @module     mod_interactivevideo/viewannotation\n * @copyright  2024 Sokunthearith Makara <sokunthearithmakara@gmail.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\ndefine([\n    'jquery', 'core/event_dispatcher', 'core/toast', 'mod_interactivevideo/libraries/jquery-ui'\n], function($, eventDispatcher, Toast) {\n    const {dispatchEvent} = eventDispatcher;\n    const ctRenderer = {};\n    let annotations, // Array of annotations.\n        totaltime, // Video total time.\n        activityType, // Current activityType.\n        viewedAnno = [], // Array of viewed annotations.\n        contentTypes, // Array of available content types.\n        displayoptions, // Display options.\n        releventAnnotations, // Array of annotations that are not skipped.\n        completionid, // Id of the completion record.\n        player; // Video player instance.\n\n    const $videoNav = $('#video-nav');\n    const $interactionNav = $('#interactions-nav');\n\n    const formatTime = (seconds) => {\n        const hours = Math.floor(seconds / 3600);\n        const minutes = Math.floor((seconds % 3600) / 60);\n        const remainingSeconds = seconds % 60;\n        let string = '';\n        if (hours > 0) {\n            string += hours + 'h ';\n        }\n        if (minutes > 0) {\n            string += minutes + 'm ';\n        }\n        if (remainingSeconds > 0) {\n            string += remainingSeconds + 's';\n        }\n        return string;\n    };\n\n    const renderAnnotationItems = async (annos, start, totaltime) => {\n        releventAnnotations = annos;\n        let actualduration = totaltime;\n\n        const skipsegments = annos.filter(x => x.type == 'skipsegment');\n\n        if (skipsegments.length > 0) {\n            skipsegments.forEach(x => {\n                const length = (Number(x.title) - Number(x.timestamp));\n                actualduration -= length;\n            });\n        }\n\n        const completableAnno = releventAnnotations.filter(x => x.hascompletion == 1);\n        const actualAnnotationCounts = completableAnno.length;\n\n        const xp = completableAnno.map(x => Number(x.xp)).reduce((a, b) => a + b, 0);\n\n        const completedAnnos = completableAnno\n            .filter(x => x.completed);\n\n        const xpEarned = completedAnnos.map(x => Number(x.earned)).reduce((a, b) => a + b, 0);\n\n        $(\".metadata\").empty();\n        $(\".metadata\").append(`<span class=\"d-inline-block mr-3\">\n            <i class=\"bi bi-stopwatch mr-2\"></i>${formatTime(Math.ceil(actualduration))}</span>\n            <span class=\"d-inline-block mr-3\">\n        <i class=\"bi bi-bullseye mr-2\"></i>${completedAnnos.length} / ${actualAnnotationCounts}</span>\n        <span class=\"d-inline-block\"><i class=\"bi bi-star mr-2\"></i>${xpEarned} / ${xp}</span>`);\n\n        $(\"#interactions-nav ul\").empty();\n\n        if (annos.length == 0) {\n            return;\n        }\n\n        if (displayoptions.preventseeking == 1) {\n            $videoNav.addClass('no-pointer-events');\n        }\n\n        if (displayoptions.hidemainvideocontrols == 1 || displayoptions.hideinteractions == 1) {\n            if (displayoptions.hidemainvideocontrols == 1) {\n                $('#wrapper').addClass('no-videonav');\n            }\n            return;\n        }\n        for (const x of annos) {\n            const renderer = ctRenderer[x.type];\n            await renderer.renderItemOnVideoNavigation(x);\n        }\n        dispatchEvent('annotationitemsrendered', {'annotations': annos});\n        $('.annolistinchapter').empty();\n        const chapteritems = releventAnnotations.filter(x => x.type != 'skipsegment' && x.hascompletion == 1);\n        chapteritems.sort((a, b) => a.timestamp - b.timestamp);\n        chapteritems.forEach((x) => {\n            $('[data-region=\"chapterlists\"] li').each(function() {\n                const cstart = $(this).data('start');\n                const cend = $(this).data('end');\n                if (x.timestamp >= cstart && x.timestamp < cend) {\n                    $(this).find('.annolistinchapter')\n                        .append(`<li class=\"border-bottom anno d-flex align-items-center justify-content-between\n                         px-3 py-2 ${x.completed ? \"completed\" : \"\"}\" data-id=\"${x.id}\" data-timestamp=\"${x.timestamp}\">\n                         <span class=\"text-nowrap\">\n                         <i class=\"small bi ${x.completed ? \"bi-check-circle-fill text-success\" : 'bi-circle'} mr-2\"></i>\n                         <i class=\"${JSON.parse(x.prop).icon} mr-2\"></i></span>\n                         <span class=\"flex-grow-1 text-truncate\">${x.formattedtitle}</span>\n                         <span class=\"text-nowrap\">${x.xp}<i class=\"bi bi-star ml-1\"></i></span></li>`);\n                }\n            });\n        });\n        dispatchEvent('chapterrendered', {'annotations': releventAnnotations});\n    };\n\n    return {\n        /**\n         * Render annotation items on the video navigation and chapter list.\n         */\n        renderAnnotationItems: renderAnnotationItems,\n        /**\n         * Initialize the view annotation on page loads.\n         * @param {string} url - The video url.\n         * @param {number} cmid - The course module id.\n         * @param {number} interaction - Interactive video instance.\n         * @param {number} course - The course id.\n         * @param {number} userid - The user id.\n         * @param {number} start - The start time of the video.\n         * @param {number} end - The end time of the video.\n         * @param {number} completionpercentage - The completion percentage.\n         * @param {number} gradeiteminstance - The grade item instance.\n         * @param {number} grademax - The grade max.\n         * @param {string} vtype - The video type.\n         * @param {boolean} preventskip - Prevent user from skipping the video.\n         * @param {number} moment - The moment to share.\n         * @param {object} doptions - The display options.\n         * @param {string} token - The token.\n         * @return {void}\n         */\n        init: function(\n            url, cmid, interaction, course, userid, start = 0, end,\n            completionpercentage, gradeiteminstance, grademax, vtype,\n            preventskip = true, moment = null, doptions = {}, token = null) {\n            // Convert start to number if string\n            start = Number(start);\n            if (isNaN(start)) {\n                start = 0;\n            }\n\n            // Convert end to number if string\n            end = Number(end);\n            if (isNaN(end)) {\n                end = null;\n            }\n\n            displayoptions = doptions;\n\n            let playerReady = false;\n\n            if (localStorage.getItem('limitedwidth') == 'true' && displayoptions.hidemainvideocontrols == 0) {\n                $('body').addClass('limited-width');\n                $('#controller #expand i').removeClass('bi-file').addClass('bi-square');\n            }\n\n            /**\n             * Function to convert seconds to HH:MM:SS format.\n             * @param {number} seconds\n             * @returns {string}\n             */\n            const convertSecondsToHMS = (seconds) => {\n                const h = Math.floor(seconds / 3600);\n                const m = Math.floor(seconds % 3600 / 60);\n                const s = Math.floor(seconds % 3600 % 60);\n                return (h > 0 ? h + ':' : '') + (m < 10 ? '0' : '') + m + ':' + (s < 10 ? '0' : '') + s;\n            };\n\n            /**\n             * Function to replace the progress bars on the video navigation.\n             * @param {number} percentage\n             * @returns {void}\n             */\n            const replaceProgressBars = (percentage) => {\n                percentage = percentage > 100 ? 100 : percentage;\n                $videoNav.find('#progress').css('width', percentage + '%');\n                $videoNav.find('#seekhead').css('left', percentage + '%');\n            };\n\n            /**\n             * Function to get all annotations from the database and render them.\n             * @param {function} callback\n             * @returns {Promise}\n             */\n            const getAnnotations = (callback) => {\n                // Get all interaction items.\n                const annnoitems = $.ajax({\n                    url: M.cfg.wwwroot + '/mod/interactivevideo/ajax.php',\n                    method: \"POST\",\n                    dataType: \"text\",\n                    data: {\n                        action: 'get_items',\n                        sesskey: M.cfg.sesskey,\n                        id: interaction,\n                        contextid: M.cfg.courseContextId,\n                        token: token,\n                        cmid: cmid\n                    }\n                });\n\n                // Get current user progress.\n                const userprogress = $.ajax({\n                    url: M.cfg.wwwroot + '/mod/interactivevideo/ajax.php',\n                    method: \"POST\",\n                    dataType: \"text\",\n                    data: {\n                        action: 'get_progress',\n                        sesskey: M.cfg.sesskey,\n                        id: interaction,\n                        uid: userid,\n                        token: token,\n                        cmid: cmid,\n                        contextid: M.cfg.contextid,\n                        previewmode: $('body').hasClass('preview-mode') ? 1 : 0\n                    }\n                });\n\n                // Get all content types.\n                const getContentTypes = $.ajax({\n                    url: M.cfg.wwwroot + '/mod/interactivevideo/ajax.php',\n                    method: \"POST\",\n                    dataType: \"text\",\n                    data: {\n                        action: 'getallcontenttypes',\n                        sesskey: M.cfg.sesskey,\n                        token: token,\n                        cmid: cmid,\n                        contextid: M.cfg.contextid\n                    }\n                });\n\n                $.when(annnoitems, userprogress, getContentTypes).done(async function(annos, progress, ct) {\n                    annotations = JSON.parse(annos[0]);\n                    progress = JSON.parse(progress[0]);\n                    contentTypes = JSON.parse(ct[0]);\n                    completionid = progress.id;\n                    let completiondetails = JSON.parse(progress.completiondetails || '[]');\n                    annotations = filterAnnotations(annotations, contentTypes, start, end);\n                    annotations = processAnnotations(annotations, contentTypes, progress, start, end, completiondetails);\n                    annotations.sort((a, b) => a.timestamp - b.timestamp);\n\n                    releventAnnotations = getRelevantAnnotations(annotations, start, end, contentTypes);\n\n                    if (releventAnnotations.length > 0 && !releventAnnotations.find(x => x.type == 'chapter')) {\n                        prependDummyChapter(releventAnnotations, start, contentTypes);\n                    }\n\n                    await initializeContentTypeRenderers(\n                        contentTypes, releventAnnotations, player, interaction, course, userid,\n                        completionpercentage, gradeiteminstance, grademax, vtype, preventskip,\n                        totaltime, start, end, cmid, token, completionid);\n\n                    await renderAnnotationItems(releventAnnotations, start, totaltime);\n                    $(\"#play\").removeClass('d-none');\n                    $(\"#spinner\").remove();\n                    $(\"#video-info\").toggleClass('d-none d-flex');\n                    playerReady = true;\n                    callback();\n                    return new Promise((resolve) => {\n                        resolve();\n                    });\n                });\n\n                /**\n                 * Filters annotations based on content types and a time range.\n                 *\n                 * @param {Array} annotations - The list of annotations to filter.\n                 * @param {Array} contentTypes - The list of content types to include.\n                 * @param {number} start - The start time of the range.\n                 * @param {number} end - The end time of the range.\n                 * @returns {Array} - The filtered list of annotations.\n                 */\n                function filterAnnotations(annotations, contentTypes, start, end) {\n                    return annotations.filter(annotation => {\n                        const inContentType = contentTypes.some(y => y.name === annotation.type);\n                        if (!inContentType) {\n                            return false;\n                        }\n\n                        if (annotation.type === 'skipsegment') {\n                            return !(annotation.timestamp > end || annotation.title < start);\n                        }\n\n                        return (annotation.timestamp >= start && annotation.timestamp <= end) || annotation.timestamp < 0;\n                    });\n                }\n\n                /**\n                 * Maps and processes annotations based on provided content types, progress, and time range.\n                 *\n                 * @param {Array} annotations - The list of annotations to be processed.\n                 * @param {Array} contentTypes - The list of content types to match with annotations.\n                 * @param {Object} progress - The progress object containing completed items.\n                 * @param {number} start - The start time of the segment.\n                 * @param {number} end - The end time of the segment.\n                 * @param {Object} completiondetails - The completion details object.\n                 * @returns {Array} - The processed list of annotations.\n                 */\n                function processAnnotations(annotations, contentTypes, progress, start, end, completiondetails) {\n                    const completedItems = progress.completeditems == '' ? [] : JSON.parse(progress.completeditems);\n                    const contentTypeMap = new Map(contentTypes.map(ct => [ct.name, ct]));\n                    return annotations.map(annotation => {\n                        annotation.timestamp = Number(annotation.timestamp);\n                        annotation.xp = Number(annotation.xp);\n                        const completionitem = completiondetails.find(x => JSON.parse(x).id == annotation.id);\n                        if (completionitem) {\n                            annotation.earned = Number(JSON.parse(completionitem).xp);\n                        } else {\n                            annotation.earned = 0;\n                        }\n                        if (annotation.type == 'skipsegment') {\n                            annotation.title = Number(annotation.title);\n                            if (annotation.timestamp < start && annotation.title > start) {\n                                annotation.timestamp = start;\n                            }\n                            if (annotation.title > end && annotation.timestamp < end) {\n                                annotation.title = end;\n                            }\n                        }\n                        annotation.prop = JSON.stringify(contentTypeMap.get(annotation.type));\n                        annotation.completed = completedItems.indexOf(annotation.id) > -1;\n\n                        let advanced;\n                        try {\n                            advanced = JSON.parse(annotation.advanced);\n                        } catch (e) {\n                            advanced = null;\n                        }\n                        annotation.rerunnable = advanced && advanced.replaybehavior === '1';\n\n                        return annotation;\n                    });\n                }\n\n                /**\n                 * Filters and returns relevant annotations within a specified time range,\n                 * excluding those that fall within skip segments.\n                 *\n                 * @param {Array} annotations - The list of annotations to filter.\n                 * @returns {Array} - The filtered list of relevant annotations.\n                 */\n                function getRelevantAnnotations(annotations) {\n                    const skipsegments = annotations.filter(annotation => annotation.type == 'skipsegment');\n                    let releventAnnotations = [];\n                    annotations.forEach(annotation => {\n                        let shouldAdd = true;\n                        skipsegments.forEach(skipsegment => {\n                            if (Number(annotation.timestamp) > Number(skipsegment.timestamp)\n                                && Number(annotation.timestamp) < Number(skipsegment.title)) {\n                                shouldAdd = false;\n                            }\n                        });\n                        if (shouldAdd) {\n                            releventAnnotations.push(annotation);\n                        }\n                    });\n                    return releventAnnotations;\n                }\n\n                /**\n                 * Adds a dummy chapter annotation to the beginning of the relevant annotations array.\n                 *\n                 * @param {Array} releventAnnotations - The array of relevant annotations to which the dummy chapter will be added.\n                 * @param {number} start - The timestamp at which the dummy chapter starts.\n                 * @param {Array} contentTypes - The array of content types to find the chapter type from.\n                 */\n                function prependDummyChapter(releventAnnotations, start, contentTypes) {\n                    releventAnnotations.unshift({\n                        id: 0,\n                        title: M.util.get_string('startchapter', 'mod_interactivevideo'),\n                        formattedtitle: M.util.get_string('startchapter', 'mod_interactivevideo'),\n                        timestamp: start,\n                        type: 'chapter',\n                        prop: JSON.stringify(contentTypes.find(x => x.name == 'chapter')),\n                        xp: 0,\n                        completed: true,\n                        hide: true\n                    });\n                }\n\n\n                /**\n                 * Asynchronously loads and initializes content type renderers for interactive video annotations.\n                 *\n                 * @param {Array} contentTypes - Array of content type objects.\n                 * @param {Array} releventAnnotations - Array of relevant annotation objects.\n                 * @param {Object} player - The video player instance.\n                 * @param {Object} interaction - The interaction object.\n                 * @param {Object} course - The course object.\n                 * @param {number} userid - The user ID.\n                 * @param {number} completionpercentage - The completion percentage.\n                 * @param {number} gradeiteminstance - The grade item instance.\n                 * @param {number} grademax - The maximum grade.\n                 * @param {string} vtype - The video type.\n                 * @param {boolean} preventskip - Flag to prevent skipping.\n                 * @param {number} totaltime - The total time of the video.\n                 * @param {number} start - The start time of the video.\n                 * @param {number} end - The end time of the video.\n                 * @param {number} cmid - The course module ID.\n                 * @param {string} token - The authentication token.\n                 * @param {number} completionid - Completion record id.\n                 * @returns {Promise<Object>} A promise that resolves to an object containing the initialized contenttype renderers.\n                 */\n                async function initializeContentTypeRenderers(contentTypes, releventAnnotations,\n                    player, interaction, course, userid, completionpercentage, gradeiteminstance,\n                    grademax, vtype, preventskip, totaltime, start, end, cmid, token, completionid) {\n                    const chapterContentType = contentTypes.find(x => x.name == 'chapter');\n                    contentTypes = contentTypes.filter(x => releventAnnotations.map(y => y.type).includes(x.name));\n                    if (contentTypes.length == 0) {\n                        $('#chaptertoggle, #chapter-container-left, #chapter-container-right').remove();\n                        return;\n                    } else {\n                        $('#chaptertoggle, #chapter-container-left, #chapter-container-right').removeClass('d-none');\n                    }\n                    if (!contentTypes.find(x => x.name == 'chapter')) {\n                        contentTypes.push(chapterContentType);\n                    }\n                    return Promise.all(contentTypes.map(contentType => {\n                        return new Promise((resolve) => {\n                            require([contentType.amdmodule], function(Type) {\n                                ctRenderer[contentType.name] = new Type(player, releventAnnotations, interaction, course, userid,\n                                    completionpercentage, gradeiteminstance, grademax, vtype, preventskip, totaltime, start,\n                                    end, contentType, cmid, token, displayoptions, completionid);\n                                try {\n                                    ctRenderer[contentType.name].init();\n                                } catch (error) {\n                                    // Do nothing.\n                                }\n                                resolve(ctRenderer[contentType.name]);\n                            });\n                        });\n                    })).then(() => ctRenderer);\n                }\n            };\n\n            /**\n             * Run the interaction.\n             * @param {object} annotation annotation object\n             * @returns {void}\n             */\n            const runInteraction = async (annotation) => {\n                $('#video-wrapper').data('timestamp', new Date().getTime());\n                viewedAnno.push(Number(annotation.id));\n                viewedAnno = [...new Set(viewedAnno)];\n                // Remove the previous message but keep the one below the video.\n                $('#annotation-modal').modal('hide');\n                $('#message').not('[data-placement=bottom]').not('.sticky').not(`[data-id=${annotation.id}]`).remove();\n                $('#end-screen, #start-screen').fadeOut(300);\n\n                if (preventskip) {\n                    const theAnnotations = releventAnnotations\n                        .filter(x => Number(x.timestamp) < Number(annotation.timestamp)\n                            && x.completed == false && x.hascompletion == 1);\n                    if (theAnnotations.length > 0) {\n                        const theAnnotation = theAnnotations[0];\n                        player.pause();\n                        await player.seek((theAnnotation.timestamp - 0.7 > start) ? (theAnnotation.timestamp - 0.7) : start);\n                        Toast.add(M.util.get_string('youmustcompletethepreviousactivity', 'mod_interactivevideo'), {\n                            type: 'danger'\n                        });\n                        return;\n                    }\n                }\n                activityType = ctRenderer[annotation.type];\n                activityType.runInteraction(annotation);\n            };\n\n            /**\n             * Shares a specific moment in the video by seeking to the given timestamp and playing the video.\n             * If the timestamp is within the valid range, it hides the start screen, seeks to the timestamp,\n             * plays the video, runs the relevant annotation interaction, and updates the progress bars.\n             * Finally, it removes the timestamp parameter from the URL.\n             *\n             * @async\n             * @function shareMoment\n             * @returns {Promise<void>} A promise that resolves when the video has been successfully sought and played.\n             */\n            const shareMoment = async () => {\n                if (!moment) {\n                    return;\n                }\n                // Check if the url has a timestamp using url params.\n                const urlParams = new URLSearchParams(window.location.search);\n                const time = Number(moment);\n                if (time && !isNaN(time) && time >= start && time <= end) {\n                    // Hide the start screen.\n                    $('#video-wrapper #start-screen').hide(0);\n                    replaceProgressBars(((time - start) / totaltime) * 100);\n                    await player.seek(time);\n                    player.play();\n                    const theAnnotation = releventAnnotations.find(x => x.timestamp == time);\n                    if (theAnnotation) {\n                        runInteraction(theAnnotation);\n                    }\n                }\n                urlParams.delete('t');\n                const newurl = window.location.protocol\n                    + '//' + window.location.host + window.location.pathname + '?' + urlParams.toString();\n                window.history.replaceState(null, null, newurl);\n            };\n\n            /**\n             * Initializes the video player and its controls when the player is ready.\n             *\n             * This function performs the following tasks:\n             * - Checks if the player supports playback rate and quality adjustments, and updates the UI accordingly.\n             * - Sets the background image of the start screen if a poster image is available.\n             * - Adjusts the background of the video block to be transparent.\n             * - Retrieves the video duration and updates the end time if necessary.\n             * - Calculates the total playback time and updates the duration display.\n             * - Recalculates the aspect ratio of the video and updates the video wrapper's padding.\n             * - Sets the player as ready and focuses on the start button.\n             * - Initializes the seek head draggable functionality, allowing users to seek through the video.\n             *\n             * @async\n             * @function onReady\n             * @returns {Promise<void>} A promise that resolves when the player is fully initialized and ready.\n             */\n            const onReady = async () => {\n                if (player.support.playbackrate == false) {\n                    $('#changerate').remove();\n                } else {\n                    $('#changerate').removeClass('d-none');\n                }\n\n                if (player.support.quality == false) {\n                    $('#changequality').remove();\n                } else {\n                    $('#changequality').removeClass('d-none');\n                }\n\n                $(\".video-block\").css('background', 'transparent');\n                const duration = await player.getDuration();\n                end = !end ? duration : Math.min(end, duration);\n                start = start > end ? 0 : start;\n                totaltime = end - start;\n                await getAnnotations(shareMoment);\n                $('#duration').text(convertSecondsToHMS(totaltime));\n\n                // Recalculate the ratio of the video\n                let ratio = 16 / 9;\n                if (!displayoptions.usefixedratio || displayoptions.usefixedratio == 0) {\n                    ratio = player.aspectratio;\n                }\n                $(\"#video-wrapper\").css('padding-bottom', (1 / ratio) * 100 + '%');\n                let gap = '125px';\n                if ($(\"body\").hasClass('embed-mode')) {\n                    if (displayoptions.hidemainvideocontrols == 1) {\n                        $(\"#wrapper\").css({\n                            'width': 'calc(100dvh * ' + ratio + ')'\n                        });\n                    } else {\n                        $(\"#wrapper\").css({\n                            'width': 'calc((100dvh - 55px) * ' + ratio + ')'\n                        });\n                    }\n                } else {\n                    if (displayoptions.hidemainvideocontrols == 1) {\n                        gap = '55px';\n                    }\n                    $(\"#wrapper\").css({\n                        'width': 'calc((100dvh - ' + gap + ' - 3rem) * ' + ratio + ')'\n                    });\n                }\n                $('#start-screen #start').focus();\n\n                $('#seekhead').draggable({\n                    'containment': '#video-nav',\n                    'axis': 'x',\n                    'cursor': 'col-resize',\n                    'start': function(event, ui) {\n                        $(this).addClass('active');\n                        $('#taskinfo').addClass('no-pointer-events');\n                        $(\"#message, #end-screen\").remove();\n                        $(\"#seek\").append('<div id=\"position\"><div id=\"timelabel\"></div></div>');\n                        let $position = $('#position');\n                        const relX = ui.position.left;\n                        $position.css('left', (relX) + 'px');\n                        const percentage = relX / $(this).width();\n                        const time = percentage * totaltime;\n                        const formattedTime = convertSecondsToHMS(time);\n                        $position.find('#timelabel').text(formattedTime);\n                    },\n                    'drag': async function(event, ui) {\n                        let timestamp = ((ui.position.left) / $('#video-nav').width()) * totaltime + start;\n                        let percentage = ui.position.left / $('#video-nav').width();\n                        replaceProgressBars(percentage * 100);\n                        $('#seek #position').css('left', ui.position.left + 'px');\n                        $('#seek #position #timelabel').text(convertSecondsToHMS(timestamp - start));\n                        await player.seek(timestamp);\n                        player.pause();\n                    },\n                    'stop': async function() {\n                        setTimeout(function() {\n                            $('#taskinfo').removeClass('no-pointer-events');\n                        }, 200);\n                        setTimeout(function() {\n                            $('#seekhead').removeClass('active');\n                            $('#seek #position').remove();\n                        }, 1000);\n                        player.play();\n                    }\n                });\n            };\n\n\n            /**\n             * Handles the event when the video player is paused.\n             *\n             * This function performs the following actions:\n             * - Checks if the player is ready. If not, it exits early.\n             * - Clears the interval timer.\n             * - Updates the play/pause button icon to indicate 'play'.\n             * - Sets the tooltip of the play/pause button to 'play'.\n             */\n            const onPaused = () => {\n                if (!playerReady) {\n                    return;\n                }\n                clearInterval(interval);\n                $('#playpause').find('i').removeClass('bi-pause-fill').addClass('bi-play-fill');\n                $('#playpause').attr('data-original-title', M.util.get_string('play', 'mod_interactivevideo'));\n            };\n\n\n            /**\n             * Handles the end of the video playback.\n             *\n             * @param {number} t - The current time of the video playback. If not provided, defaults to the end time.\n             *\n             * @returns {void}\n             *\n             * This function performs the following actions:\n             * - Checks if the player is ready.\n             * - Finds the relevant annotation at the end of the video.\n             * - If the annotation exists and is not the last one, pauses the player and runs the interaction.\n             * - Toggles the tooltip to show the annotation title and hides it after 2 seconds.\n             * - Updates the UI to show the end screen and restart button.\n             * - Clears the interval and pauses the player.\n             * - Updates the play/pause button to show the play icon.\n             */\n            const onEnded = (t) => {\n                if (!playerReady) {\n                    return;\n                }\n                const time = t || end;\n                // Check if theAnnotation exists at the end of the video.\n                const theAnnotation = releventAnnotations.find(x => x.timestamp == time && x.id != 0 &&\n                    !viewedAnno.includes(Number(x.id)));\n                if (theAnnotation) {\n                    if (!theAnnotation.completed || theAnnotation.rerunnable) {\n                        player.pause();\n                        runInteraction(theAnnotation);\n                    }\n                    // Toggle the tooltip to show the title.\n                    $interactionNav.find('.annotation[data-id=\"' + theAnnotation.id + '\"] .item').trigger('mouseover')\n                        .addClass('active');\n                    // Hide the tooltip after 2 seconds.\n                    setTimeout(function() {\n                        $interactionNav.find('.annotation[data-id=\"' + theAnnotation.id + '\"] .item').trigger('mouseout')\n                            .removeClass('active');\n                    }, 2000);\n                }\n                $('#currenttime').text(convertSecondsToHMS(totaltime));\n                $('#restart').removeClass('d-none').fadeIn(300);\n                $('#end-screen').removeClass('d-none').fadeIn(300);\n                $('#progress').css('width', '100%');\n                $('#seekhead').css('left', '100%');\n                clearInterval(interval);\n                player.pause();\n                $('#playpause').find('i').removeClass('bi-pause-fill').addClass('bi-play-fill');\n                $('#playpause').attr('data-original-title', M.util.get_string('play', 'mod_interactivevideo'));\n            };\n\n            /**\n             * Handles the seek event for the video player.\n             *\n             * @param {number} t - The time to seek to. If not provided, the current time of the player will be used.\n             * @returns {Promise<void>} - A promise that resolves when the seek operation is complete.\n             */\n            const onSeek = async (t) => {\n                if (!playerReady) {\n                    return;\n                }\n                if (t) {\n                    t = Number(t);\n                } else {\n                    t = await player.getCurrentTime();\n                }\n                if (t > start && t < end) {\n                    $('#end-screen, #start-screen').addClass('d-none');\n                }\n                const percentage = (t - start) / (totaltime) * 100;\n                $('#currenttime').text(convertSecondsToHMS(t - start));\n                replaceProgressBars(percentage);\n                dispatchEvent('timeupdate', {'time': t});\n            };\n\n            let interval;\n            let visualized = false;\n            /**\n             * Handles the 'playing' event of the video player.\n             * This function is triggered when the video is playing and performs various actions such as:\n             * - Resetting the annotation content.\n             * - Handling fullscreen mode for mobile themes.\n             * - Hiding modals and messages.\n             * - Updating the play/pause button state.\n             * - Managing the video progress and annotations.\n             *\n             * @async\n             * @function onPlaying\n             * @returns {Promise<void>} A promise that resolves when the function completes.\n             */\n            const onPlaying = () => {\n                // Reset the annotation content.\n                if (!playerReady) {\n                    return;\n                }\n                if (player.audio && !visualized) {\n                    player.visualizer();\n                    visualized = true;\n                }\n                if ($('body').hasClass('mobiletheme') && !$('#wrapper').hasClass('fullscreen')) {\n                    $(\"#fullscreen\").trigger('click');\n                }\n                $('#annotation-modal').modal('hide');\n                $('#message').not('[data-placement=bottom]').not('.sticky').remove();\n                $('#end-screen, #start-screen').fadeOut(300);\n                $('#restart').addClass('d-none');\n                $('#playpause').find('i').removeClass('bi-play-fill').addClass('bi-pause-fill');\n                $('#playpause').attr('data-original-title', M.util.get_string('pause', 'mod_interactivevideo'));\n                const intervalFunction = async function() {\n                    const t = await player.getCurrentTime();\n                    // Remove the viewedAnno after the current time.\n                    viewedAnno = viewedAnno.filter(x => {\n                        const anno = releventAnnotations.find(y => y.id == x);\n                        return anno.timestamp <= t;\n                    });\n                    const isPlaying = await player.isPlaying();\n                    const isEnded = await player.isEnded();\n                    if (!isPlaying || isEnded) {\n                        clearInterval(interval);\n                        return;\n                    }\n\n                    if (t > end || isEnded) {\n                        clearInterval(interval);\n                        onEnded(end);\n                        return;\n                    }\n\n                    // Make sure wistia is not muted.\n                    if ($('#mute i').hasClass('bi-volume-up') && player.type == 'wistia') {\n                        player.unMute();\n                    }\n\n                    dispatchEvent('timeupdate', {'time': t});\n\n                    const time = Number(t.toFixed(2));\n                    // If it is the same annotation we just run, then we don't need to run it again.\n                    let percentagePlayed = (t - start) / totaltime;\n                    $('#currenttime').text(convertSecondsToHMS(t - start));\n                    percentagePlayed = percentagePlayed > 1 ? 1 : percentagePlayed;\n                    $('#video-nav #progress').css('width', percentagePlayed * 100 + '%');\n                    $('#video-nav #seekhead').css('left', percentagePlayed * 100 + '%');\n                    const theAnnotation = releventAnnotations.find(x => (((t - 0.5).toFixed(2) <= x.timestamp\n                        && (t + player.frequency).toFixed(2) >= x.timestamp) || time == x.timestamp) &&\n                        x.id != 0 && !viewedAnno.includes(Number(x.id)));\n                    if (theAnnotation) {\n                        $('#interactions-nav .annotation[data-id=\"' + theAnnotation.id + '\"] .item').trigger('mouseover')\n                            .addClass('active');\n                        setTimeout(function() {\n                            $('#interactions-nav .annotation[data-id=\"' + theAnnotation.id + '\"] .item')\n                                .trigger('mouseout').removeClass('active');\n                        }, 2000);\n                        if (!theAnnotation.completed || theAnnotation.rerunnable) {\n                            player.pause();\n                            await player.seek(theAnnotation.timestamp);\n                            player.pause();\n                            $('#video-nav #progress')\n                                .css('width', (theAnnotation.timestamp - start) / totaltime * 100 + '%');\n                            $('#video-nav #seekhead').css('left', (theAnnotation.timestamp - start) / totaltime * 100 + '%');\n                            if (player.type == 'yt') {\n                                const isPlayingInterval = setInterval(async function() {\n                                    if (player.isPaused()) {\n                                        clearInterval(isPlayingInterval);\n                                        runInteraction(theAnnotation);\n                                    }\n                                }, 10);\n                            } else {\n                                runInteraction(theAnnotation);\n                            }\n                        }\n                    }\n                };\n\n                if (player.type == 'yt' || player.type == 'wistia') {\n                    interval = setInterval(intervalFunction, player.frequency * 100);\n                } else {\n                    intervalFunction();\n                }\n            };\n\n            // Implement the player\n            require(['mod_interactivevideo/player/' + vtype], function(VideoPlayer) {\n                player = new VideoPlayer(\n                    url,\n                    start,\n                    end,\n                    displayoptions.useoriginalvideocontrols == 1,\n                    true,\n                    false\n                );\n            });\n\n            // Move toast-wrapper to the #wrapper element so it can be displayed on top of the video in fullscreen mode.\n            let $toast = $('.toast-wrapper').detach();\n            $('#wrapper').append($toast);\n\n            $(document).on('timeupdate', async function(e) {\n                const t = e.originalEvent.detail.time;\n                if (preventskip) {\n                    const theAnnotations = releventAnnotations.filter(x => Number(x.timestamp) <= (t + player.frequency)\n                        && x.completed == false && x.hascompletion == 1);\n                    if (theAnnotations.length > 0) {\n                        const theAnnotation = theAnnotations[0];\n                        player.pause();\n                        await player.seek((theAnnotation.timestamp - 0.7 > start) ? (theAnnotation.timestamp - 0.7) : start);\n                        clearInterval(interval);\n                        Toast.add(M.util.get_string('youmustcompletethepreviousactivity', 'mod_interactivevideo'), {\n                            type: 'danger'\n                        });\n                        $videoNav.find('#progress').css('width', ((theAnnotation.timestamp - start) / totaltime) * 100 + '%');\n                        $videoNav.find('#seekhead').css('left', ((theAnnotation.timestamp - start) / totaltime) * 100 + '%');\n                    }\n                }\n            });\n\n            // Handle the refresh button:: allowing user to refresh the content\n            $(document).on('click', '#refresh', function(e) {\n                e.preventDefault();\n                e.stopImmediatePropagation();\n                const id = $(this).data('id');\n                const annotation = releventAnnotations.find(x => x.id == id);\n                $(this).closest('#message').remove();\n                runInteraction(annotation, true);\n            });\n\n            // Handle video control events:: fullscreen toggle\n            $(document).on('click', '#fullscreen', function(e) {\n                e.preventDefault();\n                if (!playerReady) {\n                    return;\n                }\n\n                // Put the wrapper in fullscreen mode\n                let elem = document.getElementById('wrapper');\n                $('#fullscreen').toggleClass('active');\n                if (!$('#wrapper').hasClass('fullscreen')) {\n                    if (elem.requestFullscreen) {\n                        elem.requestFullscreen();\n                    } else if (elem.mozRequestFullScreen) { /* Firefox */\n                        elem.mozRequestFullScreen();\n                    } else if (elem.webkitRequestFullscreen) { /* Chrome, Safari and Opera */\n                        elem.webkitRequestFullscreen();\n                    } else if (elem.msRequestFullscreen) { /* IE/Edge */\n                        elem.msRequestFullscreen();\n                    }\n                } else {\n                    if (document.exitFullscreen) {\n                        document.exitFullscreen();\n                    } else if (document.mozCancelFullScreen) { /* Firefox */\n                        document.mozCancelFullScreen();\n                    } else if (document.webkitExitFullscreen) { /* Chrome, Safari and Opera */\n                        document.webkitExitFullscreen();\n                    } else if (document.msExitFullscreen) { /* IE/Edge */\n                        document.msExitFullscreen();\n                    }\n                }\n            });\n\n            $(document).on('fullscreenchange', async function() {\n                if (document.fullscreenElement) {\n                    $('#wrapper, #interactivevideo-container').addClass('fullscreen');\n                    $(\"#video-wrapper\").css('padding-bottom', '0');\n                    $('#wrapper [data-toggle=\"tooltip\"]').tooltip({\n                        container: '#wrapper',\n                        boundary: 'window',\n                    });\n                } else {\n                    $('#wrapper, #interactivevideo-container').removeClass('fullscreen');\n                    let ratio = 16 / 9;\n                    if (!displayoptions.usefixedratio || displayoptions.usefixedratio == 0) {\n                        ratio = player.aspectratio;\n                    }\n                    $(\"#video-wrapper\").css('padding-bottom', (1 / ratio) * 100 + '%');\n                }\n                $('#wrapper #fullscreen i').toggleClass('bi-fullscreen bi-fullscreen-exit');\n            });\n\n            // Pause video when the tab is not visible.\n            if (displayoptions.pauseonblur && displayoptions.pauseonblur == 1) {\n                $(document).on('visibilitychange', function() {\n                    if (document.visibilityState == 'hidden') {\n                        player.pause();\n                    }\n                });\n            }\n\n            // Handle player size change event.\n            $(document).on('click', '#controller #expand', function(e) {\n                e.preventDefault();\n                $('body').toggleClass('limited-width');\n                localStorage.setItem('limitedwidth', $('body').hasClass('limited-width'));\n                $(this).find('i').toggleClass('bi-square bi-file');\n            });\n\n            // Handle share this moment event.\n            $(document).on('click', '#controller #share', async function(e) {\n                e.preventDefault();\n                e.stopImmediatePropagation();\n                const $this = $(this);\n                $this.find('i').toggleClass('bi-share-fill bi-share');\n                let time = await player.getCurrentTime();\n                const url = window.location.href;\n                const shareurl = url + (url.indexOf('?') > 0 ? '&' : '?') + 't=' + Math.round(time);\n                // Add shareurl to clipboard.\n                await navigator.clipboard.writeText(shareurl);\n                $this.attr('data-original-title', M.util.get_string(\"copied\", \"mod_interactivevideo\")).tooltip('show');\n                setTimeout(function() {\n                    // Change tooltip back to share.\n                    $this\n                        .attr('data-original-title', M.util.get_string(\"sharethismoment\", \"mod_interactivevideo\"))\n                        .tooltip('hide');\n                    $this.find('i').toggleClass('bi-share-fill bi-share');\n                }, 2000);\n            });\n\n            // Display time when user hover on the progress bar.\n            $(document).on('mouseenter', '#video-nav #seek', function(e) {\n                if (!playerReady) {\n                    return;\n                }\n                $(this).append('<div id=\"position\"><div id=\"timelabel\"></div></div>');\n                let $position = $('#position');\n                const parentOffset = $(this).offset();\n                const relX = e.pageX - parentOffset.left;\n\n                $position.css('left', (relX) + 'px');\n                const percentage = relX / $(this).width();\n                const time = percentage * totaltime;\n                const formattedTime = convertSecondsToHMS(time);\n                $position.find('#timelabel').text(formattedTime);\n            });\n\n            $(document).on('mousemove', '#video-nav #seek', function(e) {\n                if (!playerReady) {\n                    return;\n                }\n                const parentOffset = $(this).offset();\n                const relX = e.pageX - parentOffset.left;\n                const percentage = relX / $(this).width();\n                const time = percentage * totaltime;\n                const formattedTime = convertSecondsToHMS(time);\n                $('#position').css('left', (relX) + 'px');\n                $('#position #timelabel').text(formattedTime);\n            });\n\n            $(document).on('mouseleave', '#video-nav #seek', function() {\n                $('#position').remove();\n            });\n\n            // Handle annotation click event:: when user click on the annotation on the progress bar\n            $(document).on('click', '#interactions-nav .annotation, #video-nav .annotation', async function(e) {\n                e.preventDefault();\n                e.stopImmediatePropagation();\n                if ($(this).hasClass('no-click')) {\n                    // Add a tooltip that seeking is disabled.\n                    Toast.add(M.util.get_string('youcannotviewthisannotationyet', 'mod_interactivevideo'), {\n                        type: 'danger'\n                    });\n                    return;\n                }\n                const timestamp = $(this).data('timestamp');\n                replaceProgressBars(((timestamp - start) / totaltime) * 100);\n                player.play();\n                if (player.type == 'yt') {\n                    clearInterval(interval);\n                }\n                await player.seek(Number(timestamp));\n                player.pause();\n                const id = $(this).data('id');\n                const theAnnotation = releventAnnotations.find(x => x.id == id);\n                setTimeout(() => {\n                    runInteraction(theAnnotation);\n                }, 500);\n                // Clear the viewed annotations that are after this timestamp.\n                const preceedingAnno = releventAnnotations.filter(x => x.timestamp < timestamp).map(x => Number(x.id));\n                viewedAnno = preceedingAnno;\n                viewedAnno.push(id);\n                // Concatenate the preceeding annotations.\n                viewedAnno = [...new Set(viewedAnno)];\n            });\n\n            // Handle seeking event:: when user click on the progress bar\n            $(document).on('click', '#seek', async function(e) {\n                if (!playerReady) {\n                    return;\n                }\n                e.preventDefault();\n                e.stopImmediatePropagation();\n                if ($('#video-nav').hasClass('no-click')) {\n                    // Add a tooltip that seeking is disabled.\n                    Toast.add(M.util.get_string('seekingdisabled', 'mod_interactivevideo'), {\n                        type: 'danger'\n                    });\n                    return;\n                }\n                $('#start-screen').fadeOut(300);\n                $('#end-screen').fadeOut(300);\n                const parentOffset = $(this).offset();\n                const relX = e.pageX - parentOffset.left;\n                const percentage = relX / $(this).width();\n                replaceProgressBars(percentage * 100);\n                // Gotta check if this affects anything.\n                if (player.type == 'yt') {\n                    clearInterval(interval);\n                }\n                player.pause(); // Especially for vimeo.\n                await player.seek((percentage * totaltime) + start);\n                player.play();\n                setTimeout(() => {\n                    // Remove the position.\n                    $('#position').remove();\n                }, 300);\n            });\n\n            // Handle video control events:: play\n            $(document).on('click', '#start-screen #play', async function(e) {\n                e.preventDefault();\n                $('#start-screen').fadeOut(300);\n                $(this).addClass('d-none');\n                $videoNav.removeClass('d-none');\n                player.play();\n            });\n\n            // Handle video control events:: restart\n            $(document).on('click', '#end-screen #restart', async function(e) {\n                e.preventDefault();\n                $('#message').remove();\n                viewedAnno = [];\n                await player.seek(start);\n                $videoNav.find(\"#progress\").css('width', '0%');\n                $videoNav.find(\"#seekhead\").css('left', '0%');\n                $('#end-screen').fadeOut(300);\n                $(this).addClass('d-none');\n                $videoNav.removeClass('d-none');\n                player.play();\n            });\n\n            // Handle video control events:: pause/resume when user click on the video\n            $(document).on('click', '#video-wrapper .video-block', async function(e) {\n                if (!playerReady) {\n                    return;\n                }\n                clearInterval(interval);\n                e.preventDefault();\n                // Pause or resume the video.\n                const playing = await player.isPlaying();\n                if (playing) {\n                    player.pause();\n                } else {\n                    player.play();\n                }\n            });\n\n            $(document).on('click', '#playpause', async function(e) {\n                if (!playerReady) {\n                    return;\n                }\n                e.preventDefault();\n                $(this).tooltip('hide');\n                // Pause or resume the video.\n                const playing = await player.isPlaying();\n                if (playing) {\n                    player.pause();\n                } else {\n                    let t = await player.getCurrentTime();\n                    if (t >= end) {\n                        $('#end-screen #restart').trigger('click');\n                    } else {\n                        player.play();\n                    }\n                }\n            });\n\n            $(document).on('click', 'li.anno', async function(e) {\n                e.preventDefault();\n                const id = $(this).data('id');\n                $(`li.annotation[data-id=${id}]`).trigger('click');\n                if ($(this).closest('#chapter-container-left').length > 0) {\n                    $('#chaptertoggle .btn').trigger('click');\n                }\n            });\n\n            // Handle video control events:: mute/unmute\n            $(document).on('click', '#mute', function(e) {\n                e.preventDefault();\n                $(this).tooltip('hide');\n                $(this).toggleClass('active');\n                if ($(this).hasClass('active')) {\n                    player.mute();\n                    $(this).attr('data-original-title', M.util.get_string('unmute', 'mod_interactivevideo'));\n                } else {\n                    player.unMute();\n                    $(this).attr('data-original-title', M.util.get_string('mute', 'mod_interactivevideo'));\n                }\n                $(this).find('i').toggleClass('bi-volume-mute bi-volume-up');\n                $(this).tooltip('show');\n            });\n\n            // Handle video control events:: playrate change\n            $(document).on('click', '.changerate', function(e) {\n                e.preventDefault();\n                const rate = $(this).data('rate');\n                player.setRate(rate);\n                $('.changerate').find('i').removeClass('bi-check');\n                $(this).find('i').addClass('bi-check');\n            });\n\n            // Handle video control:: Quality change\n            $(\"#changequality\").on('shown.bs.dropdown', async function() {\n                let quality = await player.getQualities();\n                $('#qualitieslist').empty();\n                let currentQuality = quality.currentQuality;\n                if (currentQuality === null) {\n                    currentQuality = $(this).data('current');\n                }\n                let qualities = quality.qualities;\n                let qualitiesLabel = quality.qualitiesLabel;\n                qualities.forEach((q, i) => {\n                    $('#qualitieslist').append(`<a class=\"dropdown-item text-white changequality\" data-quality=\"${q}\"\n                         href=\"#\"><i class=\"bi ${q == currentQuality ? 'bi-check' : ''} fa-fw ml-n3\"></i>${qualitiesLabel[i]}</a>`);\n                });\n                $(this).find('[data-toggle=dropdown]').dropdown('update');\n            });\n\n            $(document).on('click', '.changequality', function(e) {\n                e.preventDefault();\n                const quality = $(this).data('quality');\n                player.setQuality(quality);\n                $('.changequality').find('i').removeClass('bi-check');\n                $(this).find('i').addClass('bi-check');\n            });\n\n            $(document).on('iv:playerReady', function() {\n                onReady();\n            });\n\n            $(document).on('iv:playerPaused', function() {\n                // Remove the tooltip.\n                $('.tooltip').remove();\n                onPaused();\n            });\n\n            $(document).on('iv:playerPlaying', function() {\n                onPlaying();\n            });\n\n            $(document).on('iv:playerEnded', function() {\n                onEnded();\n            });\n\n            $(document).on('iv:playerSeek', function(e) {\n                onSeek(e.detail.time);\n            });\n\n            $(document).on('iv:playerError', function() {\n                Toast.add(M.util.get_string('thereisanissueloadingvideo', 'mod_interactivevideo'), {\n                    type: 'danger'\n                });\n                $('#spinner').remove();\n            });\n\n            $(document).on('iv:playerRateChange', function(e) {\n                $('.changerate').find('i').removeClass('bi-check');\n                $(`.changerate[data-rate=\"${e.originalEvent.detail.rate}\"]`).find('i').addClass('bi-check');\n            });\n\n            $(document).on('iv:playerQualityChange', function(e) {\n                $('#changequality').attr('data-current', e.originalEvent.detail.quality);\n                $('.changequality').find('i').removeClass('bi-check');\n                $(`.changequality[data-quality=\"${e.originalEvent.detail.quality}\"]`).find('i').addClass('bi-check');\n            });\n\n            $(document).on('annotationitemsrendered', function() {\n                $('#wrapper [data-toggle=\"tooltip\"]').tooltip({\n                    container: '#wrapper',\n                    boundary: 'window',\n                });\n                if (displayoptions.disableinteractionclickuntilcompleted == 1) {\n                    $interactionNav.find('li:not(.completed)').addClass('no-click');\n                }\n                if (displayoptions.disableinteractionclick == 1) {\n                    $interactionNav.find('li').addClass('no-click');\n                }\n                if (displayoptions.preventseeking == 1) {\n                    $interactionNav.find('li').addClass('no-click');\n                    $videoNav.addClass('no-click');\n                }\n            });\n\n            if ($(\"body\").hasClass('mobiletheme')) {\n                $('[data-toggle=\"tooltip\"]').on('click', function() {\n                    const $this = $(this);\n                    setTimeout(function() {\n                        $this.tooltip('hide');\n                    }, 2000); // Hide after 3 seconds\n                });\n            }\n\n            if ($(\"body\").hasClass('mobiletheme')) {\n                $('[data-toggle=\"tooltip\"]').on('click', function() {\n                    const $this = $(this);\n                    setTimeout(function() {\n                        $this.tooltip('hide');\n                    }, 2000); // Hide after 3 seconds\n                });\n            }\n        }\n    };\n});"],"names":["define","$","eventDispatcher","Toast","dispatchEvent","ctRenderer","annotations","totaltime","activityType","contentTypes","displayoptions","releventAnnotations","completionid","player","viewedAnno","$videoNav","$interactionNav","renderAnnotationItems","async","annos","start","actualduration","skipsegments","filter","x","type","length","forEach","Number","title","timestamp","completableAnno","hascompletion","actualAnnotationCounts","xp","map","reduce","a","b","completedAnnos","completed","xpEarned","earned","empty","append","seconds","hours","Math","floor","minutes","remainingSeconds","string","formatTime","ceil","preventseeking","addClass","hidemainvideocontrols","hideinteractions","renderer","renderItemOnVideoNavigation","chapteritems","sort","each","cstart","this","data","cend","find","id","JSON","parse","prop","icon","formattedtitle","init","url","cmid","interaction","course","userid","end","completionpercentage","gradeiteminstance","grademax","vtype","preventskip","moment","doptions","token","isNaN","playerReady","localStorage","getItem","removeClass","convertSecondsToHMS","h","m","s","replaceProgressBars","percentage","css","getAnnotations","callback","annnoitems","ajax","M","cfg","wwwroot","method","dataType","action","sesskey","contextid","courseContextId","userprogress","uid","previewmode","hasClass","getContentTypes","when","done","progress","ct","completiondetails","annotation","some","y","name","filterAnnotations","completedItems","completeditems","contentTypeMap","Map","completionitem","advanced","stringify","get","indexOf","e","rerunnable","replaybehavior","processAnnotations","shouldAdd","skipsegment","push","getRelevantAnnotations","unshift","util","get_string","hide","prependDummyChapter","chapterContentType","includes","remove","Promise","all","contentType","resolve","require","amdmodule","Type","error","then","initializeContentTypeRenderers","toggleClass","runInteraction","Date","getTime","Set","modal","not","fadeOut","theAnnotations","theAnnotation","pause","seek","add","shareMoment","urlParams","URLSearchParams","window","location","search","time","play","delete","newurl","protocol","host","pathname","toString","history","replaceState","onReady","support","playbackrate","quality","duration","getDuration","min","text","ratio","usefixedratio","aspectratio","gap","focus","draggable","event","ui","$position","relX","position","left","width","formattedTime","setTimeout","onPaused","clearInterval","interval","attr","onEnded","t","trigger","fadeIn","onSeek","getCurrentTime","visualized","onPlaying","audio","visualizer","intervalFunction","isPlaying","isEnded","unMute","toFixed","percentagePlayed","frequency","isPlayingInterval","setInterval","isPaused","VideoPlayer","useoriginalvideocontrols","$toast","detach","document","on","originalEvent","detail","preventDefault","stopImmediatePropagation","closest","elem","getElementById","exitFullscreen","mozCancelFullScreen","webkitExitFullscreen","msExitFullscreen","requestFullscreen","mozRequestFullScreen","webkitRequestFullscreen","msRequestFullscreen","fullscreenElement","tooltip","container","boundary","pauseonblur","visibilityState","setItem","$this","href","shareurl","round","navigator","clipboard","writeText","parentOffset","offset","pageX","preceedingAnno","mute","rate","setRate","getQualities","currentQuality","qualities","qualitiesLabel","q","i","dropdown","setQuality","disableinteractionclickuntilcompleted","disableinteractionclick"],"mappings":"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"}