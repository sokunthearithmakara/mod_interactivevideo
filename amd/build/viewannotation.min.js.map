{"version":3,"file":"viewannotation.min.js","sources":["../src/viewannotation.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * View page module\n *\n * @module     mod_interactivevideo/viewannotation\n * @copyright  2024 Sokunthearith Makara <sokunthearithmakara@gmail.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\ndefine([\n    'jquery', 'core/event_dispatcher', 'core/toast', 'mod_interactivevideo/libraries/jquery-ui'\n], function($, eventDispatcher, Toast) {\n    const {dispatchEvent} = eventDispatcher;\n    const ctRenderer = {};\n    let annotations, // Array of annotations.\n        totaltime, // Video total time.\n        activityType, // Current activityType.\n        lastanno, // Last run annotation.\n        contentTypes, // Array of available content types.\n        displayoptions, // Display options.\n        releventAnnotations, // Array of annotations that are not skipped.\n        player; // Video player instance.\n\n    const $videoNav = $('#video-nav');\n    const $interactionNav = $('#interactions-nav');\n\n    const formatTime = (seconds) => {\n        const hours = Math.floor(seconds / 3600);\n        const minutes = Math.floor((seconds % 3600) / 60);\n        const remainingSeconds = seconds % 60;\n        let string = '';\n        if (hours > 0) {\n            string += hours + 'h ';\n        }\n        if (minutes > 0) {\n            string += minutes + 'm ';\n        }\n        if (remainingSeconds > 0) {\n            string += remainingSeconds + 's';\n        }\n        return string;\n    };\n\n    const renderAnnotationItems = async(annos, start, totaltime) => {\n        releventAnnotations = annos;\n\n        let actualduration = totaltime;\n\n        const skipsegments = annos.filter(x => x.type == 'skipsegment');\n\n        if (skipsegments.length > 0) {\n            skipsegments.forEach(x => {\n                const length = (Number(x.title) - Number(x.timestamp));\n                actualduration -= length;\n            });\n        }\n\n        const completableAnno = releventAnnotations.filter(x => x.hascompletion == 1);\n        const actualAnnotationCounts = completableAnno.length;\n\n        const xp = completableAnno.map(x => Number(x.xp)).reduce((a, b) => a + b, 0);\n\n        const completedAnnos = completableAnno\n            .filter(x => x.completed);\n\n        const xpEarned = completedAnnos.map(x => Number(x.xp)).reduce((a, b) => a + b, 0);\n\n        $(\".metadata\").empty();\n        $(\".metadata\").append(`<span class=\"d-inline-block mr-3\">\n            <i class=\"bi bi-stopwatch mr-2\"></i>${formatTime(Math.ceil(actualduration))}</span>\n            <span class=\"d-inline-block mr-3\">\n        <i class=\"bi bi-bullseye mr-2\"></i>${completedAnnos.length} / ${actualAnnotationCounts}</span>\n        <span class=\"d-inline-block\"><i class=\"bi bi-star mr-2\"></i>${xpEarned} / ${xp}</span>`);\n\n        $(\"#interactions-nav ul\").empty();\n\n        if (annos.length == 0) {\n            return;\n        }\n\n        if (displayoptions.preventseeking == 1) {\n            $videoNav.addClass('no-pointer-events');\n        }\n\n        if (displayoptions.hidemainvideocontrols == 1 || displayoptions.hideinteractions == 1) {\n            if (displayoptions.hidemainvideocontrols == 1) {\n                $('#wrapper').addClass('no-videonav');\n            }\n            return;\n        }\n        for (const x of annos) {\n            const renderer = ctRenderer[x.type];\n            await renderer.renderItemOnVideoNavigation(x);\n        }\n        dispatchEvent('annotationitemsrendered', {'annotations': annos});\n        $('.annolistinchapter').empty();\n        const chapteritems = releventAnnotations.filter(x => x.type != 'skipsegment' && x.hascompletion == 1);\n        chapteritems.sort((a, b) => a.timestamp - b.timestamp);\n        chapteritems.forEach((x) => {\n            $('[data-region=\"chapterlists\"] li').each(function() {\n                const cstart = $(this).data('start');\n                const cend = $(this).data('end');\n                if (x.timestamp >= cstart && x.timestamp < cend) {\n                    $(this).find('.annolistinchapter')\n                        .append(`<li class=\"border-bottom anno d-flex align-items-center justify-content-between\n                         px-3 py-2 ${x.completed ? \"completed\" : \"\"}\" data-id=\"${x.id}\" data-timestamp=\"${x.timestamp}\">\n                         <span class=\"text-nowrap\">\n                         <i class=\"small bi ${x.completed ? \"bi-check-circle-fill text-success\" : 'bi-circle'} mr-2\"></i>\n                         <i class=\"${JSON.parse(x.prop).icon} mr-2\"></i></span>\n                         <span class=\"flex-grow-1 text-truncate\">${x.formattedtitle}</span>\n                         <span class=\"text-nowrap\">${x.xp}<i class=\"bi bi-star ml-1\"></i></span></li>`);\n                }\n            });\n        });\n        dispatchEvent('chapterrendered', {'annotations': releventAnnotations});\n    };\n\n    return {\n        /**\n         * Render annotation items on the video navigation and chapter list.\n         */\n        renderAnnotationItems: renderAnnotationItems,\n        /**\n         * Initialize the view annotation on page loads.\n         * @param {string} url - The video url.\n         * @param {number} cmid - The course module id.\n         * @param {number} interaction - The interaction id.\n         * @param {number} course - The course id.\n         * @param {number} userid - The user id.\n         * @param {number} start - The start time of the video.\n         * @param {number} end - The end time of the video.\n         * @param {number} completionpercentage - The completion percentage.\n         * @param {number} gradeiteminstance - The grade item instance.\n         * @param {number} grademax - The grade max.\n         * @param {string} vtype - The video type.\n         * @param {boolean} preventskip - Prevent user from skipping the video.\n         * @param {number} moment - The moment to share.\n         * @param {object} doptions - The display options.\n         * @param {string} token - The token.\n         * @return {void}\n         */\n        init: function(\n            url, cmid, interaction, course, userid, start = 0, end,\n            completionpercentage, gradeiteminstance, grademax, vtype,\n            preventskip = true, moment = null, doptions = {}, token = null) {\n            // Convert start to number if string\n            start = Number(start);\n            if (isNaN(start)) {\n                start = 0;\n            }\n\n            // Convert end to number if string\n            end = Number(end);\n            if (isNaN(end)) {\n                end = null;\n            }\n\n            displayoptions = doptions;\n\n            let playerReady = false;\n\n            /**\n             * Function to convert seconds to HH:MM:SS format.\n             * @param {number} seconds\n             * @returns {string}\n             */\n            const convertSecondsToHMS = (seconds) => {\n                const h = Math.floor(seconds / 3600);\n                const m = Math.floor(seconds % 3600 / 60);\n                const s = Math.floor(seconds % 3600 % 60);\n                return (h > 0 ? h + ':' : '') + (m < 10 ? '0' : '') + m + ':' + (s < 10 ? '0' : '') + s;\n            };\n\n            /**\n             * Function to replace the progress bars on the video navigation.\n             * @param {number} percentage\n             * @returns {void}\n             */\n            const replaceProgressBars = (percentage) => {\n                percentage = percentage > 100 ? 100 : percentage;\n                $videoNav.find('#progress').css('width', percentage + '%');\n                $videoNav.find('#seekhead').css('left', percentage + '%');\n            };\n\n            /**\n             * Function to get all annotations from the database and render them.\n             * @param {function} callback\n             * @returns {void}\n             */\n            const getAnnotations = (callback) => {\n                // Get all interaction items.\n                const annnoitems = $.ajax({\n                    url: M.cfg.wwwroot + '/mod/interactivevideo/ajax.php',\n                    method: \"POST\",\n                    dataType: \"text\",\n                    data: {\n                        action: 'get_items',\n                        sesskey: M.cfg.sesskey,\n                        id: interaction,\n                        contextid: M.cfg.courseContextId,\n                        token: token,\n                        cmid: cmid\n                    }\n                });\n\n                // Get current user progress.\n                const userprogress = $.ajax({\n                    url: M.cfg.wwwroot + '/mod/interactivevideo/ajax.php',\n                    method: \"POST\",\n                    dataType: \"text\",\n                    data: {\n                        action: 'get_progress',\n                        sesskey: M.cfg.sesskey,\n                        id: interaction,\n                        uid: userid,\n                        token: token,\n                        cmid: cmid\n                    }\n                });\n\n                // Get all content types.\n                const getContentTypes = $.ajax({\n                    url: M.cfg.wwwroot + '/mod/interactivevideo/ajax.php',\n                    method: \"POST\",\n                    dataType: \"text\",\n                    data: {\n                        action: 'getallcontenttypes',\n                        sesskey: M.cfg.sesskey,\n                        token: token,\n                        cmid: cmid\n                    }\n                });\n\n                $.when(annnoitems, userprogress, getContentTypes).done(async function(annos, progress, ct) {\n                    annotations = JSON.parse(annos[0]);\n                    progress = JSON.parse(progress[0]);\n                    contentTypes = JSON.parse(ct[0]);\n\n                    annotations = filterAnnotations(annotations, contentTypes, start, end);\n                    annotations = processAnnotations(annotations, contentTypes, progress, start, end);\n                    annotations.sort((a, b) => a.timestamp - b.timestamp);\n\n                    releventAnnotations = getRelevantAnnotations(annotations, start, end, contentTypes);\n\n                    if (releventAnnotations.length > 0 && !releventAnnotations.find(x => x.type == 'chapter')) {\n                        prependDummyChapter(releventAnnotations, start, contentTypes);\n                    }\n\n                    await initializeContentTypeRenderers(\n                        contentTypes, releventAnnotations, player, interaction, course, userid,\n                        completionpercentage, gradeiteminstance, grademax, vtype, preventskip, totaltime, start, end, cmid, token);\n\n                    await renderAnnotationItems(releventAnnotations, start, totaltime);\n                    $(\"#play\").removeClass('d-none');\n                    $(\"#spinner\").remove();\n                    $(\"#video-info\").toggleClass('d-none d-flex');\n                    callback();\n                });\n\n                /**\n                 * Filters annotations based on content types and a time range.\n                 *\n                 * @param {Array} annotations - The list of annotations to filter.\n                 * @param {Array} contentTypes - The list of content types to include.\n                 * @param {number} start - The start time of the range.\n                 * @param {number} end - The end time of the range.\n                 * @returns {Array} - The filtered list of annotations.\n                 */\n                function filterAnnotations(annotations, contentTypes, start, end) {\n                    return annotations.filter(annotation => {\n                        const inContentType = contentTypes.some(y => y.name === annotation.type);\n                        if (!inContentType) {\n                            return false;\n                        }\n\n                        if (annotation.type === 'skipsegment') {\n                            return !(annotation.timestamp > end || annotation.title < start);\n                        }\n\n                        return (annotation.timestamp >= start && annotation.timestamp <= end) || annotation.timestamp < 0;\n                    });\n                }\n\n                /**\n                 * Maps and processes annotations based on provided content types, progress, and time range.\n                 *\n                 * @param {Array} annotations - The list of annotations to be processed.\n                 * @param {Array} contentTypes - The list of content types to match with annotations.\n                 * @param {Object} progress - The progress object containing completed items.\n                 * @param {number} start - The start time of the segment.\n                 * @param {number} end - The end time of the segment.\n                 * @returns {Array} - The processed list of annotations.\n                 */\n                function processAnnotations(annotations, contentTypes, progress, start, end) {\n                    const completedItems = progress.completeditems == '' ? [] : JSON.parse(progress.completeditems);\n                    const contentTypeMap = new Map(contentTypes.map(ct => [ct.name, ct]));\n                    return annotations.map(annotation => {\n                        annotation.timestamp = Number(annotation.timestamp);\n                        annotation.xp = Number(annotation.xp);\n                        if (annotation.type == 'skipsegment') {\n                            annotation.title = Number(annotation.title);\n                            if (annotation.timestamp < start && annotation.title > start) {\n                                annotation.timestamp = start;\n                            }\n                            if (annotation.title > end && annotation.timestamp < end) {\n                                annotation.title = end;\n                            }\n                        }\n                        annotation.prop = JSON.stringify(contentTypeMap.get(annotation.type));\n                        annotation.completed = completedItems.indexOf(annotation.id) > -1;\n\n                        let advanced;\n                        try {\n                            advanced = JSON.parse(annotation.advanced);\n                        } catch (e) {\n                            advanced = null;\n                        }\n                        annotation.rerunnable = advanced && advanced.replaybehavior === '1';\n\n                        return annotation;\n                    });\n                }\n\n                /**\n                 * Filters and returns relevant annotations within a specified time range,\n                 * excluding those that fall within skip segments.\n                 *\n                 * @param {Array} annotations - The list of annotations to filter.\n                 * @returns {Array} - The filtered list of relevant annotations.\n                 */\n                function getRelevantAnnotations(annotations) {\n                    const skipsegments = annotations.filter(annotation => annotation.type == 'skipsegment');\n                    let releventAnnotations = [];\n                    annotations.forEach(annotation => {\n                        let shouldAdd = true;\n                        skipsegments.forEach(skipsegment => {\n                            if (Number(annotation.timestamp) > Number(skipsegment.timestamp)\n                                && Number(annotation.timestamp) < Number(skipsegment.title)) {\n                                shouldAdd = false;\n                            }\n                        });\n                        if (shouldAdd) {\n                            releventAnnotations.push(annotation);\n                        }\n                    });\n                    return releventAnnotations;\n                }\n\n                /**\n                 * Adds a dummy chapter annotation to the beginning of the relevant annotations array.\n                 *\n                 * @param {Array} releventAnnotations - The array of relevant annotations to which the dummy chapter will be added.\n                 * @param {number} start - The timestamp at which the dummy chapter starts.\n                 * @param {Array} contentTypes - The array of content types to find the chapter type from.\n                 */\n                function prependDummyChapter(releventAnnotations, start, contentTypes) {\n                    releventAnnotations.unshift({\n                        id: 0,\n                        title: M.util.get_string('startchapter', 'mod_interactivevideo'),\n                        formattedtitle: M.util.get_string('startchapter', 'mod_interactivevideo'),\n                        timestamp: start,\n                        type: 'chapter',\n                        prop: JSON.stringify(contentTypes.find(x => x.name == 'chapter')),\n                        xp: 0,\n                        completed: true,\n                        hide: true\n                    });\n                }\n\n\n                /**\n                 * Asynchronously loads and initializes content type renderers for interactive video annotations.\n                 *\n                 * @param {Array} contentTypes - Array of content type objects.\n                 * @param {Array} releventAnnotations - Array of relevant annotation objects.\n                 * @param {Object} player - The video player instance.\n                 * @param {Object} interaction - The interaction object.\n                 * @param {Object} course - The course object.\n                 * @param {number} userid - The user ID.\n                 * @param {number} completionpercentage - The completion percentage.\n                 * @param {number} gradeiteminstance - The grade item instance.\n                 * @param {number} grademax - The maximum grade.\n                 * @param {string} vtype - The video type.\n                 * @param {boolean} preventskip - Flag to prevent skipping.\n                 * @param {number} totaltime - The total time of the video.\n                 * @param {number} start - The start time of the video.\n                 * @param {number} end - The end time of the video.\n                 * @param {number} cmid - The course module ID.\n                 * @param {string} token - The authentication token.\n                 * @returns {Promise<Object>} A promise that resolves to an object containing the initialized contenttype renderers.\n                 */\n                async function initializeContentTypeRenderers(contentTypes, releventAnnotations,\n                    player, interaction, course, userid,\n                    completionpercentage, gradeiteminstance, grademax, vtype, preventskip, totaltime, start, end, cmid, token) {\n                    const chapterContentType = contentTypes.find(x => x.name == 'chapter');\n                    contentTypes = contentTypes.filter(x => releventAnnotations.map(y => y.type).includes(x.name));\n                    if (contentTypes.length == 0) {\n                        $('#chaptertoggle, #chapter-container-left, #chapter-container-right').remove();\n                        return;\n                    } else {\n                        $('#chaptertoggle, #chapter-container-left, #chapter-container-right').removeClass('d-none');\n                    }\n                    if (!contentTypes.find(x => x.name == 'chapter')) {\n                        contentTypes.push(chapterContentType);\n                    }\n                    return Promise.all(contentTypes.map(contentType => {\n                        return new Promise((resolve) => {\n                            require([contentType.amdmodule], function(Type) {\n                                ctRenderer[contentType.name] = new Type(player, releventAnnotations, interaction, course, userid,\n                                    completionpercentage, gradeiteminstance, grademax, vtype, preventskip, totaltime, start,\n                                    end, contentType, cmid, token);\n                                try {\n                                    ctRenderer[contentType.name].init();\n                                } catch (error) {\n                                    // Do nothing.\n                                }\n                                resolve(ctRenderer[contentType.name]);\n                            });\n                        });\n                    })).then(() => ctRenderer);\n                }\n            };\n\n            /**\n             * Run the interaction.\n             * @param {object} annotation annotation object\n             * @returns {void}\n             */\n            const runInteraction = async(annotation) => {\n                lastanno = annotation;\n                // Remove the previous message but keep the one below the video.\n                $('#annotation-modal').modal('hide');\n                $('#message').not('[data-placement=bottom]').not('.sticky').remove();\n                $('#end-screen, #start-screen').fadeOut(300);\n\n                if (preventskip) {\n                    const theAnnotations = releventAnnotations\n                        .filter(x => Number(x.timestamp) < Number(annotation.timestamp)\n                            && x.completed == false && x.hascompletion == 1);\n                    if (theAnnotations.length > 0) {\n                        const theAnnotation = theAnnotations[0];\n                        player.pause();\n                        await player.seek((theAnnotation.timestamp - 0.7 > start) ? (theAnnotation.timestamp - 0.7) : start);\n                        Toast.add(M.util.get_string('youmustcompletethepreviousactivity', 'mod_interactivevideo'), {\n                            type: 'danger'\n                        });\n                        return;\n                    }\n                }\n                activityType = ctRenderer[annotation.type];\n                activityType.runInteraction(annotation);\n            };\n\n            /**\n             * Shares a specific moment in the video by seeking to the given timestamp and playing the video.\n             * If the timestamp is within the valid range, it hides the start screen, seeks to the timestamp,\n             * plays the video, runs the relevant annotation interaction, and updates the progress bars.\n             * Finally, it removes the timestamp parameter from the URL.\n             *\n             * @async\n             * @function shareMoment\n             * @returns {Promise<void>} A promise that resolves when the video has been successfully sought and played.\n             */\n            const shareMoment = async() => {\n                if (!moment) {\n                    return;\n                }\n                // Check if the url has a timestamp using url params.\n                const urlParams = new URLSearchParams(window.location.search);\n                const time = Number(moment);\n                if (time && !isNaN(time) && time >= start && time <= end) {\n                    // Hide the start screen.\n                    $('#video-wrapper #start-screen').hide(0);\n                    replaceProgressBars(((time - start) / totaltime) * 100);\n                    await player.seek(time);\n                    player.play();\n                    const theAnnotation = releventAnnotations.find(x => x.timestamp == time);\n                    if (theAnnotation) {\n                        runInteraction(theAnnotation);\n                    }\n                }\n                urlParams.delete('t');\n                const newurl = window.location.protocol\n                    + '//' + window.location.host + window.location.pathname + '?' + urlParams.toString();\n                window.history.replaceState(null, null, newurl);\n            };\n\n            /**\n             * Initializes the video player and its controls when the player is ready.\n             *\n             * This function performs the following tasks:\n             * - Checks if the player supports playback rate and quality adjustments, and updates the UI accordingly.\n             * - Sets the background image of the start screen if a poster image is available.\n             * - Adjusts the background of the video block to be transparent.\n             * - Retrieves the video duration and updates the end time if necessary.\n             * - Calculates the total playback time and updates the duration display.\n             * - Recalculates the aspect ratio of the video and updates the video wrapper's padding.\n             * - Sets the player as ready and focuses on the start button.\n             * - Initializes the seek head draggable functionality, allowing users to seek through the video.\n             *\n             * @async\n             * @function onReady\n             * @returns {Promise<void>} A promise that resolves when the player is fully initialized and ready.\n             */\n            const onReady = async() => {\n                if (player.support.playbackrate == false) {\n                    $('#changerate').remove();\n                } else {\n                    $('#changerate').removeClass('d-none');\n                }\n\n                if (player.support.quality == false) {\n                    $('#changequality').remove();\n                } else {\n                    $('#changequality').removeClass('d-none');\n                }\n\n                if (player.posterImage) {\n                    $('#video-wrapper #start-screen').css({\n                        'background': `url(${player.posterImage}) no-repeat center center / cover`,\n                    });\n                }\n                $(\".video-block\").css('background', 'transparent');\n                const duration = await player.getDuration();\n                end = !end ? duration : Math.min(end, duration);\n                start = start > end ? 0 : start;\n                totaltime = end - start;\n                getAnnotations(shareMoment);\n                $('#duration').text(convertSecondsToHMS(totaltime));\n\n                // Recalculate the ratio of the video\n                const ratio = await player.ratio();\n                $(\"#video-wrapper\").css('padding-bottom', (1 / ratio) * 100 + '%');\n\n                playerReady = true;\n                $('#start-screen #start').focus();\n\n                $('#seekhead').draggable({\n                    'containment': '#video-nav',\n                    'axis': 'x',\n                    'cursor': 'col-resize',\n                    'start': function(event, ui) {\n                        $(this).addClass('active');\n                        $('#taskinfo').addClass('no-pointer-events');\n                        $(\"#message, #end-screen\").remove();\n                        $(\"#seek\").append('<div id=\"position\"><div id=\"timelabel\"></div></div>');\n                        let $position = $('#position');\n                        const relX = ui.position.left;\n                        $position.css('left', (relX) + 'px');\n                        var percentage = relX / $(this).width();\n                        var time = Math.round(percentage * totaltime);\n                        var formattedTime = convertSecondsToHMS(time);\n                        $position.find('#timelabel').text(formattedTime);\n                    },\n                    'drag': async function(event, ui) {\n                        let timestamp = ((ui.position.left) / $('#video-nav').width()) * totaltime + start;\n                        let percentage = ui.position.left / $('#video-nav').width();\n                        replaceProgressBars(percentage * 100);\n                        $('#seek #position').css('left', ui.position.left + 'px');\n                        $('#seek #position #timelabel').text(convertSecondsToHMS(timestamp - start));\n                        await player.seek(timestamp);\n                        player.pause();\n                    },\n                    'stop': async function() {\n                        setTimeout(function() {\n                            $('#taskinfo').removeClass('no-pointer-events');\n                        }, 200);\n                        setTimeout(function() {\n                            $('#seekhead').removeClass('active');\n                            $('#seek #position').remove();\n                        }, 1000);\n                        player.play();\n                    }\n                });\n            };\n\n\n            /**\n             * Handles the event when the video player is paused.\n             *\n             * This function performs the following actions:\n             * - Checks if the player is ready. If not, it exits early.\n             * - Clears the interval timer.\n             * - Updates the play/pause button icon to indicate 'play'.\n             * - Sets the tooltip of the play/pause button to 'play'.\n             */\n            const onPaused = () => {\n                if (!playerReady) {\n                    return;\n                }\n                clearInterval(interval);\n                $('#playpause').find('i').removeClass('bi-pause-fill').addClass('bi-play-fill');\n                $('#playpause').attr('data-original-title', M.util.get_string('play', 'mod_interactivevideo'));\n            };\n\n\n            /**\n             * Handles the end of the video playback.\n             *\n             * @param {number} t - The current time of the video playback. If not provided, defaults to the end time.\n             *\n             * @returns {void}\n             *\n             * This function performs the following actions:\n             * - Checks if the player is ready.\n             * - Finds the relevant annotation at the end of the video.\n             * - If the annotation exists and is not the last one, pauses the player and runs the interaction.\n             * - Toggles the tooltip to show the annotation title and hides it after 2 seconds.\n             * - Updates the UI to show the end screen and restart button.\n             * - Clears the interval and pauses the player.\n             * - Updates the play/pause button to show the play icon.\n             */\n            const onEnded = (t) => {\n                if (!playerReady) {\n                    return;\n                }\n                const time = t || end;\n                // Check if theAnnotation exists at the end of the video.\n                const theAnnotation = releventAnnotations.find(x => x.timestamp == time);\n                if (theAnnotation && !lastanno) {\n                    if (!theAnnotation.completed || theAnnotation.rerunnable) {\n                        player.pause();\n                        runInteraction(theAnnotation);\n                    }\n                    // Toggle the tooltip to show the title.\n                    $interactionNav.find('.annotation[data-id=\"' + theAnnotation.id + '\"] .item').trigger('mouseover')\n                        .addClass('active');\n                    // Hide the tooltip after 2 seconds.\n                    setTimeout(function() {\n                        $interactionNav.find('.annotation[data-id=\"' + theAnnotation.id + '\"] .item').trigger('mouseout')\n                            .removeClass('active');\n                    }, 2000);\n                }\n                $('#currenttime').text(convertSecondsToHMS(totaltime));\n                $('#restart').removeClass('d-none').fadeIn(300);\n                $('#end-screen').removeClass('d-none').fadeIn(300);\n                $('#progress').css('width', '100%');\n                $('#seekhead').css('left', '100%');\n                clearInterval(interval);\n                player.pause();\n                $('#playpause').find('i').removeClass('bi-pause-fill').addClass('bi-play-fill');\n                $('#playpause').attr('data-original-title', M.util.get_string('play', 'mod_interactivevideo'));\n            };\n\n            /**\n             * Handles the seek event for the video player.\n             *\n             * @param {number} t - The time to seek to. If not provided, the current time of the player will be used.\n             * @returns {Promise<void>} - A promise that resolves when the seek operation is complete.\n             */\n            const onSeek = async(t) => {\n                if (!playerReady) {\n                    return;\n                }\n                if (t) {\n                    t = Number(t);\n                } else {\n                    t = await player.getCurrentTime();\n                }\n                if (t > start && t < end) {\n                    $('#end-screen, #start-screen').addClass('d-none');\n                }\n                var percentage = (t - start) / (totaltime) * 100;\n                $('#currenttime').text(convertSecondsToHMS(t - start));\n                replaceProgressBars(percentage);\n                dispatchEvent('timeupdate', {'time': t});\n            };\n\n            let interval;\n            /**\n             * Handles the 'playing' event of the video player.\n             * This function is triggered when the video is playing and performs various actions such as:\n             * - Resetting the annotation content.\n             * - Handling fullscreen mode for mobile themes.\n             * - Hiding modals and messages.\n             * - Updating the play/pause button state.\n             * - Managing the video progress and annotations.\n             *\n             * @async\n             * @function onPlaying\n             * @returns {Promise<void>} A promise that resolves when the function completes.\n             */\n            const onPlaying = async() => { // Use with player timeupdate event.\n                // Reset the annotation content.\n                if (!playerReady) {\n                    return;\n                }\n                if ($('body').hasClass('mobiletheme') && !$('#wrapper').hasClass('fullscreen')) {\n                    $(\"#fullscreen\").trigger('click');\n                }\n                $('#annotation-modal').modal('hide');\n                $('#message').not('[data-placement=bottom]').not('.sticky').remove();\n                $('#end-screen, #start-screen').fadeOut(300);\n                $('#restart').addClass('d-none');\n                $('#playpause').find('i').removeClass('bi-play-fill').addClass('bi-pause-fill');\n                $('#playpause').attr('data-original-title', M.util.get_string('pause', 'mod_interactivevideo'));\n                const intervalFunction = async function() {\n                    const isPlaying = await player.isPlaying();\n                    const isEnded = await player.isEnded();\n                    if (!isPlaying || isEnded) {\n                        clearInterval(interval);\n                        return;\n                    }\n\n                    const t = await player.getCurrentTime();\n                    if (t > end || isEnded) {\n                        clearInterval(interval);\n                        onEnded(end);\n                        return;\n                    }\n\n                    dispatchEvent('timeupdate', {'time': t});\n\n                    const time = Math.round(t);\n\n                    // If it is the same annotation we just run, then we don't need to run it again.\n                    if (lastanno && time == lastanno.timestamp) {\n                        return;\n                    } else {\n                        if (lastanno && time > lastanno.timestamp) {\n                            lastanno = null;\n                        }\n                        let percentagePlayed = (t - start) / totaltime;\n                        $('#currenttime').text(convertSecondsToHMS(t - start));\n                        percentagePlayed = percentagePlayed > 1 ? 1 : percentagePlayed;\n                        $('#video-nav #progress').css('width', percentagePlayed * 100 + '%');\n                        $('#video-nav #seekhead').css('left', percentagePlayed * 100 + '%');\n                        const theAnnotation = releventAnnotations.find(x => (((t - player.frequency) <= x.timestamp\n                            && (t + player.frequency) >= x.timestamp) || time == x.timestamp) && x.id != 0);\n                        if (theAnnotation) {\n                            $('#interactions-nav .annotation[data-id=\"' + theAnnotation.id + '\"] .item').trigger('mouseover')\n                                .addClass('active');\n\n                            setTimeout(function() {\n                                $('#interactions-nav .annotation[data-id=\"' + theAnnotation.id + '\"] .item')\n                                    .trigger('mouseout').removeClass('active');\n                            }, 2000);\n                            if (!theAnnotation.completed || theAnnotation.rerunnable) {\n                                player.pause();\n                                $('#video-nav #progress')\n                                    .css('width', (theAnnotation.timestamp - start) / totaltime * 100 + '%');\n                                $('#video-nav #seekhead').css('left', (theAnnotation.timestamp - start) / totaltime * 100 + '%');\n                                runInteraction(theAnnotation);\n                            }\n                        }\n                    }\n                };\n\n                if (player.type == 'yt' || player.type == 'wistia') {\n                    const update = async() => {\n                        await intervalFunction();\n                        if (await player.isPlaying() && !await player.isEnded()) {\n                            requestAnimationFrame(update);\n                        }\n                    };\n                    requestAnimationFrame(update);\n                } else {\n                    intervalFunction();\n                }\n\n            };\n\n            // Implement the player\n            require(['mod_interactivevideo/player/' + vtype], function(VideoPlayer) {\n                player = new VideoPlayer(\n                    url,\n                    start,\n                    end,\n                    displayoptions.useoriginalvideocontrols == 1,\n                    true,\n                    false\n                );\n            });\n\n            // Move toast-wrapper to the #wrapper element so it can be displayed on top of the video in fullscreen mode.\n            let $toast = $('.toast-wrapper').detach();\n            $('#wrapper').append($toast);\n\n            $(document).on('timeupdate', async function(e) {\n                const t = e.originalEvent.detail.time;\n                if (preventskip) {\n                    const theAnnotations = releventAnnotations.filter(x => Number(x.timestamp) <= (t + player.frequency)\n                        && x.completed == false && x.hascompletion == 1);\n                    if (theAnnotations.length > 0) {\n                        const theAnnotation = theAnnotations[0];\n                        player.pause();\n                        await player.seek((theAnnotation.timestamp - 0.7 > start) ? (theAnnotation.timestamp - 0.7) : start);\n                        clearInterval(interval);\n                        Toast.add(M.util.get_string('youmustcompletethepreviousactivity', 'mod_interactivevideo'), {\n                            type: 'danger'\n                        });\n                        $videoNav.find('#progress').css('width', ((theAnnotation.timestamp - start) / totaltime) * 100 + '%');\n                        $videoNav.find('#seekhead').css('left', ((theAnnotation.timestamp - start) / totaltime) * 100 + '%');\n                    }\n                }\n            });\n\n            // Handle the refresh button:: allowing user to refresh the content\n            $(document).on('click', '#refresh', function(e) {\n                e.preventDefault();\n                e.stopImmediatePropagation();\n                const id = $(this).data('id');\n                const annotation = releventAnnotations.find(x => x.id == id);\n                $(this).closest('#message').find(\"#content\").empty();\n                runInteraction(annotation, true);\n            });\n\n            // Handle video control events:: fullscreen toggle\n            $(document).on('click', '#fullscreen', function(e) {\n                e.preventDefault();\n                if (!playerReady) {\n                    return;\n                }\n\n                // Put the wrapper in fullscreen mode\n                let elem = document.getElementById('wrapper');\n                $('#fullscreen').toggleClass('active');\n                if (!$('#wrapper').hasClass('fullscreen')) {\n                    if (elem.requestFullscreen) {\n                        elem.requestFullscreen();\n                    } else if (elem.mozRequestFullScreen) { /* Firefox */\n                        elem.mozRequestFullScreen();\n                    } else if (elem.webkitRequestFullscreen) { /* Chrome, Safari and Opera */\n                        elem.webkitRequestFullscreen();\n                    } else if (elem.msRequestFullscreen) { /* IE/Edge */\n                        elem.msRequestFullscreen();\n                    }\n                } else {\n                    if (document.exitFullscreen) {\n                        document.exitFullscreen();\n                    } else if (document.mozCancelFullScreen) { /* Firefox */\n                        document.mozCancelFullScreen();\n                    } else if (document.webkitExitFullscreen) { /* Chrome, Safari and Opera */\n                        document.webkitExitFullscreen();\n                    } else if (document.msExitFullscreen) { /* IE/Edge */\n                        document.msExitFullscreen();\n                    }\n                }\n            });\n\n            $(document).on('fullscreenchange', async function() {\n                if (document.fullscreenElement) {\n                    $('#wrapper, #interactivevideo-container').addClass('fullscreen');\n                    $(\"#video-wrapper\").css('padding-bottom', '0');\n                    $('#wrapper [data-toggle=\"tooltip\"]').tooltip({\n                        container: '#wrapper',\n                        boundary: 'window',\n                    });\n                } else {\n                    $('#wrapper, #interactivevideo-container').removeClass('fullscreen');\n                    const ratio = await player.ratio();\n                    $(\"#video-wrapper\").css('padding-bottom', (1 / ratio) * 100 + '%');\n                }\n                $('#wrapper #fullscreen i').toggleClass('bi-fullscreen bi-fullscreen-exit');\n            });\n\n            // Pause video when the tab is not visible.\n            $(document).on('visibilitychange', function() {\n                if (document.visibilityState == 'hidden') {\n                    player.pause();\n                }\n            });\n\n            // Handle share this moment event.\n            $(document).on('click', '#controller #share', async function(e) {\n                e.preventDefault();\n                e.stopImmediatePropagation();\n                const $this = $(this);\n                $this.find('i').toggleClass('bi-share-fill bi-share');\n                let time = await player.getCurrentTime();\n                const url = window.location.href;\n                const shareurl = url + (url.indexOf('?') > 0 ? '&' : '?') + 't=' + Math.round(time);\n                // Add shareurl to clipboard.\n                await navigator.clipboard.writeText(shareurl);\n                $this.attr('data-original-title', M.util.get_string(\"copied\", \"mod_interactivevideo\")).tooltip('show');\n                setTimeout(function() {\n                    // Change tooltip back to share.\n                    $this\n                        .attr('data-original-title', M.util.get_string(\"sharethismoment\", \"mod_interactivevideo\"))\n                        .tooltip('hide');\n                    $this.find('i').toggleClass('bi-share-fill bi-share');\n                }, 2000);\n            });\n\n            // Display time when user hover on the progress bar.\n            $(document).on('mouseenter', '#video-nav #seek', function(e) {\n                if (!playerReady) {\n                    return;\n                }\n                $(this).append('<div id=\"position\"><div id=\"timelabel\"></div></div>');\n                let $position = $('#position');\n                const parentOffset = $(this).offset();\n                const relX = e.pageX - parentOffset.left;\n\n                $position.css('left', (relX) + 'px');\n                var percentage = relX / $(this).width();\n                var time = Math.round(percentage * totaltime);\n                var formattedTime = convertSecondsToHMS(time);\n                $position.find('#timelabel').text(formattedTime);\n            });\n\n            $(document).on('mousemove', '#video-nav #seek', function(e) {\n                if (!playerReady) {\n                    return;\n                }\n                const parentOffset = $(this).offset();\n                const relX = e.pageX - parentOffset.left;\n                var percentage = relX / $(this).width();\n                var time = Math.round(percentage * totaltime);\n                var formattedTime = convertSecondsToHMS(time);\n                $('#position').css('left', (relX) + 'px');\n                $('#position #timelabel').text(formattedTime);\n            });\n\n            $(document).on('mouseleave', '#video-nav #seek', function() {\n                $('#position').remove();\n            });\n\n            // Handle annotation click event:: when user click on the annotation on the progress bar\n            $(document).on('click', '#interactions-nav .annotation, #video-nav .annotation', async function(e) {\n                e.preventDefault();\n                e.stopImmediatePropagation();\n                if ($(this).hasClass('no-click')) {\n                    // Add a tooltip that seeking is disabled.\n                    Toast.add(M.util.get_string('youcannotviewthisannotationyet', 'mod_interactivevideo'), {\n                        type: 'danger'\n                    });\n                    return;\n                }\n                const timestamp = $(this).data('timestamp');\n                replaceProgressBars(((timestamp - start) / totaltime) * 100);\n                player.play();\n                if (player.type == 'yt') {\n                    clearInterval(interval);\n                }\n                await player.seek(Number(timestamp));\n                player.pause();\n                const id = $(this).data('id');\n                const theAnnotation = releventAnnotations.find(x => x.id == id);\n                setTimeout(() => {\n                    runInteraction(theAnnotation);\n                }, 500);\n                lastanno = theAnnotation;\n            });\n\n            // Handle seeking event:: when user click on the progress bar\n            $(document).on('click', '#seek', async function(e) {\n                if (!playerReady) {\n                    return;\n                }\n                e.preventDefault();\n                e.stopImmediatePropagation();\n                if ($('#video-nav').hasClass('no-click')) {\n                    // Add a tooltip that seeking is disabled.\n                    Toast.add(M.util.get_string('seekingdisabled', 'mod_interactivevideo'), {\n                        type: 'danger'\n                    });\n                    return;\n                }\n                lastanno = null;\n                $('#start-screen').fadeOut(300);\n                $('#end-screen').fadeOut(300);\n                const parentOffset = $(this).offset();\n                const relX = e.pageX - parentOffset.left;\n                var percentage = relX / $(this).width();\n                replaceProgressBars(percentage * 100);\n                // Gotta check if this affects anything.\n                if (player.type == 'yt') {\n                    clearInterval(interval);\n                }\n                player.pause(); // Especially for vimeo.\n                await player.seek((percentage * totaltime) + start);\n                player.play();\n            });\n\n            // Handle video control events:: play\n            $(document).on('click', '#start-screen #play', async function(e) {\n                e.preventDefault();\n                $('#start-screen').fadeOut(300);\n                $(this).addClass('d-none');\n                $videoNav.removeClass('d-none');\n                player.play();\n            });\n\n            // Handle video control events:: restart\n            $(document).on('click', '#end-screen #restart', async function(e) {\n                e.preventDefault();\n                $('#message').remove();\n                lastanno = null;\n                await player.seek(start);\n                $videoNav.find(\"#progress\").css('width', '0%');\n                $videoNav.find(\"#seekhead\").css('left', '0%');\n                $('#end-screen').fadeOut(300);\n                $(this).addClass('d-none');\n                $videoNav.removeClass('d-none');\n                player.play();\n            });\n\n            // Handle video control events:: pause/resume when user click on the video\n            $(document).on('click', '#video-wrapper .video-block', async function(e) {\n                if (!playerReady) {\n                    return;\n                }\n                clearInterval(interval);\n                e.preventDefault();\n                // Pause or resume the video.\n                const playing = await player.isPlaying();\n                if (playing) {\n                    player.pause();\n                } else {\n                    player.play();\n                }\n            });\n\n            $(document).on('click', '#playpause', async function(e) {\n                if (!playerReady) {\n                    return;\n                }\n                e.preventDefault();\n                $(this).tooltip('hide');\n                // Pause or resume the video.\n                const playing = await player.isPlaying();\n                if (playing) {\n                    player.pause();\n                } else {\n                    let t = await player.getCurrentTime();\n                    if (t >= end) {\n                        $('#end-screen #restart').trigger('click');\n                    } else {\n                        player.play();\n                    }\n                }\n            });\n\n            $(document).on('click', 'li.anno', async function(e) {\n                e.preventDefault();\n                const id = $(this).data('id');\n                $(`li.annotation[data-id=${id}]`).trigger('click');\n                if ($(this).closest('#chapter-container-left').length > 0) {\n                    $('#chaptertoggle .btn').trigger('click');\n                }\n            });\n\n            // Handle video control events:: mute/unmute\n            $(document).on('click', '#mute', function(e) {\n                e.preventDefault();\n                $(this).tooltip('hide');\n                $(this).toggleClass('active');\n                if ($(this).hasClass('active')) {\n                    player.mute();\n                    $(this).attr('data-original-title', M.util.get_string('unmute', 'mod_interactivevideo'));\n                } else {\n                    player.unMute();\n                    $(this).attr('data-original-title', M.util.get_string('mute', 'mod_interactivevideo'));\n                }\n                $(this).find('i').toggleClass('bi-volume-mute bi-volume-up');\n                $(this).tooltip('show');\n            });\n\n            // Handle video control events:: playrate change\n            $(document).on('click', '.changerate', function(e) {\n                e.preventDefault();\n                const rate = $(this).data('rate');\n                player.setRate(rate);\n                $('.changerate').find('i').removeClass('bi-check');\n                $(this).find('i').addClass('bi-check');\n            });\n\n            // Handle video control:: Quality change\n            $(\"#changequality\").on('shown.bs.dropdown', async function() {\n                let quality = await player.getQualities();\n                $('#qualitieslist').empty();\n                let currentQuality = quality.currentQuality;\n                if (currentQuality === null) {\n                    currentQuality = $(this).data('current');\n                }\n                let qualities = quality.qualities;\n                let qualitiesLabel = quality.qualitiesLabel;\n                qualities.forEach((q, i) => {\n                    $('#qualitieslist').append(`<a class=\"dropdown-item text-white changequality\" data-quality=\"${q}\"\n                         href=\"#\"><i class=\"bi ${q == currentQuality ? 'bi-check' : ''} fa-fw ml-n3\"></i>${qualitiesLabel[i]}</a>`);\n                });\n                $(this).find('[data-toggle=dropdown]').dropdown('update');\n            });\n\n            $(document).on('click', '.changequality', function(e) {\n                e.preventDefault();\n                const quality = $(this).data('quality');\n                player.setQuality(quality);\n                $('.changequality').find('i').removeClass('bi-check');\n                $(this).find('i').addClass('bi-check');\n            });\n\n            $(document).on('iv:playerReady', function() {\n                onReady();\n            });\n\n            $(document).on('iv:playerPaused', function() {\n                onPaused();\n            });\n\n            $(document).on('iv:playerPlaying', function() {\n                onPlaying();\n            });\n\n            $(document).on('iv:playerEnded', function() {\n                onEnded();\n            });\n\n            $(document).on('iv:playerSeek', function(e) {\n                onSeek(e.detail.time);\n            });\n\n            $(document).on('iv:playerError', function() {\n                Toast.add(M.util.get_string('thereisanissueloadingvideo', 'mod_interactivevideo'), {\n                    type: 'danger'\n                });\n                $('#spinner').remove();\n            });\n\n            $(document).on('iv:playerRateChange', function(e) {\n                $('.changerate').find('i').removeClass('bi-check');\n                $(`.changerate[data-rate=\"${e.originalEvent.detail.rate}\"]`).find('i').addClass('bi-check');\n            });\n\n            $(document).on('iv:playerQualityChange', function(e) {\n                $('#changequality').attr('data-current', e.originalEvent.detail.quality);\n                $('.changequality').find('i').removeClass('bi-check');\n                $(`.changequality[data-quality=\"${e.originalEvent.detail.quality}\"]`).find('i').addClass('bi-check');\n            });\n\n            $(document).on('annotationitemsrendered', function() {\n                $('#wrapper [data-toggle=\"tooltip\"]').tooltip({\n                    container: '#wrapper',\n                    boundary: 'window',\n                });\n                if (displayoptions.disableinteractionclickuntilcompleted == 1) {\n                    $interactionNav.find('li:not(.completed)').addClass('no-click');\n                }\n                if (displayoptions.disableinteractionclick == 1) {\n                    $interactionNav.find('li').addClass('no-click');\n                }\n                if (displayoptions.preventseeking == 1) {\n                    $interactionNav.find('li').addClass('no-click');\n                    $videoNav.addClass('no-click');\n                }\n            });\n        }\n    };\n});"],"names":["define","$","eventDispatcher","Toast","dispatchEvent","ctRenderer","annotations","totaltime","activityType","lastanno","contentTypes","displayoptions","releventAnnotations","player","$videoNav","$interactionNav","renderAnnotationItems","async","annos","start","actualduration","skipsegments","filter","x","type","length","forEach","Number","title","timestamp","completableAnno","hascompletion","actualAnnotationCounts","xp","map","reduce","a","b","completedAnnos","completed","xpEarned","empty","append","seconds","hours","Math","floor","minutes","remainingSeconds","string","formatTime","ceil","preventseeking","addClass","hidemainvideocontrols","hideinteractions","renderer","renderItemOnVideoNavigation","chapteritems","sort","each","cstart","this","data","cend","find","id","JSON","parse","prop","icon","formattedtitle","init","url","cmid","interaction","course","userid","end","completionpercentage","gradeiteminstance","grademax","vtype","preventskip","moment","doptions","token","isNaN","playerReady","convertSecondsToHMS","h","m","s","replaceProgressBars","percentage","css","getAnnotations","callback","annnoitems","ajax","M","cfg","wwwroot","method","dataType","action","sesskey","contextid","courseContextId","userprogress","uid","getContentTypes","when","done","progress","ct","annotation","some","y","name","filterAnnotations","completedItems","completeditems","contentTypeMap","Map","advanced","stringify","get","indexOf","e","rerunnable","replaybehavior","processAnnotations","shouldAdd","skipsegment","push","getRelevantAnnotations","unshift","util","get_string","hide","prependDummyChapter","chapterContentType","includes","remove","removeClass","Promise","all","contentType","resolve","require","amdmodule","Type","error","then","initializeContentTypeRenderers","toggleClass","runInteraction","modal","not","fadeOut","theAnnotations","theAnnotation","pause","seek","add","shareMoment","urlParams","URLSearchParams","window","location","search","time","play","delete","newurl","protocol","host","pathname","toString","history","replaceState","onReady","support","playbackrate","quality","posterImage","duration","getDuration","min","text","ratio","focus","draggable","event","ui","$position","relX","position","left","width","round","formattedTime","setTimeout","onPaused","clearInterval","interval","attr","onEnded","t","trigger","fadeIn","onSeek","getCurrentTime","onPlaying","hasClass","intervalFunction","isPlaying","isEnded","percentagePlayed","frequency","update","requestAnimationFrame","VideoPlayer","useoriginalvideocontrols","$toast","detach","document","on","originalEvent","detail","preventDefault","stopImmediatePropagation","closest","elem","getElementById","exitFullscreen","mozCancelFullScreen","webkitExitFullscreen","msExitFullscreen","requestFullscreen","mozRequestFullScreen","webkitRequestFullscreen","msRequestFullscreen","fullscreenElement","tooltip","container","boundary","visibilityState","$this","href","shareurl","navigator","clipboard","writeText","parentOffset","offset","pageX","mute","unMute","rate","setRate","getQualities","currentQuality","qualities","qualitiesLabel","q","i","dropdown","setQuality","disableinteractionclickuntilcompleted","disableinteractionclick"],"mappings":"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"}