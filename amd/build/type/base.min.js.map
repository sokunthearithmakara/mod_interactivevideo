{"version":3,"file":"base.min.js","sources":["../../src/type/base.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * TODO describe module base\n *\n * @module     mod_interactivevideo/type/base\n * @copyright  2024 Sokunthearith Makara <sokunthearithmakara@gmail.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\nimport $ from 'jquery';\nimport { renderContent, defaultDisplayContent, formatText } from 'mod_interactivevideo/displaycontent';\nimport { renderAnnotationItems } from 'mod_interactivevideo/viewannotation';\nimport { dispatchEvent } from 'core/event_dispatcher';\nimport { add as addToast } from 'core/toast';\nimport ModalForm from 'core_form/modalform';\nimport 'mod_interactivevideo/libraries/jquery-ui';\n\nclass Base {\n    constructor(player, annotations, interaction, course, userid, completionpercentage,\n        gradeiteminstance, grademax, vtype, preventskip, totaltime, start, end, properties, cm, token) {\n        /**\n         * Access token\n         * @type {string}\n         * @private\n         */\n        this.token = token;\n\n        /**\n         * The course module id\n         * @type {number}\n         * @private\n         */\n        this.cm = cm;\n\n        /**\n         * The player object\n         * @type {Object}\n         * @private\n         */\n\n        this.player = player;\n        /**\n         * The annotations object\n         * @type {Array}\n         * @private\n         */\n        this.annotations = annotations;\n        /**\n         * The interaction id\n         * @type {number}\n         * @private\n         */\n        this.interaction = interaction;\n        /**\n         * The course id\n         * @type {number}\n         * @private\n         */\n        this.course = course;\n        /**\n         * The user id\n         * @type {number}\n         * @private\n         */\n        this.userid = userid;\n        /**\n         * The required completion percentage set in the activity settings\n         * @type {number}\n         * @private\n         */\n        this.completionpercentage = completionpercentage;\n        /**\n         * The grade item instance id\n         * @type {number}\n         * @private\n         */\n        this.gradeiteminstance = gradeiteminstance;\n        /**\n         * The maximum grade set in the activity settings\n         * @type {number}\n         * @private\n         */\n        this.grademax = grademax;\n        /**\n         * The video type\n         * @type {string} (yt, vimeo, dailymotion, html4video)\n         * @private\n         */\n        this.vtype = vtype;\n        /**\n         * Prevent skipping of the video\n         * @type {boolean}\n         * @private\n         * @default false\n         */\n        this.preventskip = preventskip;\n        /**\n         * The total time of the video in seconds including the skipped segments.\n         * @type {number}\n         * @private\n         */\n        this.totaltime = totaltime;\n        /**\n         * The start time of the video\n         * @type {number}\n         * @private\n         */\n        this.start = start;\n        /**\n         * The end time of the video\n         * @type {number}\n         * @private\n         */\n        this.end = end;\n        /**\n         * Properties of the interaction type defined in the php class\n         * @type {Object}\n         * @private\n         */\n        this.prop = properties;\n    }\n\n    /**\n     * Enable the HTML5 color picker in form elements\n     * @returns {void}\n     */\n    enableColorPicker() {\n        $(document).on('change', 'input[type=\"color\"]', function () {\n            const color = $(this).val();\n            $(this).closest('.color-picker').css('background-color', color);\n            $(this).closest('.fitem').find('input[type=\"text\"]').val(color);\n        });\n    }\n\n    formatContent(text, shorttext = false) {\n        return formatText(text, shorttext);\n    }\n\n    render(annotation, format = 'html') {\n        return new Promise((resolve) => {\n            resolve(renderContent(annotation, format));\n        });\n    }\n\n    addNotification(msg, type = \"danger\") {\n        addToast(msg, { type });\n    }\n    /**\n     * Initialize the interaction type\n     * @returns {void}\n     */\n    init() {\n        // Do nothing.\n    }\n    /**\n     * Check if the interaction is skipped\n     * @param {number} timestamp The timestamp of the interaction\n     * @returns {boolean}\n     */\n    isSkipped(timestamp) {\n        return this.isInSkipSegment(timestamp) || !this.isBetweenStartAndEnd(timestamp);\n    }\n\n    convertSecondsToHMS(s) {\n        const hours = Math.floor(s / 3600);\n        const minutes = Math.floor(s % 3600 / 60);\n        const seconds = Math.floor(s % 3600 % 60);\n        return (hours < 10 ? '0' + hours : hours) + ':' +\n            (minutes < 10 ? '0' + minutes : minutes) + ':' +\n            (seconds < 10 ? '0' + seconds : seconds);\n    }\n\n    /**\n     * Render edit items\n     * @param {Array} annotations The annotations array\n     * @param {Object} listItem The list item\n     * @param {Object} item The annotation object\n     * @returns {void}\n     */\n    renderEditItem(annotations, listItem, item) {\n        this.annotations = annotations;\n        listItem.removeAttr('id').removeClass('d-none');\n        listItem.attr('data-type', item.type);\n        listItem.addClass(item.type + (this.isSkipped(item.timestamp) ? ' skipped' : ''));\n        listItem.attr('data-timestamp', item.timestamp)\n            .attr('data-id', item.id);\n\n        listItem.find('.timestamp').text(this.convertSecondsToHMS(item.timestamp))\n            .attr('data-timestamp', item.timestamp);\n\n        listItem.find('.title').text(item.formattedtitle);\n        if (this.prop.hascompletion) {\n            listItem.find('.btn.xp span').text(item.xp);\n            listItem.attr('data-xp', item.xp);\n        } else {\n            listItem.find('.btn.xp').remove();\n        }\n\n        listItem.find('.type-icon i').addClass(this.prop.icon);\n        listItem.find('.type-icon').attr('title', this.prop.title);\n        // If out of range, make the title text grey\n        if (Number(item.timestamp) > this.end || Number(item.timestamp) < this.start || this.isSkipped(item.timestamp)) {\n            listItem.find('.title').addClass('text-secondary');\n            listItem.attr('data-xp', 0);\n            // Append a badge to the title\n            listItem.find('.title')\n                .append(`<span class=\"badge badge-warning ml-2\">\n                            ${M.util.get_string('skipped', 'mod_interactivevideo')}</span>`);\n        }\n\n        listItem.find('[data-field]').attr('data-id', item.id);\n        listItem.find('[data-field=\"xp\"]').val(item.xp);\n        listItem.find('[data-field=\"title\"]').val(item.title);\n        listItem.find('[data-field=\"timestamp\"]').val(this.convertSecondsToHMS(item.timestamp));\n        if (!this.prop.allowmultiple) {\n            listItem.find('.btn.copy').remove();\n        }\n        listItem.appendTo('#annotation-list');\n        return listItem;\n    }\n\n    /**\n     * Check if the timestamp is between the start and end\n     * @param {number} timestamp The timestamp\n     * @returns {boolean}\n     */\n    isBetweenStartAndEnd(timestamp) {\n        return timestamp <= this.end && timestamp >= this.start;\n    }\n\n    /**\n     * Check if the annotation is already added at the timestamp\n     * @param {number} timestamp The timestamp\n     * @returns {boolean}\n     */\n    isAlreadyAdded(timestamp) {\n        return this.annotations.some(x => x.timestamp == timestamp);\n    }\n\n    /**\n     * Check if the annotation is in the skip segment\n     * @param {number} timestamp The timestamp\n     * @returns {boolean}\n     */\n    isInSkipSegment(timestamp) {\n        return this.annotations.some(x => x.type == 'skipsegment'\n            && Number(x.timestamp) < Number(timestamp) && Number(x.title) > Number(timestamp));\n    }\n\n    /**\n     * Validate the timestamp format\n     * @param {string} timestamp The timestamp\n     * @returns {boolean}\n     */\n    validateTimestampFormat(timestamp) {\n        const regex = /^([0-9]{2}):([0-5][0-9]):([0-5][0-9])$/;\n        return regex.test(timestamp);\n    }\n\n    /**\n     * Validate the timestamp\n     * @param {string} fld The field\n     * @param {string} hiddenfield The hidden field\n     * @returns {void}\n     */\n    validateTimestampFieldValue(fld, hiddenfield) {\n        var self = this;\n        $(document).on('change', `form [name=${fld}]`, function (e) {\n            e.preventDefault();\n            // Make sure the timestamp format is hh:mm:ss.\n            if (!self.validateTimestampFormat($(this).val())) {\n                self.addNotification(M.util.get_string('invalidtimestampformat', 'mod_interactivevideo'));\n                $(this).val($(this).attr('data-initial-value'));\n                return;\n            }\n\n            // Make sure the timestamp is between the start and end time.\n            var parts = $(this).val().split(':');\n            var timestamp = Number(parts[0]) * 3600 + Number(parts[1]) * 60 + Number(parts[2]);\n            if (!self.isBetweenStartAndEnd(timestamp)) {\n                var message = M.util.get_string('timemustbebetweenstartandendtime', 'mod_interactivevideo', {\n                    \"start\": self.convertSecondsToHMS(self.start),\n                    \"end\": self.convertSecondsToHMS(self.end),\n                });\n                self.addNotification(message);\n                $(this).val($(this).attr('data-initial-value'));\n                return;\n            }\n\n            // Make sure the timestamp does not already exist.\n            if (self.isAlreadyAdded(timestamp)) {\n                self.addNotification(M.util.get_string('interactionalreadyexists', 'mod_interactivevideo'));\n                $(this).val($(this).attr('data-initial-value'));\n                return;\n            }\n\n            // Make sure the timestamp is not in the skip segment.\n            if (self.isInSkipSegment(timestamp)) {\n                self.addNotification(M.util.get_string('interactionisbetweentheskipsegment', 'mod_interactivevideo'));\n                $(this).val($(this).attr('data-initial-value'));\n                return;\n            }\n\n            $(`form [name=${hiddenfield}]`).val(timestamp);\n\n            self.player.seek(timestamp, true);\n            // Make sure the video is paused.\n            self.player.pause();\n        });\n    }\n\n    /**\n     * Add an annotation\n     * @param {Array} annotations The annotations array\n     * @param {number} timestamp The timestamp\n     * @param {number} coursemodule The course module id\n     * @returns {void}\n     */\n    addAnnotation(annotations, timestamp, coursemodule) {\n        var self = this;\n        this.annotations = annotations;\n        if (!this.isBetweenStartAndEnd(timestamp)) {\n            var message = M.util.get_string('interactioncanonlybeaddedbetweenstartandendtime', 'mod_interactivevideo', {\n                \"start\": self.convertSecondsToHMS(self.start),\n                \"end\": self.convertSecondsToHMS(self.end),\n            });\n            self.addNotification(message);\n            return;\n        }\n\n        if (self.isAlreadyAdded(timestamp)) {\n            self.addNotification(M.util.get_string('interactionalreadyexists', 'mod_interactivevideo'));\n            return;\n        }\n\n        if (self.isInSkipSegment(timestamp)) {\n            self.addNotification(M.util.get_string('interactionisbetweentheskipsegment', 'mod_interactivevideo'));\n            return;\n        }\n\n        const startHMS = self.convertSecondsToHMS(self.start);\n        const endHMS = self.convertSecondsToHMS(self.end);\n        const timestampHMS = timestamp > 0 ? self.convertSecondsToHMS(timestamp) : startHMS;\n\n        const data = {\n            id: 0,\n            timestamp: timestamp > 0 ? timestamp : self.start,\n            timestampassist: timestampHMS,\n            start: startHMS,\n            end: endHMS,\n            contextid: M.cfg.contextid,\n            type: self.prop.name,\n            courseid: self.course,\n            cmid: coursemodule,\n            annotationid: self.interaction,\n            hascompletion: self.prop.hascompletion ? 1 : 0,\n        };\n\n        var form = new ModalForm({\n            formClass: self.prop.form,\n            args: data,\n            modalConfig: {\n                title: M.util.get_string('addinteractiontitle', 'mod_interactivevideo', {\n                    \"name\": self.prop.title.toLowerCase(),\n                    \"time\": timestampHMS\n                }),\n            }\n        });\n        $(\"#contentmodal\").modal('hide');\n        $('#addcontentdropdown a').removeClass('active');\n        form.show();\n\n        form.addEventListener(form.events.LOADED, (e) => {\n            setTimeout(() => {\n                $('body').addClass('modal-open');\n            }, 500);\n            try {\n                self.onEditFormLoaded(form, e);\n            } catch (error) {\n                // Do nothing.\n            }\n            self.validateTimestampFieldValue('timestampassist', 'timestamp');\n\n            // Make form draggable.\n            form.modal.modal.draggable({\n                handle: \".modal-header\"\n            });\n        });\n\n        form.addEventListener(form.events.FORM_SUBMITTED, (e) => {\n            $.ajax({\n                url: M.cfg.wwwroot + '/mod/interactivevideo/ajax.php',\n                method: \"POST\",\n                dataType: \"text\",\n                data: {\n                    action: 'get_item',\n                    id: e.detail.id,\n                    sesskey: M.cfg.sesskey,\n                    contextid: M.cfg.courseContextId,\n                    token: self.token,\n                    cmid: self.cm,\n                },\n                success: function (data) {\n                    var newAnnotation = JSON.parse(data);\n                    dispatchEvent('annotationupdated', {\n                        annotation: newAnnotation,\n                        action: 'add'\n                    });\n                }\n            });\n        });\n    }\n\n    /**\n     * Copy an annotation\n     * @param {number} id The annotation id\n     * @returns {void}\n     */\n    cloneAnnotation(id) {\n        $.ajax({\n            url: M.cfg.wwwroot + '/mod/interactivevideo/ajax.php',\n            method: \"POST\",\n            dataType: \"text\",\n            data: {\n                action: 'copy_item',\n                id: id,\n                sesskey: M.cfg.sesskey,\n                contextid: M.cfg.contextid,\n                token: this.token,\n                cmid: this.cm,\n            },\n            success: function (data) {\n                var newAnnotation = JSON.parse(data);\n                dispatchEvent('annotationupdated', {\n                    annotation: newAnnotation,\n                    action: 'clone'\n                });\n            }\n        });\n    }\n\n    /**\n     * Edit an annotation\n     * @param {Array} annotations The annotations array\n     * @param {number} id The annotation id\n     * @returns {void}\n     */\n    editAnnotation(annotations, id) {\n        this.annotations = annotations;\n        let self = this;\n        const annotation = annotations.find(x => x.id == id);\n        const timestamp = annotation.timestamp;\n        const timestampassist = this.convertSecondsToHMS(timestamp);\n\n        annotation.timestampassist = timestampassist;\n        annotation.start = this.convertSecondsToHMS(this.start);\n        annotation.end = this.convertSecondsToHMS(this.end);\n        annotation.hascompletion = this.prop.hascompletion ? 1 : 0;\n        annotation.contextid = M.cfg.contextid;\n\n        const title = annotation.type === 'skipsegment'\n            ? M.util.get_string('skipsegmentcontent', 'ivplugin_skipsegment').toLowerCase()\n            : annotation.formattedtitle;\n\n        const form = new ModalForm({\n            formClass: this.prop.form,\n            args: annotation,\n            modalConfig: {\n                title: M.util.get_string(\"editinteractiontitle\", \"mod_interactivevideo\", {\n                    name: title,\n                    time: timestampassist\n                }),\n            }\n        });\n\n        form.show();\n\n        form.addEventListener(form.events.LOADED, (e) => {\n            try {\n                this.onEditFormLoaded(form, e);\n            } catch (error) {\n                // Do nothing.\n            }\n            this.validateTimestampFieldValue('timestampassist', 'timestamp');\n\n            // Make form draggable.\n            form.modal.modal.draggable({\n                handle: \".modal-header\"\n            });\n        });\n\n        form.addEventListener(form.events.FORM_SUBMITTED, (e) => {\n            this.annotations = this.annotations.filter(x => x.id != id);\n            $.ajax({\n                url: M.cfg.wwwroot + '/mod/interactivevideo/ajax.php',\n                method: \"POST\",\n                dataType: \"text\",\n                data: {\n                    action: 'get_item',\n                    id: e.detail.id,\n                    sesskey: M.cfg.sesskey,\n                    contextid: M.cfg.courseContextId,\n                    token: self.token,\n                    cmid: self.cm,\n                },\n            }).done(function (data) {\n                var updated = JSON.parse(data);\n                dispatchEvent('annotationupdated', {\n                    annotation: updated,\n                    action: 'edit'\n                });\n            });\n        });\n    }\n\n    /**\n     * Delete an annotation\n     * @param {Array} annotations The annotations array\n     * @param {number} id The annotation id\n     * @returns {void}\n     */\n    deleteAnnotation(annotations, id) {\n        this.annotations = annotations;\n        const annotation = this.annotations.find(x => x.id == id);\n        $.ajax({\n            url: M.cfg.wwwroot + '/mod/interactivevideo/ajax.php',\n            method: \"POST\",\n            dataType: \"text\",\n            data: {\n                action: 'delete_item',\n                sesskey: M.cfg.sesskey,\n                id: id,\n                contextid: M.cfg.contextid,\n                token: this.token,\n                cmid: this.cm,\n            },\n            success: function () {\n                dispatchEvent('annotationdeleted', {\n                    annotation: annotation,\n                });\n            },\n        });\n    }\n\n    /**\n     * Dispatch an event when an interaction is run\n     * @param {Object} annotation The annotation object\n     * @param {Object} data The data to be passed\n     */\n    interactionRunEvent(annotation, data) {\n        dispatchEvent('interactionrun', {\n            annotation: annotation,\n            data: data,\n        });\n    }\n\n    /**\n     * Called when the edit form is loaded.\n     * @param {Object} form The form\n     * @return {void}\n     */\n    onEditFormLoaded(form) {\n        return form.modal.modal.find('.modal-body');\n    }\n\n    /**\n     * Called after the annotation is edited/added/quick edited (after everything is rendered).\n     * @param {Object} annotation The annotation object\n     * @return {void}\n     */\n    postEditCallback(annotation) {\n        return this.runInteraction(annotation);\n    }\n\n    /**\n     * Check if the page is in edit mode\n     * @returns {boolean}\n     */\n    isEditMode() {\n        return $('body').hasClass('page-interactions');\n    }\n\n    /**\n     * Check if the annotation is clickable from video navigation\n     * @param {Object} annotation\n     * @returns boolean\n     */\n    isClickable(annotation) {\n        if (this.isEditMode()) {\n            return true;\n        }\n        const advanced = JSON.parse(annotation.advanced);\n        return (advanced.clickablebeforecompleted == \"1\" && !annotation.completed)\n            || (advanced.clickableaftercompleted == \"1\" && annotation.completed);\n    }\n\n    /**\n     * Visibility on the video navigation\n     * @param {Object} annotation\n     * @returns boolean\n     */\n    isVisible(annotation) {\n        if (this.isEditMode()) {\n            return true;\n        }\n        const advanced = JSON.parse(annotation.advanced);\n        return (advanced.visiblebeforecompleted == \"1\" && !annotation.completed)\n            || (advanced.visibleaftercompleted == \"1\" && annotation.completed);\n    }\n\n    /**\n     * Render the item on the video navigation\n     * @param {Object} annotation The annotation object\n     * @returns {void}\n     */\n    renderItemOnVideoNavigation(annotation) {\n        if (annotation.timestamp < this.start || annotation.timestamp > this.end) {\n            return;\n        }\n        const percentage = ((Number(annotation.timestamp) - this.start) / this.totaltime) * 100;\n        if (this.isVisible(annotation)) {\n            $(\"#video-nav ul\").append(`<li class=\"annotation ${annotation.completed ? \"completed\" : \"\"}\n        ${annotation.type} ${this.isClickable(annotation) ? '' : 'no-pointer-events'} li-draggable\n         ${this.isSkipped(annotation.timestamp) ? 'skipped' : ''}\"  data-timestamp=\"${annotation.timestamp}\"\n        data-id=\"${annotation.id}\" style=\"left: calc(${percentage}% - 5px)\">\n        <div class=\"item\" data-toggle=\"tooltip\" data-container=\"#wrapper\"\n        data-trigger=\"hover\" data-placement=\"top\" data-html=\"true\" data-original-title='<i class=\"${this.prop.icon} mr-1\"></i>\n        ${annotation.formattedtitle}'></div></li>`);\n        }\n    }\n\n    /**\n     * Render the viewer for the annotation\n     * @param {Object} annotation The annotation object\n     * @returns {Promise}\n     */\n    renderViewer(annotation) {\n        return new Promise((resolve) => {\n            resolve(defaultDisplayContent(annotation, this.player, this.start, this.end));\n        });\n    }\n\n    /**\n     * Render the container for the annotation\n     */\n    renderContainer() {\n        // Do nothing.\n    }\n\n    /**\n     * Callback to excute after the content is rendered.\n     * @returns {void}\n     */\n    postContentRender() {\n        // Do nothing.\n    }\n\n    /**\n     * Callback to excute after the content is rendered in the editor.\n     */\n    postContentRenderEditor() {\n        // Do nothing.\n    }\n\n    /**\n     * Set draggable\n     * @param {string} elem The element to make draggable\n     */\n    setModalDraggable(elem) {\n        $(elem).draggable({\n            handle: \".modal-header\"\n        });\n    }\n\n    /**\n     * Callback to excute after item is successfully marked complete or incomplete.\n     * @param {Array} annotations Updated annotations\n     * @param {Object} thisItem The current annotation\n     * @param {string} action The action performed (e.g. mark-done, mark-undone)\n     * @param {string} type The type of completion (e.g. manual, automatic)\n     */\n    completionCallback(annotations, thisItem, action, type) {\n        const $message = $(`#message[data-id='${thisItem.id}']`);\n        const $toggleButton = $message.find(`#completiontoggle`);\n        if (type == 'manual') {\n            $toggleButton.prop('disabled', false);\n            $toggleButton.find(`i`)\n                .removeClass('fa-spin bi-arrow-repeat')\n                .addClass(action == 'mark-done' ? 'bi-check2' : 'bi-circle');\n            $toggleButton.find(`span`).show();\n        } else if (type == 'automatic') {\n            $toggleButton.find(`i`).toggleClass('bi-check2 bi-circle');\n        }\n\n        let audio;\n        if (action == 'mark-done') {\n            $toggleButton\n                .removeClass('btn-secondary mark-done')\n                .addClass('btn-success mark-undone');\n            // Play a popup sound.\n            audio = new Audio(M.cfg.wwwroot + '/mod/interactivevideo/sounds/point-awarded.mp3');\n            audio.play();\n        } else if (action == 'mark-undone') {\n            $toggleButton\n                .removeClass('btn-success mark-undone').addClass('btn-secondary mark-done');\n            // Play a popup sound.\n            audio = new Audio(M.cfg.wwwroot + '/mod/interactivevideo/sounds/pop.mp3');\n            audio.play();\n        }\n\n        // Update the completion button.\n        $toggleButton.find(`span`).text('');\n        if (thisItem.xp > 0) {\n            if (action == 'mark-undone') {\n                this.addNotification(M.util.get_string('xplost', 'mod_interactivevideo', thisItem.xp), 'info');\n            } else if (action == 'mark-done') {\n                this.addNotification(M.util.get_string('xpearned', 'mod_interactivevideo', thisItem.xp), 'success');\n            }\n        }\n\n        if (type == 'manual') {\n            if (action == 'mark-done') {\n                $toggleButton.find(`span`)\n                    .text(`${M.util.get_string('completionmarkincomplete', 'mod_interactivevideo')}`);\n            } else if (action == 'mark-undone') {\n                $toggleButton.find(`span`)\n                    .text(`${M.util.get_string('completionmarkcomplete', 'mod_interactivevideo')}`);\n            }\n        } else if (type == 'automatic') {\n            if (action == 'mark-done') {\n                $toggleButton.find(`span`)\n                    .text(`${M.util.get_string('completioncompleted', 'mod_interactivevideo')}`);\n            } else if (action == 'mark-undone') {\n                $toggleButton.find(`span`)\n                    .text(`${M.util.get_string('completionincomplete', 'mod_interactivevideo')}`);\n            }\n        }\n        return 'done';\n    }\n\n    /**\n     * Toggle completion of an item\n     * @param {number} id The annotation id\n     * @param {string} action The action to perform (mark-done, mark-undone)\n     * @param {string} type The type of completion (manual, automatic)\n     * @returns {Promise}\n     */\n    toggleCompletion(id, action, type = 'manual') {\n        let self = this;\n        // Skip if the page is the interactions page.\n        if (this.isEditMode()) {\n            return Promise.resolve(); // Return a resolved promise for consistency\n        }\n        // Gradable items (hascompletion and not in the skipsegment)\n        const gradableitems = this.annotations.filter(x => x.hascompletion == '1');\n\n        const totalXp = gradableitems.map(x => Number(x.xp)).reduce((a, b) => a + b, 0);\n        let completedItems = gradableitems.filter(x => x.completed);\n        let earnedXp = completedItems.map(x => Number(x.xp)).reduce((a, b) => a + b, 0);\n        completedItems = completedItems.map(x => x.id);\n        let thisItem = gradableitems.find(x => x.id == id);\n        if (action == 'mark-done') {\n            completedItems.push(id.toString());\n            earnedXp += Number(thisItem.xp);\n        } else if (action == 'mark-undone') {\n            completedItems = completedItems.filter(x => x != id);\n            earnedXp -= Number(thisItem.xp);\n        }\n\n        let completed = 0;\n        if ((completedItems.length / gradableitems.length) * 100 >= Number(this.completionpercentage)) {\n            completed = 1;\n        }\n\n        return new Promise((resolve) => {\n            $.ajax({\n                url: M.cfg.wwwroot + '/mod/interactivevideo/ajax.php',\n                method: \"POST\",\n                dataType: \"text\",\n                data: {\n                    action: 'save_progress',\n                    sesskey: M.cfg.sesskey,\n                    id: this.interaction,\n                    uid: this.userid,\n                    percentage: (completedItems.length / gradableitems.length) * 100,\n                    g: parseFloat((earnedXp / totalXp) * this.grademax).toFixed(2),\n                    gradeiteminstance: this.gradeiteminstance,\n                    c: completed,\n                    xp: earnedXp,\n                    completeditems: JSON.stringify(completedItems),\n                    token: self.token,\n                    cmid: self.cm,\n                },\n                success: () => {\n                    // Update the annotations array.\n                    var annotations = this.annotations.map(x => {\n                        if (x.id == id) {\n                            x.completed = action == 'mark-done' ? true : false;\n                        }\n                        return x;\n                    });\n\n                    renderAnnotationItems(annotations, this.start, this.totaltime);\n\n                    this.completionCallback(annotations, thisItem, action, type);\n                    dispatchEvent('interactionCompletionUpdated', {\n                        annotations: annotations,\n                        completionpercentage: (completedItems.length / gradableitems.length) * 100,\n                        grade: parseFloat((earnedXp / totalXp) * this.grademax).toFixed(2),\n                        completed: completed,\n                        xp: earnedXp,\n                        completeditems: completedItems,\n                        target: thisItem,\n                        action: action,\n                        type: type\n                    });\n                    resolve();\n                }\n            });\n        });\n    }\n\n    /**\n     * Enable manual completion of item\n     * @returns {void}\n     */\n    enableManualCompletion() {\n        var self = this;\n        $(document).on('click', '#message button#completiontoggle', function (e) {\n            e.preventDefault();\n            e.stopImmediatePropagation();\n            $(this).attr('disabled', true);\n            $(this).find('i').removeClass('bi-check2 bi-circle').addClass('fa-spin bi-arrow-repeat');\n            $(this).find('span').hide();\n            // Get the completed items\n            var annoid = $(this).data('id');\n            self.toggleCompletion(annoid, $(this).hasClass('mark-done') ? 'mark-done' : 'mark-undone', 'manual');\n        });\n    }\n\n    /**\n     * What happens when an item runs\n     * @param {Object} annotation The annotation object\n     * @returns {void}\n     */\n    runInteraction(annotation) {\n        this.player.pause();\n        // Apply content.\n        const applyContent = (annotation) => {\n            this.render(annotation, 'html').then((data) => {\n                let $message = $(`#message[data-id='${annotation.id}']`);\n                $message.find(`.modal-body`).html(data);\n                $message.find(`.modal-body`).attr('id', 'content');\n                this.postContentRender(annotation);\n                this.interactionRunEvent(annotation, data);\n            });\n        };\n\n        this.renderViewer(annotation).then(() => {\n            this.renderContainer(annotation);\n            applyContent(annotation);\n        });\n\n        this.enableManualCompletion();\n\n        if (annotation.displayoptions == 'popup') {\n            let self = this;\n            $('#annotation-modal').on('shown.bs.modal', function () {\n                self.setModalDraggable('#annotation-modal .modal-dialog');\n            });\n        }\n\n    }\n\n    /**\n     * Data to show when the report viewer clicks on the completion checkmark\n     * @param {Object} annotation the current annotation\n     * @param {Number} userid the user id\n     * @returns {Promise}\n     */\n    getCompletionData(annotation, userid) {\n        return Promise.resolve({\n            annotation: annotation,\n            userid: userid\n        });\n    }\n\n    /**\n     * View when the report viewer clicks on the title of the interaction item on the report page\n     * @param {Object} annotation the annotation\n     * @returns {void}\n     */\n    displayReportView(annotation) {\n        this.render(annotation, 'html').then((data) => {\n            let $message = $(`#message[data-id='${annotation.id}']`);\n            $message.find(`.modal-body`).html(data);\n            $message.find(`.modal-body`).attr('id', 'content');\n            this.postContentRender(annotation);\n        });\n    }\n\n    /**\n     * Get the log data for multiple users from annotation_log table\n    * @param {Object} annotation the annotation\n     * @param {Array} userids array of user ids\n     * @returns {Promise}\n     */\n    getLogs(annotation, userids) {\n        let self = this;\n        return new Promise((resolve) => {\n            $.ajax({\n                url: M.cfg.wwwroot + '/mod/interactivevideo/ajax.php',\n                method: \"POST\",\n                dataType: \"text\",\n                data: {\n                    action: 'get_logs_by_userids',\n                    annotationid: annotation.id,\n                    contextid: M.cfg.contextid,\n                    userids: userids,\n                    sesskey: M.cfg.sesskey,\n                    token: self.token,\n                    cmid: self.cm,\n                },\n                success: (data) => {\n                    try {\n                        resolve(JSON.parse(data));\n                    } catch (error) {\n                        resolve([]);\n                    }\n                }\n            });\n        });\n    }\n\n\n}\n\nexport default Base;"],"names":["constructor","player","annotations","interaction","course","userid","completionpercentage","gradeiteminstance","grademax","vtype","preventskip","totaltime","start","end","properties","cm","token","prop","enableColorPicker","document","on","color","this","val","closest","css","find","formatContent","text","shorttext","render","annotation","format","Promise","resolve","addNotification","msg","type","init","isSkipped","timestamp","isInSkipSegment","isBetweenStartAndEnd","convertSecondsToHMS","s","hours","Math","floor","minutes","seconds","renderEditItem","listItem","item","removeAttr","removeClass","attr","addClass","id","formattedtitle","hascompletion","xp","remove","icon","title","Number","append","M","util","get_string","allowmultiple","appendTo","isAlreadyAdded","some","x","validateTimestampFormat","test","validateTimestampFieldValue","fld","hiddenfield","self","e","preventDefault","parts","split","message","seek","pause","addAnnotation","coursemodule","startHMS","endHMS","timestampHMS","data","timestampassist","contextid","cfg","name","courseid","cmid","annotationid","form","ModalForm","formClass","args","modalConfig","toLowerCase","modal","show","addEventListener","events","LOADED","setTimeout","onEditFormLoaded","error","draggable","handle","FORM_SUBMITTED","ajax","url","wwwroot","method","dataType","action","detail","sesskey","courseContextId","success","newAnnotation","JSON","parse","cloneAnnotation","editAnnotation","time","filter","done","updated","deleteAnnotation","interactionRunEvent","postEditCallback","runInteraction","isEditMode","hasClass","isClickable","advanced","clickablebeforecompleted","completed","clickableaftercompleted","isVisible","visiblebeforecompleted","visibleaftercompleted","renderItemOnVideoNavigation","percentage","renderViewer","renderContainer","postContentRender","postContentRenderEditor","setModalDraggable","elem","completionCallback","thisItem","$toggleButton","audio","toggleClass","Audio","play","toggleCompletion","gradableitems","totalXp","map","reduce","a","b","completedItems","earnedXp","push","toString","length","uid","g","parseFloat","toFixed","c","completeditems","stringify","grade","target","enableManualCompletion","stopImmediatePropagation","hide","annoid","applyContent","then","$message","html","displayoptions","getCompletionData","displayReportView","getLogs","userids"],"mappings":";;;;;;;8LA+BIA,YAAYC,OAAQC,YAAaC,YAAaC,OAAQC,OAAQC,qBAC1DC,kBAAmBC,SAAUC,MAAOC,YAAaC,UAAWC,MAAOC,IAAKC,WAAYC,GAAIC,YAMnFA,MAAQA,WAORD,GAAKA,QAQLd,OAASA,YAMTC,YAAcA,iBAMdC,YAAcA,iBAMdC,OAASA,YAMTC,OAASA,YAMTC,qBAAuBA,0BAMvBC,kBAAoBA,uBAMpBC,SAAWA,cAMXC,MAAQA,WAORC,YAAcA,iBAMdC,UAAYA,eAMZC,MAAQA,WAMRC,IAAMA,SAMNI,KAAOH,WAOhBI,wCACMC,UAAUC,GAAG,SAAU,uBAAuB,iBACtCC,OAAQ,mBAAEC,MAAMC,0BACpBD,MAAME,QAAQ,iBAAiBC,IAAI,mBAAoBJ,2BACvDC,MAAME,QAAQ,UAAUE,KAAK,sBAAsBH,IAAIF,UAIjEM,cAAcC,UAAMC,yEACT,8BAAWD,KAAMC,WAG5BC,OAAOC,gBAAYC,8DAAS,cACjB,IAAIC,SAASC,UAChBA,SAAQ,iCAAcH,WAAYC,YAI1CG,gBAAgBC,SAAKC,4DAAO,wBACfD,IAAK,CAAEC,KAAAA,OAMpBC,QAQAC,UAAUC,kBACClB,KAAKmB,gBAAgBD,aAAelB,KAAKoB,qBAAqBF,WAGzEG,oBAAoBC,SACVC,MAAQC,KAAKC,MAAMH,EAAI,MACvBI,QAAUF,KAAKC,MAAMH,EAAI,KAAO,IAChCK,QAAUH,KAAKC,MAAMH,EAAI,KAAO,WAC9BC,MAAQ,GAAK,IAAMA,MAAQA,OAAS,KACvCG,QAAU,GAAK,IAAMA,QAAUA,SAAW,KAC1CC,QAAU,GAAK,IAAMA,QAAUA,SAUxCC,eAAehD,YAAaiD,SAAUC,kBAC7BlD,YAAcA,YACnBiD,SAASE,WAAW,MAAMC,YAAY,UACtCH,SAASI,KAAK,YAAaH,KAAKf,MAChCc,SAASK,SAASJ,KAAKf,MAAQf,KAAKiB,UAAUa,KAAKZ,WAAa,WAAa,KAC7EW,SAASI,KAAK,iBAAkBH,KAAKZ,WAChCe,KAAK,UAAWH,KAAKK,IAE1BN,SAASzB,KAAK,cAAcE,KAAKN,KAAKqB,oBAAoBS,KAAKZ,YAC1De,KAAK,iBAAkBH,KAAKZ,WAEjCW,SAASzB,KAAK,UAAUE,KAAKwB,KAAKM,gBAC9BpC,KAAKL,KAAK0C,eACVR,SAASzB,KAAK,gBAAgBE,KAAKwB,KAAKQ,IACxCT,SAASI,KAAK,UAAWH,KAAKQ,KAE9BT,SAASzB,KAAK,WAAWmC,SAG7BV,SAASzB,KAAK,gBAAgB8B,SAASlC,KAAKL,KAAK6C,MACjDX,SAASzB,KAAK,cAAc6B,KAAK,QAASjC,KAAKL,KAAK8C,QAEhDC,OAAOZ,KAAKZ,WAAalB,KAAKT,KAAOmD,OAAOZ,KAAKZ,WAAalB,KAAKV,OAASU,KAAKiB,UAAUa,KAAKZ,cAChGW,SAASzB,KAAK,UAAU8B,SAAS,kBACjCL,SAASI,KAAK,UAAW,GAEzBJ,SAASzB,KAAK,UACTuC,OAAQ,wEACKC,EAAEC,KAAKC,WAAW,UAAW,mCAGnDjB,SAASzB,KAAK,gBAAgB6B,KAAK,UAAWH,KAAKK,IACnDN,SAASzB,KAAK,qBAAqBH,IAAI6B,KAAKQ,IAC5CT,SAASzB,KAAK,wBAAwBH,IAAI6B,KAAKW,OAC/CZ,SAASzB,KAAK,4BAA4BH,IAAID,KAAKqB,oBAAoBS,KAAKZ,YACvElB,KAAKL,KAAKoD,eACXlB,SAASzB,KAAK,aAAamC,SAE/BV,SAASmB,SAAS,oBACXnB,SAQXT,qBAAqBF,kBACVA,WAAalB,KAAKT,KAAO2B,WAAalB,KAAKV,MAQtD2D,eAAe/B,kBACJlB,KAAKpB,YAAYsE,MAAKC,GAAKA,EAAEjC,WAAaA,YAQrDC,gBAAgBD,kBACLlB,KAAKpB,YAAYsE,MAAKC,GAAe,eAAVA,EAAEpC,MAC7B2B,OAAOS,EAAEjC,WAAawB,OAAOxB,YAAcwB,OAAOS,EAAEV,OAASC,OAAOxB,aAQ/EkC,wBAAwBlC,iBACN,yCACDmC,KAAKnC,WAStBoC,4BAA4BC,IAAKC,iBACzBC,KAAOzD,yBACTH,UAAUC,GAAG,SAAW,cAAayD,QAAQ,SAAUG,MACrDA,EAAEC,kBAEGF,KAAKL,yBAAwB,mBAAEpD,MAAMC,cACtCwD,KAAK5C,gBAAgB+B,EAAEC,KAAKC,WAAW,yBAA0B,iDAC/D9C,MAAMC,KAAI,mBAAED,MAAMiC,KAAK,2BAKzB2B,OAAQ,mBAAE5D,MAAMC,MAAM4D,MAAM,KAC5B3C,UAA+B,KAAnBwB,OAAOkB,MAAM,IAAgC,GAAnBlB,OAAOkB,MAAM,IAAWlB,OAAOkB,MAAM,QAC1EH,KAAKrC,qBAAqBF,WAAY,KACnC4C,QAAUlB,EAAEC,KAAKC,WAAW,mCAAoC,uBAAwB,OAC/EW,KAAKpC,oBAAoBoC,KAAKnE,WAChCmE,KAAKpC,oBAAoBoC,KAAKlE,cAEzCkE,KAAK5C,gBAAgBiD,iCACnB9D,MAAMC,KAAI,mBAAED,MAAMiC,KAAK,8BAKzBwB,KAAKR,eAAe/B,YACpBuC,KAAK5C,gBAAgB+B,EAAEC,KAAKC,WAAW,2BAA4B,iDACjE9C,MAAMC,KAAI,mBAAED,MAAMiC,KAAK,wBAKzBwB,KAAKtC,gBAAgBD,YACrBuC,KAAK5C,gBAAgB+B,EAAEC,KAAKC,WAAW,qCAAsC,iDAC3E9C,MAAMC,KAAI,mBAAED,MAAMiC,KAAK,6CAI1B,cAAauB,gBAAgBvD,IAAIiB,WAEpCuC,KAAK9E,OAAOoF,KAAK7C,WAAW,QAE5BuC,KAAK9E,OAAOqF,YAWpBC,cAAcrF,YAAasC,UAAWgD,kBAC9BT,KAAOzD,aACNpB,YAAcA,aACdoB,KAAKoB,qBAAqBF,WAAY,KACnC4C,QAAUlB,EAAEC,KAAKC,WAAW,kDAAmD,uBAAwB,OAC9FW,KAAKpC,oBAAoBoC,KAAKnE,WAChCmE,KAAKpC,oBAAoBoC,KAAKlE,mBAEzCkE,KAAK5C,gBAAgBiD,YAIrBL,KAAKR,eAAe/B,uBACpBuC,KAAK5C,gBAAgB+B,EAAEC,KAAKC,WAAW,2BAA4B,4BAInEW,KAAKtC,gBAAgBD,uBACrBuC,KAAK5C,gBAAgB+B,EAAEC,KAAKC,WAAW,qCAAsC,+BAI3EqB,SAAWV,KAAKpC,oBAAoBoC,KAAKnE,OACzC8E,OAASX,KAAKpC,oBAAoBoC,KAAKlE,KACvC8E,aAAenD,UAAY,EAAIuC,KAAKpC,oBAAoBH,WAAaiD,SAErEG,KAAO,CACTnC,GAAI,EACJjB,UAAWA,UAAY,EAAIA,UAAYuC,KAAKnE,MAC5CiF,gBAAiBF,aACjB/E,MAAO6E,SACP5E,IAAK6E,OACLI,UAAW5B,EAAE6B,IAAID,UACjBzD,KAAM0C,KAAK9D,KAAK+E,KAChBC,SAAUlB,KAAK3E,OACf8F,KAAMV,aACNW,aAAcpB,KAAK5E,YACnBwD,cAAeoB,KAAK9D,KAAK0C,cAAgB,EAAI,OAG7CyC,KAAO,IAAIC,mBAAU,CACrBC,UAAWvB,KAAK9D,KAAKmF,KACrBG,KAAMX,KACNY,YAAa,CACTzC,MAAOG,EAAEC,KAAKC,WAAW,sBAAuB,uBAAwB,MAC5DW,KAAK9D,KAAK8C,MAAM0C,mBAChBd,sCAIlB,iBAAiBe,MAAM,4BACvB,yBAAyBpD,YAAY,UACvC8C,KAAKO,OAELP,KAAKQ,iBAAiBR,KAAKS,OAAOC,QAAS9B,IACvC+B,YAAW,yBACL,QAAQvD,SAAS,gBACpB,SAECuB,KAAKiC,iBAAiBZ,KAAMpB,GAC9B,MAAOiC,QAGTlC,KAAKH,4BAA4B,kBAAmB,aAGpDwB,KAAKM,MAAMA,MAAMQ,UAAU,CACvBC,OAAQ,qBAIhBf,KAAKQ,iBAAiBR,KAAKS,OAAOO,gBAAiBpC,oBAC7CqC,KAAK,CACHC,IAAKpD,EAAE6B,IAAIwB,QAAU,iCACrBC,OAAQ,OACRC,SAAU,OACV7B,KAAM,CACF8B,OAAQ,WACRjE,GAAIuB,EAAE2C,OAAOlE,GACbmE,QAAS1D,EAAE6B,IAAI6B,QACf9B,UAAW5B,EAAE6B,IAAI8B,gBACjB7G,MAAO+D,KAAK/D,MACZkF,KAAMnB,KAAKhE,IAEf+G,QAAS,SAAUlC,UACXmC,cAAgBC,KAAKC,MAAMrC,0CACjB,oBAAqB,CAC/B7D,WAAYgG,cACZL,OAAQ,cAY5BQ,gBAAgBzE,oBACV4D,KAAK,CACHC,IAAKpD,EAAE6B,IAAIwB,QAAU,iCACrBC,OAAQ,OACRC,SAAU,OACV7B,KAAM,CACF8B,OAAQ,YACRjE,GAAIA,GACJmE,QAAS1D,EAAE6B,IAAI6B,QACf9B,UAAW5B,EAAE6B,IAAID,UACjB9E,MAAOM,KAAKN,MACZkF,KAAM5E,KAAKP,IAEf+G,QAAS,SAAUlC,UACXmC,cAAgBC,KAAKC,MAAMrC,0CACjB,oBAAqB,CAC/B7D,WAAYgG,cACZL,OAAQ,aAYxBS,eAAejI,YAAauD,SACnBvD,YAAcA,gBACf6E,KAAOzD,WACLS,WAAa7B,YAAYwB,MAAK+C,GAAKA,EAAEhB,IAAMA,KAC3CjB,UAAYT,WAAWS,UACvBqD,gBAAkBvE,KAAKqB,oBAAoBH,WAEjDT,WAAW8D,gBAAkBA,gBAC7B9D,WAAWnB,MAAQU,KAAKqB,oBAAoBrB,KAAKV,OACjDmB,WAAWlB,IAAMS,KAAKqB,oBAAoBrB,KAAKT,KAC/CkB,WAAW4B,cAAgBrC,KAAKL,KAAK0C,cAAgB,EAAI,EACzD5B,WAAW+D,UAAY5B,EAAE6B,IAAID,gBAEvB/B,MAA4B,gBAApBhC,WAAWM,KACnB6B,EAAEC,KAAKC,WAAW,qBAAsB,wBAAwBqC,cAChE1E,WAAW2B,eAEX0C,KAAO,IAAIC,mBAAU,CACvBC,UAAWhF,KAAKL,KAAKmF,KACrBG,KAAMxE,WACNyE,YAAa,CACTzC,MAAOG,EAAEC,KAAKC,WAAW,uBAAwB,uBAAwB,CACrE4B,KAAMjC,MACNqE,KAAMvC,qBAKlBO,KAAKO,OAELP,KAAKQ,iBAAiBR,KAAKS,OAAOC,QAAS9B,aAE9BgC,iBAAiBZ,KAAMpB,GAC9B,MAAOiC,aAGJrC,4BAA4B,kBAAmB,aAGpDwB,KAAKM,MAAMA,MAAMQ,UAAU,CACvBC,OAAQ,qBAIhBf,KAAKQ,iBAAiBR,KAAKS,OAAOO,gBAAiBpC,SAC1C9E,YAAcoB,KAAKpB,YAAYmI,QAAO5D,GAAKA,EAAEhB,IAAMA,qBACtD4D,KAAK,CACHC,IAAKpD,EAAE6B,IAAIwB,QAAU,iCACrBC,OAAQ,OACRC,SAAU,OACV7B,KAAM,CACF8B,OAAQ,WACRjE,GAAIuB,EAAE2C,OAAOlE,GACbmE,QAAS1D,EAAE6B,IAAI6B,QACf9B,UAAW5B,EAAE6B,IAAI8B,gBACjB7G,MAAO+D,KAAK/D,MACZkF,KAAMnB,KAAKhE,MAEhBuH,MAAK,SAAU1C,UACV2C,QAAUP,KAAKC,MAAMrC,0CACX,oBAAqB,CAC/B7D,WAAYwG,QACZb,OAAQ,eAYxBc,iBAAiBtI,YAAauD,SACrBvD,YAAcA,kBACb6B,WAAaT,KAAKpB,YAAYwB,MAAK+C,GAAKA,EAAEhB,IAAMA,qBACpD4D,KAAK,CACHC,IAAKpD,EAAE6B,IAAIwB,QAAU,iCACrBC,OAAQ,OACRC,SAAU,OACV7B,KAAM,CACF8B,OAAQ,cACRE,QAAS1D,EAAE6B,IAAI6B,QACfnE,GAAIA,GACJqC,UAAW5B,EAAE6B,IAAID,UACjB9E,MAAOM,KAAKN,MACZkF,KAAM5E,KAAKP,IAEf+G,QAAS,+CACS,oBAAqB,CAC/B/F,WAAYA,gBAW5B0G,oBAAoB1G,WAAY6D,0CACd,iBAAkB,CAC5B7D,WAAYA,WACZ6D,KAAMA,OASdoB,iBAAiBZ,aACNA,KAAKM,MAAMA,MAAMhF,KAAK,eAQjCgH,iBAAiB3G,mBACNT,KAAKqH,eAAe5G,YAO/B6G,oBACW,mBAAE,QAAQC,SAAS,qBAQ9BC,YAAY/G,eACJT,KAAKsH,oBACE,QAELG,SAAWf,KAAKC,MAAMlG,WAAWgH,gBACM,KAArCA,SAASC,2BAAoCjH,WAAWkH,WACpB,KAApCF,SAASG,yBAAkCnH,WAAWkH,UAQlEE,UAAUpH,eACFT,KAAKsH,oBACE,QAELG,SAAWf,KAAKC,MAAMlG,WAAWgH,gBACI,KAAnCA,SAASK,yBAAkCrH,WAAWkH,WACpB,KAAlCF,SAASM,uBAAgCtH,WAAWkH,UAQhEK,4BAA4BvH,eACpBA,WAAWS,UAAYlB,KAAKV,OAASmB,WAAWS,UAAYlB,KAAKT,iBAG/D0I,YAAevF,OAAOjC,WAAWS,WAAalB,KAAKV,OAASU,KAAKX,UAAa,IAChFW,KAAK6H,UAAUpH,iCACb,iBAAiBkC,OAAQ,yBAAwBlC,WAAWkH,UAAY,YAAc,eAC1FlH,WAAWM,QAAQf,KAAKwH,YAAY/G,YAAc,GAAK,8CACtDT,KAAKiB,UAAUR,WAAWS,WAAa,UAAY,wBAAwBT,WAAWS,gCAC9ET,WAAW0B,yBAAyB8F,sMAE6CjI,KAAKL,KAAK6C,4BACpG/B,WAAW2B,+BASjB8F,aAAazH,mBACF,IAAIE,SAASC,UAChBA,SAAQ,yCAAsBH,WAAYT,KAAKrB,OAAQqB,KAAKV,MAAOU,KAAKT,SAOhF4I,mBAQAC,qBAOAC,2BAQAC,kBAAkBC,0BACZA,MAAM3C,UAAU,CACdC,OAAQ,kBAWhB2C,mBAAmB5J,YAAa6J,SAAUrC,OAAQrF,YAExC2H,eADW,mBAAG,qBAAoBD,SAAStG,QAClB/B,KAAM,yBAWjCuI,YAVQ,UAAR5H,MACA2H,cAAc/I,KAAK,YAAY,GAC/B+I,cAActI,KAAM,KACf4B,YAAY,2BACZE,SAAmB,aAAVkE,OAAwB,YAAc,aACpDsC,cAActI,KAAM,QAAOiF,QACZ,aAARtE,MACP2H,cAActI,KAAM,KAAIwI,YAAY,uBAI1B,aAAVxC,QACAsC,cACK1G,YAAY,2BACZE,SAAS,2BAEdyG,MAAQ,IAAIE,MAAMjG,EAAE6B,IAAIwB,QAAU,kDAClC0C,MAAMG,QACW,eAAV1C,SACPsC,cACK1G,YAAY,2BAA2BE,SAAS,2BAErDyG,MAAQ,IAAIE,MAAMjG,EAAE6B,IAAIwB,QAAU,wCAClC0C,MAAMG,QAIVJ,cAActI,KAAM,QAAOE,KAAK,IAC5BmI,SAASnG,GAAK,IACA,eAAV8D,YACKvF,gBAAgB+B,EAAEC,KAAKC,WAAW,SAAU,uBAAwB2F,SAASnG,IAAK,QACtE,aAAV8D,aACFvF,gBAAgB+B,EAAEC,KAAKC,WAAW,WAAY,uBAAwB2F,SAASnG,IAAK,YAIrF,UAARvB,KACc,aAAVqF,OACAsC,cAActI,KAAM,QACfE,KAAM,GAAEsC,EAAEC,KAAKC,WAAW,2BAA4B,2BAC1C,eAAVsD,QACPsC,cAActI,KAAM,QACfE,KAAM,GAAEsC,EAAEC,KAAKC,WAAW,yBAA0B,2BAE9C,aAAR/B,OACO,aAAVqF,OACAsC,cAActI,KAAM,QACfE,KAAM,GAAEsC,EAAEC,KAAKC,WAAW,sBAAuB,2BACrC,eAAVsD,QACPsC,cAActI,KAAM,QACfE,KAAM,GAAEsC,EAAEC,KAAKC,WAAW,uBAAwB,4BAGxD,OAUXiG,iBAAiB5G,GAAIiE,YAAQrF,4DAAO,SAC5B0C,KAAOzD,QAEPA,KAAKsH,oBACE3G,QAAQC,gBAGboI,cAAgBhJ,KAAKpB,YAAYmI,QAAO5D,GAAwB,KAAnBA,EAAEd,gBAE/C4G,QAAUD,cAAcE,KAAI/F,GAAKT,OAAOS,EAAEb,MAAK6G,QAAO,CAACC,EAAGC,IAAMD,EAAIC,GAAG,OACzEC,eAAiBN,cAAcjC,QAAO5D,GAAKA,EAAEwE,YAC7C4B,SAAWD,eAAeJ,KAAI/F,GAAKT,OAAOS,EAAEb,MAAK6G,QAAO,CAACC,EAAGC,IAAMD,EAAIC,GAAG,GAC7EC,eAAiBA,eAAeJ,KAAI/F,GAAKA,EAAEhB,SACvCsG,SAAWO,cAAc5I,MAAK+C,GAAKA,EAAEhB,IAAMA,KACjC,aAAViE,QACAkD,eAAeE,KAAKrH,GAAGsH,YACvBF,UAAY7G,OAAO+F,SAASnG,KACX,eAAV8D,SACPkD,eAAiBA,eAAevC,QAAO5D,GAAKA,GAAKhB,KACjDoH,UAAY7G,OAAO+F,SAASnG,SAG5BqF,UAAY,SACX2B,eAAeI,OAASV,cAAcU,OAAU,KAAOhH,OAAO1C,KAAKhB,wBACpE2I,UAAY,GAGT,IAAIhH,SAASC,0BACdmF,KAAK,CACHC,IAAKpD,EAAE6B,IAAIwB,QAAU,iCACrBC,OAAQ,OACRC,SAAU,OACV7B,KAAM,CACF8B,OAAQ,gBACRE,QAAS1D,EAAE6B,IAAI6B,QACfnE,GAAInC,KAAKnB,YACT8K,IAAK3J,KAAKjB,OACVkJ,WAAaqB,eAAeI,OAASV,cAAcU,OAAU,IAC7DE,EAAGC,WAAYN,SAAWN,QAAWjJ,KAAKd,UAAU4K,QAAQ,GAC5D7K,kBAAmBe,KAAKf,kBACxB8K,EAAGpC,UACHrF,GAAIiH,SACJS,eAAgBtD,KAAKuD,UAAUX,gBAC/B5J,MAAO+D,KAAK/D,MACZkF,KAAMnB,KAAKhE,IAEf+G,QAAS,SAED5H,YAAcoB,KAAKpB,YAAYsK,KAAI/F,IAC/BA,EAAEhB,IAAMA,KACRgB,EAAEwE,UAAsB,aAAVvB,QAEXjD,+CAGWvE,YAAaoB,KAAKV,MAAOU,KAAKX,gBAE/CmJ,mBAAmB5J,YAAa6J,SAAUrC,OAAQrF,0CACzC,+BAAgC,CAC1CnC,YAAaA,YACbI,qBAAuBsK,eAAeI,OAASV,cAAcU,OAAU,IACvEQ,MAAOL,WAAYN,SAAWN,QAAWjJ,KAAKd,UAAU4K,QAAQ,GAChEnC,UAAWA,UACXrF,GAAIiH,SACJS,eAAgBV,eAChBa,OAAQ1B,SACRrC,OAAQA,OACRrF,KAAMA,OAEVH,gBAUhBwJ,6BACQ3G,KAAOzD,yBACTH,UAAUC,GAAG,QAAS,oCAAoC,SAAU4D,GAClEA,EAAEC,iBACFD,EAAE2G,+CACArK,MAAMiC,KAAK,YAAY,uBACvBjC,MAAMI,KAAK,KAAK4B,YAAY,uBAAuBE,SAAS,+CAC5DlC,MAAMI,KAAK,QAAQkK,WAEjBC,QAAS,mBAAEvK,MAAMsE,KAAK,MAC1Bb,KAAKsF,iBAAiBwB,QAAQ,mBAAEvK,MAAMuH,SAAS,aAAe,YAAc,cAAe,aASnGF,eAAe5G,iBACN9B,OAAOqF,cAENwG,aAAgB/J,kBACbD,OAAOC,WAAY,QAAQgK,MAAMnG,WAC9BoG,UAAW,mBAAG,qBAAoBjK,WAAW0B,QACjDuI,SAAStK,KAAM,eAAcuK,KAAKrG,MAClCoG,SAAStK,KAAM,eAAc6B,KAAK,KAAM,gBACnCmG,kBAAkB3H,iBAClB0G,oBAAoB1G,WAAY6D,kBAIxC4D,aAAazH,YAAYgK,MAAK,UAC1BtC,gBAAgB1H,YACrB+J,aAAa/J,oBAGZ2J,yBAE4B,SAA7B3J,WAAWmK,eAA2B,KAClCnH,KAAOzD,yBACT,qBAAqBF,GAAG,kBAAkB,WACxC2D,KAAK6E,kBAAkB,uCAYnCuC,kBAAkBpK,WAAY1B,eACnB4B,QAAQC,QAAQ,CACnBH,WAAYA,WACZ1B,OAAQA,SAShB+L,kBAAkBrK,iBACTD,OAAOC,WAAY,QAAQgK,MAAMnG,WAC9BoG,UAAW,mBAAG,qBAAoBjK,WAAW0B,QACjDuI,SAAStK,KAAM,eAAcuK,KAAKrG,MAClCoG,SAAStK,KAAM,eAAc6B,KAAK,KAAM,gBACnCmG,kBAAkB3H,eAU/BsK,QAAQtK,WAAYuK,aACZvH,KAAOzD,YACJ,IAAIW,SAASC,0BACdmF,KAAK,CACHC,IAAKpD,EAAE6B,IAAIwB,QAAU,iCACrBC,OAAQ,OACRC,SAAU,OACV7B,KAAM,CACF8B,OAAQ,sBACRvB,aAAcpE,WAAW0B,GACzBqC,UAAW5B,EAAE6B,IAAID,UACjBwG,QAASA,QACT1E,QAAS1D,EAAE6B,IAAI6B,QACf5G,MAAO+D,KAAK/D,MACZkF,KAAMnB,KAAKhE,IAEf+G,QAAUlC,WAEF1D,QAAQ8F,KAAKC,MAAMrC,OACrB,MAAOqB,OACL/E,QAAQ"}