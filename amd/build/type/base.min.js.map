{"version":3,"file":"base.min.js","sources":["../../src/type/base.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Base class to be extended by other content types\n *\n * @module     mod_interactivevideo/type/base\n * @copyright  2024 Sokunthearith Makara <sokunthearithmakara@gmail.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\nimport $ from 'jquery';\nimport {renderContent, defaultDisplayContent, formatText} from 'mod_interactivevideo/displaycontent';\nimport {renderAnnotationItems} from 'mod_interactivevideo/viewannotation';\nimport {dispatchEvent} from 'core/event_dispatcher';\nimport {add as addToast} from 'core/toast';\nimport ModalForm from 'core_form/modalform';\nimport 'mod_interactivevideo/libraries/jquery-ui';\n\nclass Base {\n    /**\n     * Creates an instance of the base class for interactive video.\n     *\n     * @param {Object} player - The player object.\n     * @param {Array} annotations - The annotations object.\n     * @param {number} interaction - The interaction id.\n     * @param {number} course - The course id.\n     * @param {number} userid - The user id.\n     * @param {number} completionpercentage - The required completion percentage set in the activity settings.\n     * @param {number} gradeiteminstance - The grade item instance id.\n     * @param {number} grademax - The maximum grade set in the activity settings.\n     * @param {string} vtype - The video type (yt, vimeo, dailymotion, html4video).\n     * @param {boolean} preventskip - Prevent skipping of the video.\n     * @param {number} totaltime - The total time of the video in seconds including the skipped segments.\n     * @param {number} start - The start time of the video.\n     * @param {number} end - The end time of the video.\n     * @param {Object} properties - Properties of the interaction type defined in the PHP class.\n     * @param {number} cm - The course module id.\n     * @param {string} token - Access token.\n     * @param {Object} displayoptions - Display options.\n     * @param {number} completionid - Completion record id.\n     *\n     */\n    constructor(player, annotations, interaction, course, userid, completionpercentage, gradeiteminstance, grademax, vtype,\n        preventskip, totaltime, start, end, properties, cm, token, displayoptions, completionid) {\n        /**\n         * Access token\n         * @type {string}\n         * @private\n         */\n        this.token = token;\n\n        /**\n         * The course module id\n         * @type {number}\n         * @private\n         */\n        this.cm = cm;\n\n        /**\n         * The player object\n         * @type {Object}\n         * @private\n         */\n\n        this.player = player;\n        /**\n         * The annotations object\n         * @type {Array}\n         * @private\n         */\n        this.annotations = annotations;\n        /**\n         * The interaction id\n         * @type {number}\n         * @private\n         */\n        this.interaction = interaction;\n        /**\n         * The course id\n         * @type {number}\n         * @private\n         */\n        this.course = course;\n        /**\n         * The user id\n         * @type {number}\n         * @private\n         */\n        this.userid = userid;\n        /**\n         * The required completion percentage set in the activity settings\n         * @type {number}\n         * @private\n         */\n        this.completionpercentage = completionpercentage;\n        /**\n         * The grade item instance id\n         * @type {number}\n         * @private\n         */\n        this.gradeiteminstance = gradeiteminstance;\n        /**\n         * The maximum grade set in the activity settings\n         * @type {number}\n         * @private\n         */\n        this.grademax = grademax;\n        /**\n         * The video type\n         * @type {string} (yt, vimeo, dailymotion, html4video)\n         * @private\n         */\n        this.vtype = vtype;\n        /**\n         * Prevent skipping of the video\n         * @type {boolean}\n         * @private\n         * @default false\n         */\n        this.preventskip = preventskip;\n        /**\n         * The total time of the video in seconds including the skipped segments.\n         * @type {number}\n         * @private\n         */\n        this.totaltime = totaltime;\n        /**\n         * The start time of the video\n         * @type {number}\n         * @private\n         */\n        this.start = start;\n        /**\n         * The end time of the video\n         * @type {number}\n         * @private\n         */\n        this.end = end;\n        /**\n         * Properties of the interaction type defined in the php class\n         * @type {Object}\n         * @private\n         */\n        this.prop = properties;\n        /**\n         * Display options\n         * @type {Object}\n         * @private\n         */\n        this.displayoptions = displayoptions;\n        /**\n         * Completion id\n         * @type {number}\n         */\n        this.completionid = Number(completionid);\n    }\n\n    /**\n     * Enable the HTML5 color picker in form elements\n     * @returns {void}\n     */\n    enableColorPicker() {\n        $(document).on('input', 'input[type=\"color\"]', function() {\n            const color = $(this).val();\n            $(this).closest('.color-picker').css('background-color', color);\n            $(this).closest('.fitem').find('input[type=\"text\"]').val(color);\n        });\n        $(document).on('change', 'input[type=\"color\"]', function() {\n            $('.modal-backdrop').removeClass('opacity-0');\n        });\n        $(document).off('click', '.modal input[type=\"color\"]').on('click', '.modal input[type=\"color\"]', function() {\n            $('.modal-backdrop').addClass('opacity-0');\n        });\n    }\n\n    /**\n     * Formats the given text content.\n     *\n     * @param {string} text - The text content to format.\n     * @param {boolean} [shorttext=false] - Optional flag to indicate if the text should be formatted as short text.\n     * @returns {string} The formatted text.\n     */\n    formatContent(text, shorttext = false) {\n        return formatText(text, shorttext);\n    }\n\n    /**\n     * Renders the given annotation in the specified format.\n     *\n     * @param {Object} annotation - The annotation object to render.\n     * @param {string} [format='html'] - The format in which to render the annotation. Defaults to 'html'.\n     * @returns {promise} The rendered content.\n     */\n    async render(annotation, format = 'html') {\n        return renderContent(annotation, format);\n    }\n\n    /**\n     * Adds a notification with a specified message and type.\n     *\n     * @param {string} msg - The message to be displayed in the notification.\n     * @param {string} [type='danger'] - The type of the notification (e.g., 'success', 'info', 'warning', 'danger').\n     */\n    addNotification(msg, type = 'danger') {\n        addToast(msg, {type});\n    }\n    /**\n     * Initialize the interaction type\n     * @returns {void}\n     */\n    init() {\n        // Do nothing.\n    }\n    /**\n     * Check if the interaction is skipped\n     * @param {number} timestamp The timestamp of the interaction\n     * @returns {boolean}\n     */\n    isSkipped(timestamp) {\n        return this.isInSkipSegment(timestamp) || !this.isBetweenStartAndEnd(timestamp);\n    }\n\n    /**\n     * Converts a given number of seconds into a formatted string (HH:MM:SS).\n     *\n     * @param {number} s - The number of seconds to convert.\n     * @param {boolean} [dynamic=false] - If true, omits the hours part if less than 1 hour.\n     * @param {boolean} [rounded=false] - If true, rounds the seconds to the nearest whole number.\n     * @returns {string} The formatted time string.\n     */\n    convertSecondsToHMS(s, dynamic = false, rounded = false) {\n        if (rounded) {\n            s = Math.round(s);\n        }\n        const hours = Math.floor(s / 3600).toString().padStart(2, '0');\n        const minutes = Math.floor((s % 3600) / 60).toString().padStart(2, '0');\n        let seconds = (s % 60).toFixed(2);\n        if (seconds < 10) {\n            seconds = '0' + seconds;\n        }\n        if (rounded) {\n            seconds = Math.floor(s % 60).toString().padStart(2, '0');\n        }\n        if (dynamic && (s / 3600) < 1) {\n            return `${minutes}:${seconds}`;\n        }\n        return `${hours}:${minutes}:${seconds}`;\n    }\n\n    /**\n     * Render edit items\n     * @param {Array} annotations The annotations array\n     * @param {Object} listItem The list item\n     * @param {Object} item The annotation object\n     * @returns {void}\n     */\n    renderEditItem(annotations, listItem, item) {\n        this.annotations = annotations;\n        listItem.removeAttr('id').removeClass('d-none');\n        listItem.attr('data-type', item.type);\n        listItem.addClass(item.type + (this.isSkipped(item.timestamp) ? ' skipped' : ''));\n        listItem.attr('data-timestamp', item.timestamp)\n            .attr('data-id', item.id);\n\n        listItem.find('.timestamp').text(this.convertSecondsToHMS(item.timestamp, this.totaltime < 3600, true))\n            .attr('data-timestamp', item.timestamp);\n\n        listItem.find('.title').text(item.formattedtitle);\n        if (item.hascompletion == 1) {\n            listItem.find('.btn.xp span').text(item.xp);\n            listItem.attr('data-xp', item.xp);\n        } else {\n            listItem.find('.btn.xp').remove();\n        }\n\n        listItem.find('.type-icon i').addClass(this.prop.icon);\n        listItem.find('.type-icon').attr('title', this.prop.title);\n        // If out of range, make the title text grey\n        if (Number(item.timestamp) > this.end || Number(item.timestamp) < this.start || this.isSkipped(item.timestamp)) {\n            listItem.find('.title').addClass('text-secondary');\n            listItem.attr('data-xp', 0);\n            // Append a badge to the title\n            listItem.find('.title')\n                .append(`<span class=\"badge badge-warning ml-2\">\n                            ${M.util.get_string('skipped', 'mod_interactivevideo')}</span>`);\n        }\n\n        listItem.find('[data-field]').attr('data-id', item.id);\n        listItem.find('[data-field=\"xp\"]').val(item.xp);\n        listItem.find('[data-field=\"title\"]').val(item.title);\n        listItem.find('[data-field=\"timestamp\"]').val(this.convertSecondsToHMS(item.timestamp));\n        if (!this.prop.allowmultiple) {\n            listItem.find('.btn.copy').remove();\n        }\n        listItem.appendTo('#annotation-list');\n        return listItem;\n    }\n\n    /**\n     * Check if the timestamp is between the start and end\n     * @param {number} timestamp The timestamp\n     * @returns {boolean}\n     */\n    isBetweenStartAndEnd(timestamp) {\n        return timestamp <= this.end && timestamp >= this.start;\n    }\n\n    /**\n     * Check if the annotation is already added at the timestamp\n     * @param {number} timestamp The timestamp\n     * @returns {boolean}\n     */\n    isAlreadyAdded(timestamp) {\n        return this.annotations.some(x => x.timestamp == timestamp);\n    }\n\n    /**\n     * Check if the annotation is in the skip segment\n     * @param {number} timestamp The timestamp\n     * @returns {boolean}\n     */\n    isInSkipSegment(timestamp) {\n        return this.annotations.some(x => x.type == 'skipsegment' &&\n            Number(x.timestamp) < Number(timestamp) && Number(x.title) > Number(timestamp));\n    }\n\n    /**\n     * Validate the timestamp format\n     * @param {string} timestamp The timestamp\n     * @returns {boolean}\n     */\n    validateTimestampFormat(timestamp) {\n        return /^([0-9]{2}):([0-5][0-9]):([0-5][0-9])(\\.\\d{2})?$/.test(timestamp);\n    }\n\n    /**\n     * Validate the timestamp\n     * @param {string} fld The field\n     * @param {string} hiddenfield The hidden field\n     * @returns {void}\n     */\n    validateTimestampFieldValue(fld, hiddenfield) {\n        const self = this;\n        $(document).on('change', `form [name=${fld}]`, function(e) {\n            e.preventDefault();\n            // Make sure the timestamp format is hh:mm:ss.\n            if (!self.validateTimestampFormat($(this).val())) {\n                self.addNotification(M.util.get_string('invalidtimestampformat', 'mod_interactivevideo'));\n                $(this).val($(this).attr('data-initial-value'));\n                return;\n            }\n\n            // Make sure the timestamp is between the start and end time.\n            var parts = $(this).val().split(':');\n            var timestamp = Number(parts[0]) * 3600 + Number(parts[1]) * 60 + Number(parts[2]);\n            if (!self.isBetweenStartAndEnd(timestamp)) {\n                var message = M.util.get_string('timemustbebetweenstartandendtime', 'mod_interactivevideo', {\n                    \"start\": self.convertSecondsToHMS(self.start),\n                    \"end\": self.convertSecondsToHMS(self.end),\n                });\n                self.addNotification(message);\n                $(this).val($(this).attr('data-initial-value'));\n                return;\n            }\n\n            // Make sure the timestamp does not already exist.\n            if (self.isAlreadyAdded(timestamp)) {\n                self.addNotification(M.util.get_string('interactionalreadyexists', 'mod_interactivevideo'));\n                $(this).val($(this).attr('data-initial-value'));\n                return;\n            }\n\n            // Make sure the timestamp is not in the skip segment.\n            if (self.isInSkipSegment(timestamp)) {\n                self.addNotification(M.util.get_string('interactionisbetweentheskipsegment', 'mod_interactivevideo'));\n                $(this).val($(this).attr('data-initial-value'));\n                return;\n            }\n\n            $(`form [name=${hiddenfield}]`).val(timestamp);\n\n            self.player.seek(timestamp, true);\n            // Make sure the video is paused.\n            self.player.pause();\n        });\n    }\n\n    /**\n     * Add an annotation\n     * @param {Array} annotations The annotations array\n     * @param {number} timestamp The timestamp\n     * @param {number} coursemodule The course module id\n     * @returns {void}\n     */\n    addAnnotation(annotations, timestamp, coursemodule) {\n        var self = this;\n        this.annotations = annotations;\n        if (!this.isBetweenStartAndEnd(timestamp)) {\n            var message = M.util.get_string('interactioncanonlybeaddedbetweenstartandendtime', 'mod_interactivevideo', {\n                \"start\": self.convertSecondsToHMS(self.start),\n                \"end\": self.convertSecondsToHMS(self.end),\n            });\n            self.addNotification(message);\n            return;\n        }\n\n        if (self.isAlreadyAdded(timestamp)) {\n            self.addNotification(M.util.get_string('interactionalreadyexists', 'mod_interactivevideo'));\n            return;\n        }\n\n        if (self.isInSkipSegment(timestamp)) {\n            self.addNotification(M.util.get_string('interactionisbetweentheskipsegment', 'mod_interactivevideo'));\n            return;\n        }\n\n        const startHMS = self.convertSecondsToHMS(self.start);\n        const endHMS = self.convertSecondsToHMS(self.end);\n        const timestampHMS = timestamp > 0 ? self.convertSecondsToHMS(timestamp) : startHMS;\n\n        const data = {\n            id: 0,\n            timestamp: timestamp > 0 ? timestamp : self.start,\n            timestampassist: timestampHMS,\n            title: self.prop.title,\n            start: startHMS,\n            end: endHMS,\n            contextid: M.cfg.contextid,\n            type: self.prop.name,\n            courseid: self.course,\n            cmid: coursemodule,\n            annotationid: self.interaction,\n            hascompletion: self.prop.hascompletion ? 1 : 0,\n        };\n\n        var form = new ModalForm({\n            formClass: self.prop.form,\n            args: data,\n            modalConfig: {\n                title: M.util.get_string('addinteractiontitle', 'mod_interactivevideo', {\n                    \"name\": self.prop.title.toLowerCase(),\n                    \"time\": timestampHMS\n                }),\n            }\n        });\n        $(\"#contentmodal\").modal('hide');\n        $('#addcontentdropdown a').removeClass('active');\n        form.show();\n\n        form.addEventListener(form.events.LOADED, (e) => {\n            setTimeout(() => {\n                $('body').addClass('modal-open');\n            }, 500);\n            try {\n                self.onEditFormLoaded(form, e);\n            } catch (error) {\n                // Do nothing.\n            }\n            self.validateTimestampFieldValue('timestampassist', 'timestamp');\n\n            // Make form draggable.\n            form.modal.modal.draggable({\n                handle: \".modal-header\"\n            });\n        });\n\n        form.addEventListener(form.events.FORM_SUBMITTED, (e) => {\n            e.stopImmediatePropagation();\n            $.ajax({\n                url: M.cfg.wwwroot + '/mod/interactivevideo/ajax.php',\n                method: \"POST\",\n                dataType: \"text\",\n                data: {\n                    action: 'get_item',\n                    id: e.detail.id,\n                    sesskey: M.cfg.sesskey,\n                    contextid: M.cfg.courseContextId,\n                    token: self.token,\n                    cmid: self.cm,\n                },\n                success: function(data) {\n                    var newAnnotation = JSON.parse(data);\n                    dispatchEvent('annotationupdated', {\n                        annotation: newAnnotation,\n                        action: 'add'\n                    });\n                }\n            });\n        });\n    }\n\n    /**\n     * Copy an annotation\n     * @param {number} id The annotation id\n     * @returns {void}\n     */\n    cloneAnnotation(id) {\n        $.ajax({\n            url: M.cfg.wwwroot + '/mod/interactivevideo/ajax.php',\n            method: \"POST\",\n            dataType: \"text\",\n            data: {\n                action: 'copy_item',\n                id: id,\n                sesskey: M.cfg.sesskey,\n                contextid: M.cfg.contextid,\n                token: this.token,\n                cmid: this.cm,\n            },\n            success: function(data) {\n                var newAnnotation = JSON.parse(data);\n                dispatchEvent('annotationupdated', {\n                    annotation: newAnnotation,\n                    action: 'clone'\n                });\n            }\n        });\n    }\n\n    /**\n     * Edit an annotation\n     * @param {Array} annotations The annotations array\n     * @param {number} id The annotation id\n     * @returns {void}\n     */\n    editAnnotation(annotations, id) {\n        this.annotations = annotations;\n        let self = this;\n        const annotation = annotations.find(x => x.id == id);\n        const timestamp = annotation.timestamp;\n        const timestampassist = this.convertSecondsToHMS(timestamp);\n\n        annotation.timestampassist = timestampassist;\n        annotation.start = this.convertSecondsToHMS(this.start);\n        annotation.end = this.convertSecondsToHMS(this.end);\n        annotation.contextid = M.cfg.contextid;\n\n        const title = annotation.type === 'skipsegment'\n            ? M.util.get_string('skipsegmentcontent', 'ivplugin_skipsegment').toLowerCase()\n            : annotation.formattedtitle;\n\n        const form = new ModalForm({\n            formClass: this.prop.form,\n            args: annotation,\n            modalConfig: {\n                title: M.util.get_string(\"editinteractiontitle\", \"mod_interactivevideo\", {\n                    name: title,\n                    time: timestampassist\n                }),\n            }\n        });\n\n        form.show();\n\n        form.addEventListener(form.events.LOADED, (e) => {\n            try {\n                this.onEditFormLoaded(form, e);\n            } catch (error) {\n                // Do nothing.\n            }\n            this.validateTimestampFieldValue('timestampassist', 'timestamp');\n\n            // Make form draggable.\n            form.modal.modal.draggable({\n                handle: \".modal-header\"\n            });\n        });\n\n        form.addEventListener(form.events.FORM_SUBMITTED, (e) => {\n            e.stopImmediatePropagation();\n            this.annotations = this.annotations.filter(x => x.id != id);\n            $.ajax({\n                url: M.cfg.wwwroot + '/mod/interactivevideo/ajax.php',\n                method: \"POST\",\n                dataType: \"text\",\n                data: {\n                    action: 'get_item',\n                    id: e.detail.id,\n                    sesskey: M.cfg.sesskey,\n                    contextid: M.cfg.courseContextId,\n                    token: self.token,\n                    cmid: self.cm,\n                },\n            }).done(function(data) {\n                var updated = JSON.parse(data);\n                dispatchEvent('annotationupdated', {\n                    annotation: updated,\n                    action: 'edit'\n                });\n            });\n        });\n    }\n\n    /**\n     * Delete an annotation\n     * @param {Array} annotations The annotations array\n     * @param {number} id The annotation id\n     * @returns {void}\n     */\n    deleteAnnotation(annotations, id) {\n        this.annotations = annotations;\n        const annotation = this.annotations.find(x => x.id == id);\n        $.ajax({\n            url: M.cfg.wwwroot + '/mod/interactivevideo/ajax.php',\n            method: \"POST\",\n            dataType: \"text\",\n            data: {\n                action: 'delete_item',\n                sesskey: M.cfg.sesskey,\n                id: id,\n                contextid: M.cfg.contextid,\n                token: this.token,\n                cmid: this.cm,\n            },\n            success: function() {\n                dispatchEvent('annotationdeleted', {\n                    annotation: annotation,\n                });\n            },\n        });\n    }\n\n    /**\n     * Dispatch an event when an interaction is run\n     * @param {Object} annotation The annotation object\n     * @param {Object} data The data to be passed\n     */\n    interactionRunEvent(annotation, data) {\n        dispatchEvent('interactionrun', {\n            annotation,\n            data,\n        });\n    }\n\n    /**\n     * Called when the edit form is loaded.\n     * @param {Object} form The form\n     * @return {jQuery} The modal body element\n     */\n    onEditFormLoaded(form) {\n        return form.modal.modal.find('.modal-body');\n    }\n\n    /**\n     * Called after the annotation is edited/added/quick edited (after everything is rendered).\n     * @param {Object} annotation The annotation object\n     * @return {void}\n     */\n    postEditCallback(annotation) {\n        return this.runInteraction(annotation);\n    }\n\n    /**\n     * Check if the page is in edit mode\n     * @returns {boolean}\n     */\n    isEditMode() {\n        return $('body').hasClass('page-interactions');\n    }\n\n    /**\n     * Check if the annotation is clickable from video navigation\n     * @param {Object} annotation\n     * @returns boolean\n     */\n    isClickable(annotation) {\n        if (this.isEditMode()) {\n            return true;\n        }\n        const advanced = JSON.parse(annotation.advanced);\n        return (advanced.clickablebeforecompleted == \"1\" && !annotation.completed)\n            || (advanced.clickableaftercompleted == \"1\" && annotation.completed);\n    }\n\n    /**\n     * Visibility on the video navigation\n     * @param {Object} annotation\n     * @returns boolean\n     */\n    isVisible(annotation) {\n        if (this.isEditMode()) {\n            return true;\n        }\n        const advanced = JSON.parse(annotation.advanced);\n        return (advanced.visiblebeforecompleted == \"1\" && !annotation.completed)\n            || (advanced.visibleaftercompleted == \"1\" && annotation.completed);\n    }\n\n    /**\n     * Render the item on the video navigation\n     * @param {Object} annotation The annotation object\n     * @returns {void}\n     */\n    renderItemOnVideoNavigation(annotation) {\n        if (annotation.timestamp < this.start || annotation.timestamp > this.end) {\n            return;\n        }\n        const percentage = ((Number(annotation.timestamp) - this.start) / this.totaltime) * 100;\n        if (this.isVisible(annotation)) {\n            let classes = annotation.type + ' annotation li-draggable ';\n            if (annotation.completed) {\n                classes += 'completed ';\n            }\n            if (!this.isClickable(annotation)) {\n                classes += 'no-pointer-events ';\n            }\n            if (this.isSkipped(annotation.timestamp)) {\n                classes += 'skipped ';\n            }\n            if (annotation.hascompletion == 0) {\n                classes += 'no-completion ';\n            }\n            if (this.isEditMode()) {\n                $(\"#video-nav ul\").append(`<li class=\"${classes}\"  data-timestamp=\"${annotation.timestamp}\"\n        data-id=\"${annotation.id}\" style=\"left: calc(${percentage}% - 5px)\">\n        <div class=\"item\" data-toggle=\"tooltip\" data-container=\"#wrapper\"\n        data-trigger=\"hover\" data-placement=\"top\" data-html=\"true\" data-original-title='<i class=\"${this.prop.icon} mr-1\"></i>\n        ${annotation.formattedtitle}'></div></li>`);\n            } else {\n                $(\"#interactions-nav ul\").append(`<li class=\"${classes}\"  data-timestamp=\"${annotation.timestamp}\"\n                    data-id=\"${annotation.id}\" style=\"left: calc(${percentage}% - 5px)\"><div class=\"item\" data-toggle=\"tooltip\"\n                     data-container=\"#wrapper\" data-trigger=\"hover\" data-placement=\"top\" data-html=\"true\"\n                      data-original-title='<i class=\"${this.prop.icon} mr-1\"></i>${annotation.formattedtitle}'></div></li>`);\n            }\n        }\n    }\n\n    /**\n     * Render the viewer for the annotation\n     * @param {Object} annotation The annotation object\n     * @returns {Promise}\n     */\n    renderViewer(annotation) {\n        return defaultDisplayContent(annotation, this.player, this.start, this.end);\n    }\n\n    /**\n     * Render the container for the annotation\n     * @param  {Object} annotation The annotation object\n     */\n    renderContainer(annotation) {\n        if (annotation.hascompletion == 0) {\n            return;\n        }\n        let $message = $(`#message[data-id='${annotation.id}']`);\n        if (annotation.completiontracking != 'manual') {\n            let $completiontoggle = $message.find('#completiontoggle');\n            $completiontoggle.prop('disabled', true);\n            $completiontoggle.find('span').text(\n                annotation.completed\n                    ? `${M.util.get_string('completioncompleted', 'mod_interactivevideo')}`\n                    : `${M.util.get_string('completionincomplete', 'mod_interactivevideo')}`\n            );\n        }\n    }\n\n    /**\n     * Callback to excute after the content is rendered.\n     * @returns {void}\n     */\n    postContentRender() { }\n\n    /**\n     * Set draggable\n     * @param {string} elem The element to make draggable\n     */\n    setModalDraggable(elem) {\n        $(elem).draggable({handle: \".modal-header\"});\n    }\n\n    /**\n     * Formats a given time in seconds into a human-readable string.\n     *\n     * @param {number} seconds - The time in seconds to format.\n     * @returns {string} A string representing the formatted time in hours, minutes, and seconds.\n     */\n    formatTime(seconds) {\n        seconds = parseInt(seconds);\n        const hours = Math.floor(seconds / 3600);\n        const minutes = Math.floor((seconds % 3600) / 60);\n        const remainingSeconds = seconds % 60;\n        let string = '';\n        if (hours > 0) {\n            string += hours + 'h ';\n        }\n        if (minutes > 0) {\n            string += minutes + 'm ';\n        }\n        if (remainingSeconds > 0) {\n            string += remainingSeconds + 's';\n        }\n        return string;\n    }\n\n\n    /**\n     * Callback to excute after item is successfully marked complete or incomplete.\n     * @param {Array} annotations Updated annotations\n     * @param {Object} thisItem The current annotation\n     * @param {string} action The action performed (e.g. mark-done, mark-undone)\n     * @param {string} type The type of completion (e.g. manual, automatic)\n     */\n    completionCallback(annotations, thisItem, action, type) {\n        const $message = $(`#message[data-id='${thisItem.id}']`);\n        const $toggleButton = $message.find(`#completiontoggle`);\n        if (type == 'manual') {\n            $toggleButton.prop('disabled', false);\n            $toggleButton.find(`i`)\n                .removeClass('fa-spin bi-arrow-repeat')\n                .addClass(action == 'mark-done' ? 'bi-check2' : 'bi-circle');\n            $toggleButton.find(`span`).show();\n        } else if (type == 'automatic') {\n            $toggleButton.find(`i`).toggleClass('bi-check2 bi-circle');\n        }\n\n        let audio;\n        if (action == 'mark-done') {\n            $toggleButton\n                .removeClass('btn-secondary mark-done')\n                .addClass('btn-success mark-undone');\n            // Play a popup sound.\n            audio = new Audio(M.cfg.wwwroot + '/mod/interactivevideo/sounds/point-awarded.mp3');\n            audio.play();\n            $(`#message[data-id='${thisItem.id}'] #title .badge`).removeClass('badge-secondary').addClass('alert-success');\n            if (thisItem.xp > 0) {\n                $(`#message[data-id='${thisItem.id}'] #title .badge`).text(thisItem.earned == thisItem.xp ?\n                    Number(thisItem.earned) + ' XP' : `${Number(thisItem.earned)}/${thisItem.xp} XP`);\n            } else {\n                $(`#message[data-id='${thisItem.id}'] #title .badge`).hide();\n            }\n        } else if (action == 'mark-undone') {\n            $toggleButton\n                .removeClass('btn-success mark-undone').addClass('btn-secondary mark-done');\n            // Play a popup sound.\n            audio = new Audio(M.cfg.wwwroot + '/mod/interactivevideo/sounds/pop.mp3');\n            audio.play();\n            $(`#message[data-id='${thisItem.id}'] #title .badge`).removeClass('alert-success').addClass('badge-secondary');\n        }\n\n        // Update the completion button.\n        $toggleButton.find(`span`).text('');\n        if (thisItem.earned > 0) {\n            if (action == 'mark-undone') {\n                this.addNotification(M.util.get_string('xplost', 'mod_interactivevideo', Number(thisItem.earned)), 'info');\n            } else if (action == 'mark-done') {\n                this.addNotification(M.util.get_string('xpearned', 'mod_interactivevideo', Number(thisItem.earned)), 'success');\n            }\n        }\n\n        if (type == 'manual') {\n            if (action == 'mark-done') {\n                $toggleButton.find(`span`)\n                    .text(`${M.util.get_string('completionmarkincomplete', 'mod_interactivevideo')}`);\n            } else if (action == 'mark-undone') {\n                $toggleButton.find(`span`)\n                    .text(`${M.util.get_string('completionmarkcomplete', 'mod_interactivevideo')}`);\n            }\n        } else if (type == 'automatic') {\n            if (action == 'mark-done') {\n                $toggleButton.find(`span`)\n                    .text(`${M.util.get_string('completioncompleted', 'mod_interactivevideo')}`);\n            } else if (action == 'mark-undone') {\n                $toggleButton.find(`span`)\n                    .text(`${M.util.get_string('completionincomplete', 'mod_interactivevideo')}`);\n            }\n        }\n        return 'done';\n    }\n\n    /**\n     * Toggle completion of an item\n     * @param {number} id The annotation id\n     * @param {string} action The action to perform (mark-done, mark-undone)\n     * @param {string} type The type of completion (manual, automatic)\n     * @param {{}} [details={}] Completion details\n     * @returns {Promise}\n     */\n    toggleCompletion(id, action, type = 'manual', details = {}) {\n        // Skip if the page is the interactions page or in preview-mode.\n        if (this.isEditMode()) {\n            return Promise.resolve(); // Return a resolved promise for consistency\n        }\n        if ($('body').hasClass('preview-mode')) {\n            this.addNotification(M.util.get_string('completionnotrecordedinpreviewmode', 'mod_interactivevideo'));\n            return Promise.resolve(); // Return a resolved promise for consistency\n        }\n        // Gradable items (hascompletion)\n        const gradableitems = this.annotations.filter(x => x.hascompletion == '1');\n        const totalXp = gradableitems.map(({xp}) => Number(xp)).reduce((a, b) => a + b, 0);\n        let completedItems = gradableitems.filter(({completed}) => completed);\n        let earnedXp = completedItems.map(({earned}) => Number(earned)).reduce((a, b) => a + b, 0);\n\n        completedItems = completedItems.map(({id}) => id);\n        let thisItem = gradableitems.find(({id: itemId}) => itemId == id);\n        let completionDetails = {\n            id,\n        };\n        if (action == 'mark-done') {\n            const completeTime = new Date();\n            completionDetails.hasDetails = details.details ? true : false;\n            completionDetails.xp = details.xp || thisItem.xp;\n            completionDetails.duration = details.duration || completeTime.getTime() - $('#video-wrapper').data('timestamp');\n            completionDetails.timecompleted = details.timecompleted || completeTime.getTime();\n            const completiontime = completeTime.toLocaleString();\n            let duration = this.formatTime(completionDetails.duration / 1000);\n            completionDetails.reportView = details.reportView ||\n                `<span data-toggle=\"tooltip\" data-html=\"true\"\n                 data-title='<span class=\"d-flex flex-column align-items-start\"><span><i class=\"bi bi-calendar mr-2\"></i>\n                 ${completiontime}</span><span><i class=\"bi bi-stopwatch mr-2\"></i>${duration}</span></span>'>\n                 <i class=\"fa fa-check text-success\"></i><br><span>${Number(completionDetails.xp)}</span></span>`;\n        }\n        if (action == 'mark-done') {\n            completedItems.push(id.toString());\n            earnedXp += Number(completionDetails.xp);\n        } else if (action == 'mark-undone') {\n            completedItems = completedItems.filter(itemId => itemId != id);\n            earnedXp -= Number(thisItem.earned);\n        }\n\n        let completed;\n        if (Number(this.completionpercentage) > 0) { // Completion percentage is set.\n            completed = (completedItems.length / gradableitems.length) * 100 >= Number(this.completionpercentage) ? 1 : 0;\n        } else {\n            completed = gradableitems.length == completedItems.length ? 1 : 0;\n        }\n        return new Promise((resolve) => {\n            $.ajax({\n                url: `${M.cfg.wwwroot}/mod/interactivevideo/ajax.php`,\n                method: \"POST\",\n                dataType: \"text\",\n                data: {\n                    action: 'save_progress',\n                    markdone: action == 'mark-done',\n                    sesskey: M.cfg.sesskey,\n                    id: this.interaction,\n                    uid: this.userid,\n                    percentage: (completedItems.length / gradableitems.length) * 100,\n                    g: parseFloat((earnedXp / totalXp) * this.grademax).toFixed(2),\n                    gradeiteminstance: this.gradeiteminstance,\n                    c: completed,\n                    xp: earnedXp,\n                    completeditems: JSON.stringify(completedItems),\n                    completiondetails: JSON.stringify(completionDetails),\n                    details: JSON.stringify(details.details || {}),\n                    annotationtype: thisItem.type,\n                    token: this.token,\n                    cmid: this.cm,\n                    completionid: this.completionid,\n                    contextid: thisItem.contextid,\n                },\n                success: () => {\n                    // Update the annotations array.\n                    const annotations = this.annotations.map(x => {\n                        if (x.id == id) {\n                            x.completed = action == 'mark-done';\n                            x.earned = completionDetails.xp;\n                        }\n                        return x;\n                    });\n\n                    renderAnnotationItems(annotations, this.start, this.totaltime);\n                    thisItem.earned = completionDetails.xp;\n                    this.completionCallback(annotations, thisItem, action, type);\n                    dispatchEvent('interactionCompletionUpdated', {\n                        annotations,\n                        completionpercentage: (completedItems.length / gradableitems.length) * 100,\n                        grade: parseFloat((earnedXp / totalXp) * this.grademax).toFixed(2),\n                        completed,\n                        xp: earnedXp,\n                        completeditems: completedItems,\n                        target: thisItem,\n                        action,\n                        type\n                    });\n                    resolve();\n                }\n            });\n        });\n    }\n\n    /**\n     * Enable manual completion of item\n     * @param {Object} annotation The annotation object\n     * @returns {void}\n     */\n    enableManualCompletion(annotation) {\n        var self = this;\n        const $message = $(`#message[data-id='${annotation.id}']`);\n        $message.off('click', 'button#completiontoggle').on('click', 'button#completiontoggle', function(e) {\n            e.preventDefault();\n            e.stopImmediatePropagation();\n            // Implement required min minutes.\n            if ($(this).hasClass('mark-done') && annotation.requiremintime > 0) {\n                // Duration in minutes\n                const duration = (new Date().getTime() - $('#video-wrapper').data('timestamp')) / 1000 / 60;\n\n                if (duration < annotation.requiremintime) {\n                    self.addNotification(\n                        M.util.get_string('youmustspendatleastminutesbeforemarkingcomplete', 'mod_interactivevideo',\n                            annotation.requiremintime), 'danger');\n                    return;\n                }\n\n            }\n            $(this).attr('disabled', true);\n            $(this).find('i').removeClass('bi-check2 bi-circle').addClass('fa-spin bi-arrow-repeat');\n            $(this).find('span').hide();\n            // Get the completed items\n            var annoid = $(this).data('id');\n            self.toggleCompletion(annoid, $(this).hasClass('mark-done') ? 'mark-done' : 'mark-undone', 'manual');\n        });\n    }\n\n    /**\n     * What happens when an item runs\n     * @param {Object} annotation The annotation object\n     * @returns {void}\n     */\n    async runInteraction(annotation) {\n        let self = this;\n        this.player.pause();\n\n        const applyContent = async function(annotation) {\n            const data = await self.render(annotation);\n            let $message = $(`#message[data-id='${annotation.id}']`);\n            $message.find(`.modal-body`).html(data);\n            $message.find(`.modal-body`).attr('id', 'content');\n            self.postContentRender(annotation);\n            self.interactionRunEvent(annotation, data);\n            if (annotation.completed) {\n                return;\n            }\n            if (annotation.hascompletion == 1 && annotation.completiontracking == 'view') {\n                self.toggleCompletion(annotation.id, 'mark-done', 'automatic');\n            }\n        };\n\n        await this.renderViewer(annotation);\n        this.renderContainer(annotation);\n        applyContent(annotation);\n\n        if (annotation.hascompletion == 1 && annotation.completiontracking == 'manual') {\n            this.enableManualCompletion(annotation);\n        }\n\n        if (annotation.displayoptions == 'popup') {\n            $('#annotation-modal').on('shown.bs.modal', function() {\n                self.setModalDraggable('#annotation-modal .modal-dialog');\n            });\n        }\n\n    }\n\n    /**\n     * Data to show when the report viewer clicks on the completion checkmark\n     * @param {Object} annotation the current annotation\n     * @param {Number} userid the user id\n     * @returns {Promise}\n     */\n    getCompletionData(annotation, userid) {\n        return Promise.resolve({\n            annotation: annotation,\n            userid: userid\n        });\n    }\n\n    /**\n     * View when the report viewer clicks on the title of the interaction item on the report page\n     * @param {Object} annotation the annotation\n     * @returns {void}\n     */\n    async displayReportView(annotation) {\n        const data = await this.render(annotation, 'html');\n        let $message = $(`#message[data-id='${annotation.id}']`);\n        $message.find(`.modal-body`).html(data);\n        $message.find(`.modal-body`).attr('id', 'content');\n        this.postContentRender(annotation);\n    }\n\n    /**\n     * Get the log data for multiple users from annotation_log table\n     * @param {Object} annotation the annotation\n     * @param {Array} userids array of user ids\n     * @returns {Promise}\n     */\n    getLogs(annotation, userids) {\n        let self = this;\n        userids = userids.join(',');\n        return new Promise((resolve) => {\n            $.ajax({\n                url: M.cfg.wwwroot + '/mod/interactivevideo/ajax.php',\n                method: \"POST\",\n                dataType: \"text\",\n                data: {\n                    action: 'get_logs_by_userids',\n                    annotationid: annotation.id,\n                    contextid: annotation.contextid,\n                    userids: userids,\n                    sesskey: M.cfg.sesskey,\n                    token: self.token,\n                    cmid: self.cm,\n                },\n                success: (data) => {\n                    try {\n                        resolve(JSON.parse(data));\n                    } catch (error) {\n                        resolve([]);\n                    }\n                }\n            });\n        });\n    }\n\n\n}\n\nexport default Base;"],"names":["constructor","player","annotations","interaction","course","userid","completionpercentage","gradeiteminstance","grademax","vtype","preventskip","totaltime","start","end","properties","cm","token","displayoptions","completionid","prop","Number","enableColorPicker","document","on","color","this","val","closest","css","find","removeClass","off","addClass","formatContent","text","shorttext","annotation","format","addNotification","msg","type","init","isSkipped","timestamp","isInSkipSegment","isBetweenStartAndEnd","convertSecondsToHMS","s","dynamic","rounded","Math","round","hours","floor","toString","padStart","minutes","seconds","toFixed","renderEditItem","listItem","item","removeAttr","attr","id","formattedtitle","hascompletion","xp","remove","icon","title","append","M","util","get_string","allowmultiple","appendTo","isAlreadyAdded","some","x","validateTimestampFormat","test","validateTimestampFieldValue","fld","hiddenfield","self","e","preventDefault","parts","split","message","seek","pause","addAnnotation","coursemodule","startHMS","endHMS","timestampHMS","data","timestampassist","contextid","cfg","name","courseid","cmid","annotationid","form","ModalForm","formClass","args","modalConfig","toLowerCase","modal","show","addEventListener","events","LOADED","setTimeout","onEditFormLoaded","error","draggable","handle","FORM_SUBMITTED","stopImmediatePropagation","ajax","url","wwwroot","method","dataType","action","detail","sesskey","courseContextId","success","newAnnotation","JSON","parse","cloneAnnotation","editAnnotation","time","filter","done","updated","deleteAnnotation","interactionRunEvent","postEditCallback","runInteraction","isEditMode","hasClass","isClickable","advanced","clickablebeforecompleted","completed","clickableaftercompleted","isVisible","visiblebeforecompleted","visibleaftercompleted","renderItemOnVideoNavigation","percentage","classes","renderViewer","renderContainer","$message","completiontracking","$completiontoggle","postContentRender","setModalDraggable","elem","formatTime","parseInt","remainingSeconds","string","completionCallback","thisItem","$toggleButton","audio","toggleClass","Audio","play","earned","hide","toggleCompletion","details","Promise","resolve","gradableitems","totalXp","map","_ref","reduce","a","b","completedItems","_ref2","earnedXp","_ref3","_ref4","_ref5","itemId","completionDetails","completeTime","Date","hasDetails","duration","getTime","timecompleted","completiontime","toLocaleString","reportView","push","length","markdone","uid","g","parseFloat","c","completeditems","stringify","completiondetails","annotationtype","grade","target","enableManualCompletion","requiremintime","annoid","async","render","html","applyContent","getCompletionData","getLogs","userids","join"],"mappings":"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"}