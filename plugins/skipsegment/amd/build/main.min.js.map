{"version":3,"file":"main.min.js","sources":["../src/main.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Main class for skip segment\n *\n * @module     ivplugin_skipsegment/main\n * @copyright  2024 Sokunthearith Makara <sokunthearithmakara@gmail.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\nimport $ from 'jquery';\nimport Base from 'mod_interactivevideo/type/base';\nimport {dispatchEvent} from 'core/event_dispatcher';\nimport Ajax from 'core/ajax';\nexport default class SkipSegment extends Base {\n    /**\n     * Initializes the skip segment plugin.\n     * If not in edit mode, sets up an event listener for the 'timeupdate' event.\n     * Filters annotations to find those of type 'skipsegment' and runs the interaction\n     * when the current time falls within the annotation's timestamp range.\n     *\n     * @method init\n     */\n    init() {\n        if (!this.isEditMode()) {\n            let self = this;\n            const skipsegment = this.annotations.filter((annotation) => annotation.type == 'skipsegment');\n            $(document).on('timeupdate', async function(e) {\n                const t = e.originalEvent.detail.time;\n                for (let annotation of skipsegment) {\n                    if (annotation.timestamp < t && annotation.title > t) {\n                        await self.player.seek(Number(annotation.title));\n                        await self.runInteraction(annotation);\n                        break;\n                    }\n                }\n            });\n        }\n    }\n    /**\n     * Renders the edit item for the skip segment plugin.\n     *\n     * @param {Object} annotations - The annotations object.\n     * @param {jQuery} listItem - The jQuery object representing the list item.\n     * @param {Object} item - The item object containing details of the segment.\n     * @returns {jQuery} The modified list item with the rendered edit item.\n     */\n    renderEditItem(annotations, listItem, item) {\n        listItem = super.renderEditItem(annotations, listItem, item);\n        listItem.find('[data-editable]').removeAttr('data-editable');\n        listItem.find('.btn.copy').remove();\n        listItem.find('.title').replaceWith(`<span class=\"skipend timestamp\n            bg-light px-2 py-1 rounded-sm text-truncate\"\n            data-timestamp=\"${item.title}\">${this.convertSecondsToHMS(item.title, this.totaltime < 3600, true)}</span>`);\n        if (this.isSkipped(item.timestamp)) {\n            listItem.find('.skipend').after(`<span class=\"badge badge-warning ml-2\">\n                            ${M.util.get_string('skipped', 'ivplugin_skipsegment')}</span>`);\n        }\n        return listItem;\n    }\n\n    /**\n     * Adds an annotation to the interactive video.\n     *\n     * @param {Array} annotations - The list of current annotations.\n     * @param {number} timestamp - The timestamp at which to add the annotation.\n     * @param {number} coursemodule - The course module ID.\n     * @returns {Promise<void>} A promise that resolves when the annotation is added.\n     */\n    async addAnnotation(annotations, timestamp, coursemodule) {\n        let self = this;\n        let data = {\n            title: timestamp + 5 > this.end ? this.end : timestamp + 5,\n            timestamp: timestamp,\n            contextid: M.cfg.contextid,\n            type: self.prop.name,\n            courseid: self.course,\n            cmid: coursemodule,\n            annotationid: self.interaction,\n            hascompletion: self.prop.hascompletion ? 1 : 0,\n            advanced: JSON.stringify({\n                \"visiblebeforecompleted\": \"1\",\n                \"visibleaftercompleted\": null,\n                \"clickablebeforecompleted\": \"1\",\n                \"clickableaftercompleted\": null,\n                \"replaybehavior\": \"1\",\n            }),\n        };\n        let ajax = await Ajax.call([{\n            methodname: 'ivplugin_skipsegment_add_skip',\n            args: {\n                skipdata: JSON.stringify(data),\n            },\n            contextid: M.cfg.contextid,\n        }])[0];\n\n        let newAnnotation = JSON.parse(ajax.data);\n        dispatchEvent('annotationupdated', {\n            annotation: newAnnotation,\n            action: 'add'\n        });\n\n        $('#contentmodal').modal('hide');\n\n    }\n\n    /**\n     * Handles the event when the edit form is loaded.\n     *\n     * @param {Object} form - The form object that is being edited.\n     * @param {Event} event - The event object associated with the form loading.\n     * @returns {Object} - An object containing the form and event.\n     *\n     */\n    onEditFormLoaded(form, event) {\n        let self = this;\n        const body = super.onEditFormLoaded(form, event);\n        body.on('change', '[name=titleassist]', function(e) {\n            e.preventDefault();\n            const originalValue = $(this).data('initial-value');\n            // Make sure the timestamp format is hh:mm:ss.\n            if (!self.validateTimestampFormat($(this).val())) {\n                self.addNotification(M.util.get_string('invalidtimestampformat', 'ivplugin_skipsegment'));\n                $(this).val(originalValue);\n                return;\n            }\n\n            // Convert the timestamp to seconds.\n            const parts = $(this).val().split(':');\n            const timestamp = Number(parts[0]) * 3600 + Number(parts[1]) * 60 + Number(parts[2]);\n            if (!self.isBetweenStartAndEnd(timestamp)) {\n                const message = M.util.get_string('interactioncanonlybeaddedbetweenstartandendtime', 'mod_interactivevideo', {\n                    \"start\": self.convertSecondsToHMS(self.start),\n                    \"end\": self.convertSecondsToHMS(self.end),\n                });\n                self.addNotification(message);\n                $(this).val(originalValue);\n                return;\n            }\n\n            // Make sure the title assist is not the same as the timestamp assist or less than the timestamp assist\n            if (timestamp <= Number($('[name=timestamp]').val())) {\n                self.addNotification(M.util.get_string('segmentendmustbegreaterthantimestamp', 'mod_interactivevideo'));\n                $(this).val(originalValue);\n                return;\n            }\n\n            $('[name=title]').val(timestamp);\n        });\n        return {form, event};\n    }\n\n    /**\n     * Renders an annotation on the video navigation timeline.\n     *\n     * @param {Object} annotation - The annotation object to be rendered.\n     * @param {number} annotation.timestamp - The timestamp of the annotation.\n     * @param {string} annotation.title - The title of the annotation.\n     * @param {string} annotation.type - The type of the annotation.\n     * @param {string} annotation.id - The unique identifier of the annotation.\n     */\n    renderItemOnVideoNavigation(annotation) {\n        if (annotation.timestamp < this.start || annotation.timestamp > this.end) {\n            return;\n        }\n        const percentage = ((Number(annotation.timestamp) - this.start) / this.totaltime) * 100;\n        const length = (Number(annotation.title) - Number(annotation.timestamp)) / this.totaltime * 100;\n        if (this.isVisible(annotation) && !this.isEditMode()) {\n            $(\"#video-nav ul\").append(`<li class=\"annotation ${annotation.type}\n             ${this.isClickable(annotation) ? '' : 'no-pointer-events'} position-absolute bg-dark progress-bar-striped progress-bar\"\n              data-timestamp=\"${annotation.timestamp}\" data-id=\"${annotation.id}\"\n               style=\"left: ${percentage}%; width: ${length}%;\" data-toggle=\"tooltip\"\n               data-container=\"#wrapper\" data-trigger=\"hover\"\n         data-html=\"true\" data-original-title='<i class=\"${this.prop.icon}\"></i>'></li>`);\n        }\n        if (this.isEditMode()) {\n            $(\"#video-timeline-wrapper\").append(`<div class=\"position-absolute skipsegment cursor-pointer\"\n                 data-timestamp=\"${annotation.timestamp}\" data-id=\"${annotation.id}\"\n                 style=\"height: 100%; left: ${percentage}%; width: ${length}%;background: rgba(0,0,0,0.75);\">\n                 <div class=\"position-absolute w-100 text-center px-1 delete-skipsegment\">\n                 <i class=\"bi bi-trash3 text-muted fs-unset\"></i></div></div>`);\n        }\n    }\n    /**\n     * Executes the interaction for skipping a segment in the video.\n     *\n     * This function appends a skip segment icon to the video block, seeks the video player to the specified annotation time,\n     * updates the progress bar, and then plays the video.\n     * The skip segment icon is displayed for a short duration before being removed.\n     *\n     * @param {Object} annotation - The annotation object containing the title which represents the time to seek to.\n     * @returns {Promise<void>} A promise that resolves when the interaction is complete.\n     */\n    async runInteraction(annotation) {\n        $('.video-block').append(`<div id=\"skipsegment\" class=\"text-white position-absolute p-3 hide\">\n         <i class=\"${this.prop.icon}\"></i></div>`);\n        $('#skipsegment').fadeIn(300);\n        await this.player.seek(Number(annotation.title) + 0.01);\n        this.player.play();\n        setTimeout(() => {\n            $('#skipsegment').fadeOut(300);\n            setTimeout(() => {\n                $('#skipsegment').remove();\n            }, 300);\n        }, 1000);\n\n    }\n}"],"names":["SkipSegment","Base","init","this","isEditMode","self","skipsegment","annotations","filter","annotation","type","document","on","async","e","t","originalEvent","detail","time","timestamp","title","player","seek","Number","runInteraction","renderEditItem","listItem","item","super","find","removeAttr","remove","replaceWith","convertSecondsToHMS","totaltime","isSkipped","after","M","util","get_string","coursemodule","data","end","contextid","cfg","prop","name","courseid","course","cmid","annotationid","interaction","hascompletion","advanced","JSON","stringify","ajax","Ajax","call","methodname","args","skipdata","newAnnotation","parse","action","modal","onEditFormLoaded","form","event","preventDefault","originalValue","validateTimestampFormat","val","addNotification","parts","split","isBetweenStartAndEnd","message","start","renderItemOnVideoNavigation","percentage","length","isVisible","append","isClickable","id","icon","fadeIn","play","setTimeout","fadeOut"],"mappings":";;;;;;;2MA0BqBA,oBAAoBC,cASrCC,WACSC,KAAKC,aAAc,KAChBC,KAAOF,WACLG,YAAcH,KAAKI,YAAYC,QAAQC,YAAkC,eAAnBA,WAAWC,2BACrEC,UAAUC,GAAG,cAAcC,eAAeC,SAClCC,EAAID,EAAEE,cAAcC,OAAOC,SAC5B,IAAIT,cAAcH,eACfG,WAAWU,UAAYJ,GAAKN,WAAWW,MAAQL,EAAG,OAC5CV,KAAKgB,OAAOC,KAAKC,OAAOd,WAAWW,cACnCf,KAAKmB,eAAef,uBAe9CgB,eAAelB,YAAamB,SAAUC,aAClCD,SAAWE,MAAMH,eAAelB,YAAamB,SAAUC,OAC9CE,KAAK,mBAAmBC,WAAW,iBAC5CJ,SAASG,KAAK,aAAaE,SAC3BL,SAASG,KAAK,UAAUG,4IAEFL,KAAKP,mBAAUjB,KAAK8B,oBAAoBN,KAAKP,MAAOjB,KAAK+B,UAAY,MAAM,eAC7F/B,KAAKgC,UAAUR,KAAKR,YACpBO,SAASG,KAAK,YAAYO,qFACRC,EAAEC,KAAKC,WAAW,UAAW,oCAE5Cb,6BAWSnB,YAAaY,UAAWqB,kBAEpCC,KAAO,CACPrB,MAAOD,UAAY,EAAIhB,KAAKuC,IAAMvC,KAAKuC,IAAMvB,UAAY,EACzDA,UAAWA,UACXwB,UAAWN,EAAEO,IAAID,UACjBjC,KALOP,KAKI0C,KAAKC,KAChBC,SANO5C,KAMQ6C,OACfC,KAAMT,aACNU,aARO/C,KAQYgD,YACnBC,cATOjD,KASa0C,KAAKO,cAAgB,EAAI,EAC7CC,SAAUC,KAAKC,UAAU,wBACK,0BACD,8BACG,4BACD,oBACT,OAGtBC,WAAaC,cAAKC,KAAK,CAAC,CACxBC,WAAY,gCACZC,KAAM,CACFC,SAAUP,KAAKC,UAAUd,OAE7BE,UAAWN,EAAEO,IAAID,aACjB,GAEAmB,cAAgBR,KAAKS,MAAMP,KAAKf,0CACtB,oBAAqB,CAC/BhC,WAAYqD,cACZE,OAAQ,4BAGV,iBAAiBC,MAAM,QAY7BC,iBAAiBC,KAAMC,WACf/D,KAAOF,YACEyB,MAAMsC,iBAAiBC,KAAMC,OACrCxD,GAAG,SAAU,sBAAsB,SAASE,GAC7CA,EAAEuD,uBACIC,eAAgB,mBAAEnE,MAAMsC,KAAK,qBAE9BpC,KAAKkE,yBAAwB,mBAAEpE,MAAMqE,cACtCnE,KAAKoE,gBAAgBpC,EAAEC,KAAKC,WAAW,yBAA0B,iDAC/DpC,MAAMqE,IAAIF,qBAKVI,OAAQ,mBAAEvE,MAAMqE,MAAMG,MAAM,KAC5BxD,UAA+B,KAAnBI,OAAOmD,MAAM,IAAgC,GAAnBnD,OAAOmD,MAAM,IAAWnD,OAAOmD,MAAM,QAC5ErE,KAAKuE,qBAAqBzD,WAAY,OACjC0D,QAAUxC,EAAEC,KAAKC,WAAW,kDAAmD,uBAAwB,OAChGlC,KAAK4B,oBAAoB5B,KAAKyE,WAChCzE,KAAK4B,oBAAoB5B,KAAKqC,cAEzCrC,KAAKoE,gBAAgBI,iCACnB1E,MAAMqE,IAAIF,kBAKZnD,WAAaI,QAAO,mBAAE,oBAAoBiD,cAC1CnE,KAAKoE,gBAAgBpC,EAAEC,KAAKC,WAAW,uCAAwC,iDAC7EpC,MAAMqE,IAAIF,mCAId,gBAAgBE,IAAIrD,cAEnB,CAACgD,KAAAA,KAAMC,MAAAA,OAYlBW,4BAA4BtE,eACpBA,WAAWU,UAAYhB,KAAK2E,OAASrE,WAAWU,UAAYhB,KAAKuC,iBAG/DsC,YAAezD,OAAOd,WAAWU,WAAahB,KAAK2E,OAAS3E,KAAK+B,UAAa,IAC9E+C,QAAU1D,OAAOd,WAAWW,OAASG,OAAOd,WAAWU,YAAchB,KAAK+B,UAAY,IACxF/B,KAAK+E,UAAUzE,cAAgBN,KAAKC,kCAClC,iBAAiB+E,uCAAgC1E,WAAWC,+BAC3DP,KAAKiF,YAAY3E,YAAc,GAAK,4HACnBA,WAAWU,gCAAuBV,WAAW4E,6CAC/CL,gCAAuBC,sKAEM9E,KAAK0C,KAAKyC,wBAEzDnF,KAAKC,kCACH,2BAA2B+E,6GACN1E,WAAWU,gCAAuBV,WAAW4E,6DAClCL,gCAAuBC,6OAe5CxE,gCACf,gBAAgB0E,0GACLhF,KAAK0C,KAAKyC,0CACrB,gBAAgBC,OAAO,WACnBpF,KAAKkB,OAAOC,KAAKC,OAAOd,WAAWW,OAAS,UAC7CC,OAAOmE,OACZC,YAAW,yBACL,gBAAgBC,QAAQ,KAC1BD,YAAW,yBACL,gBAAgB1D,WACnB,OACJ"}