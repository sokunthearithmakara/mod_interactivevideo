{"version":3,"file":"main.min.js","sources":["../src/main.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Main class for the form plugin.\n *\n * @module     ivplugin_form/main\n * @copyright  2024 Sokunthearith Makara <sokunthearithmakara@gmail.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\nimport $ from 'jquery';\nimport Base from 'mod_interactivevideo/type/base';\nimport {dispatchEvent} from 'core/event_dispatcher';\nimport 'mod_interactivevideo/libraries/jquery-ui';\nimport Templates from 'core/templates';\nimport DynamicForm from 'core_form/dynamicform';\nimport {renderAnnotationLogs} from 'mod_interactivevideo/report';\nimport {notifyFilterContentUpdated as notifyFilter} from 'core_filters/events';\nexport default class Form extends Base {\n    postEditCallback() {\n        // Do nothing\n    }\n\n    async renderViewer(annotation) {\n        let self = this;\n        if (this.isEditMode()) {\n            let formfields = [\n                {\n                    'icon': 'bi bi-alphabet-uppercase',\n                    'type': 'header',\n                    'label': M.util.get_string('headerfield', 'ivplugin_form'),\n                },\n                {\n                    'icon': 'bi bi-text-paragraph',\n                    'type': 'html',\n                    'label': M.util.get_string('htmlfield', 'ivplugin_form'),\n                },\n                {\n                    'icon': 'bi bi-hr',\n                    'type': 'linebreak',\n                    'label': M.util.get_string('linebreakfield', 'ivplugin_form'),\n                },\n                {\n                    'icon': 'bi bi-input-cursor-text',\n                    'type': 'text',\n                    'label': M.util.get_string('textfield', 'ivplugin_form'),\n                },\n                {\n                    'icon': 'bi bi-textarea-resize',\n                    'type': 'textarea',\n                    'label': M.util.get_string('textareafield', 'ivplugin_form'),\n                },\n                {\n                    'icon': 'bi bi-card-text',\n                    'type': 'editor',\n                    'label': M.util.get_string('editorfield', 'ivplugin_form'),\n                },\n                {\n                    'icon': 'bi bi-menu-button-wide',\n                    'type': 'select',\n                    'label': M.util.get_string('selectfield', 'ivplugin_form'),\n                },\n                {\n                    'icon': 'bi bi-check2-square',\n                    'type': 'advcheckbox',\n                    'label': M.util.get_string('advcheckboxfield', 'ivplugin_form'),\n                },\n                {\n                    'icon': 'bi bi-record-circle',\n                    'type': 'radio',\n                    'label': M.util.get_string('radiofield', 'ivplugin_form'),\n                },\n                {\n                    'icon': 'bi bi-calendar',\n                    'type': 'date_selector',\n                    'label': M.util.get_string('dateselectorfield', 'ivplugin_form'),\n                },\n                {\n                    'icon': 'bi bi-stopwatch',\n                    'type': 'duration',\n                    'label': M.util.get_string('durationfield', 'ivplugin_form'),\n                },\n                {\n                    'icon': 'bi bi-file-earmark-arrow-up',\n                    'type': 'filemanager',\n                    'label': M.util.get_string('filemanagerfield', 'ivplugin_form'),\n                }\n            ];\n            const dataForTemplate = {\n                id: annotation.id,\n                items: formfields,\n            };\n            const template = await Templates.render('ivplugin_form/formedit_modal', dataForTemplate);\n            let $modal = $(template);\n            $modal.appendTo('body');\n            $('#form-modal').modal('show');\n\n            $('#form-modal').on('hidden.bs.modal', function() {\n                $(this).remove();\n            });\n\n            $('#form-modal').on('shown.bs.modal', async function() {\n                const content = await self.render(annotation, 'json');\n                self.postContentRender(annotation, formfields, content);\n            });\n\n        } else {\n            await super.renderViewer(annotation);\n            const content = await self.render(annotation, 'json');\n            $(`#message[data-id='${annotation.id}']`).find('#content')\n                .append('<div id=\"formmeta\" class=\"mb-3 d-flex\"></div><div id=\"form-preview\"></div>');\n            this.postContentRender(annotation, '', content);\n        }\n    }\n\n    postContentRender(annotation, formfields, content, reportpage = false) {\n        let self = this;\n        if (annotation.text1 != 0) {\n            $(`#message[data-id='${annotation.id}'] #formmeta`)\n                .append(`<div class=\"duedate\">${M.util.get_string('duedate', 'ivplugin_form')}: ${content.duedate}</div>`);\n        }\n\n        const fetchData = () => {\n            return new Promise((resolve, reject) => {\n                $.ajax({\n                    url: M.cfg.wwwroot + '/mod/interactivevideo/ajax.php',\n                    method: \"POST\",\n                    dataType: \"text\",\n                    data: {\n                        action: 'get_log',\n                        sesskey: M.cfg.sesskey,\n                        userid: this.userid,\n                        cm: annotation.annotationid,\n                        annotationid: annotation.id,\n                        contextid: M.cfg.contextid,\n                        cmid: self.cmid,\n                        token: self.token,\n                    },\n                    success: function(data) {\n                        let log = JSON.parse(data);\n                        resolve(log);\n                    },\n                    error: function(error) {\n                        reject(error);\n                    }\n                });\n            });\n        };\n\n        let formjson = [];\n        const renderList = (data) => {\n            $(`#form-field-list`).empty();\n            if (data) {\n                data.forEach((item) => {\n                    let icon = formfields.find((field) => field.type === item.type).icon;\n                    $(`#form-field-list`)\n                        .append(`<li class=\"list-group-item d-flex align-items-start justify-content-between p-0\"\n                         data-id=\"${item.id}\" data-properties='${JSON.stringify(item)}' data-type=\"${item.type}\">\n                                    <div class=\"d-flex align-items-start pt-1\">\n                                    <i class=\"bi bi-grip-vertical px-2 cursor-move\"></i>\n                                    <i class=\"${icon} mr-2\"></i>\n                                    <div class=\"d-inline-block field-label\">${item.formattedlabel}</div></div>\n                                    <div class=\"ml-auto d-flex\">\n                                        <button class=\"btn btn-sm rounded-0\"\n                                         id=\"edit\" title=\"${M.util.get_string('edit', 'mod_interactivevideo')}\">\n                                         <i class=\"bi bi-pencil-square\"></i></button>\n                                        <button class=\"btn btn-sm rounded-0\"\n                                         id=\"copy\" title=\"${M.util.get_string('clone', 'mod_interactivevideo')}\">\n                                         <i class=\"bi bi-copy\"></i></button>\n                                        <button class=\"btn btn-sm rounded-0 text-danger\"\n                                         id=\"delete\" title=\"${M.util.get_string('delete', 'mod_interactivevideo')}\">\n                                         <i class=\"bi bi-trash3\"></i></button>\n                                        </div>\n                                </li>`);\n                });\n            }\n        };\n\n        let previewform; // DynamicForm instance.\n        const previewForm = (data, id = null) => {\n            $(`#message[data-id='${annotation.id}']`).find(`#form-preview`).empty();\n            const selector = document.querySelector(`#message[data-id='${annotation.id}'] #form-preview`);\n            previewform = new DynamicForm(selector, 'ivplugin_form\\\\submitform_form');\n            if (data === null || data.length == 0) {\n                $('#form-preview').removeClass('loader');\n                return;\n            }\n            $('#form-preview').addClass('loader');\n            formdata.formjson = JSON.stringify(data);\n            previewform.load(formdata);\n            if (id) {\n                // Loop until the form element is found and highlight the current field.\n                let interval = setInterval(() => {\n                    let element = document.querySelector('#form-preview form');\n                    if (element) {\n                        clearInterval(interval);\n                        $(`#form-preview #fitem_field-${id},\n                             #form-preview fieldset[id^=id_field-${id}],\n                             #form-preview div#field-${id}, #form-preview [data-groupname=field-${id}],\n                             #form-preview [id^=fitem_id_field-${id}]`).addClass('field-highlight');\n                        let field = element.querySelector(`#form-preview .field-highlight`);\n                        field.scrollIntoView({behavior: 'smooth', block: 'center'});\n                    }\n                }, 100);\n            }\n        };\n\n        if (content && content.fields != '' && content.fields !== null) {\n            formjson = content.fields;\n        }\n\n        let formdata = {};\n        if (reportpage) {\n            formdata = {\n                id: annotation.id,\n                contextid: M.cfg.contextid,\n                type: 'form',\n                courseid: M.cfg.courseId,\n                annotationid: 0,\n                editing: 0,\n                formjson: JSON.stringify(formjson),\n            };\n            previewForm(formjson);\n            return;\n        }\n\n        formdata = {\n            id: annotation.id,\n            contextid: M.cfg.contextid,\n            type: self.prop.name,\n            courseid: self.course,\n            annotationid: self.interaction,\n            editing: self.isEditMode() ? 1 : 0,\n            formjson: JSON.stringify(formjson),\n        };\n\n        if (this.isEditMode()) {\n            renderList(formjson);\n        }\n\n        if (!this.isEditMode()) {\n            if (annotation.completed) {\n                fetchData()\n                    .then((log) => {\n                        if (log) {\n                            const submission = JSON.parse(log.text1);\n                            const newformjson = formjson.map((item) => {\n                                item.value = submission['field-' + item.id];\n                                item.default = submission['field-' + item.id];\n                                return item;\n                            });\n                            formdata.reviewing = 1;\n                            formdata.submissionid = submission.id;\n                            previewForm(newformjson);\n                            // Append the edit button if applicable\n                            if (annotation.char2 == 1 && (annotation.text1 == 0\n                                || annotation.text1 > new Date().getTime() / 1000)) {\n                                $('#formmeta').append(`<button class=\"btn btn-primary ml-auto btn-sm\" id=\"editsubmission\">\n                                    <i class=\"bi bi bi-pencil-square mr-2\"></i>${M.util.get_string('edit', 'mod_interactivevideo')}\n                                    </button>`);\n                            }\n                        } else {\n                            if (annotation.text1 == 0 || annotation.text1 > new Date().getTime() / 1000) {\n                                previewForm(formjson);\n                            }\n                        }\n                        return;\n                    })\n                    .catch(() => {\n                        // Do nothing.\n                    });\n            } else {\n                if (annotation.text1 == 0 || annotation.text1 > new Date().getTime() / 1000) {\n                    previewForm(formjson);\n                } else {\n                    $('#formmeta').replaceWith(`<div class=\"alert alert-warning\">\n                        ${M.util.get_string('formnolongeravailable', 'ivplugin_form')}</div>`);\n                }\n            }\n        } else {\n            previewForm(formjson);\n        }\n\n        if (this.isEditMode()) {\n            const getFormJson = () => {\n                formjson = $('#form-field-list').find('li').map(function() {\n                    return JSON.parse($(this).attr('data-properties'));\n                }).get();\n            };\n            $('#form-field-list').sortable({\n                handle: '.bi-grip-vertical',\n                placeholder: \"ui-state-highlight\",\n                stop: function() {\n                    getFormJson();\n                    renderList(formjson);\n                    previewForm(formjson);\n                }\n            });\n            // Add the form field.\n            $(document).on('click', 'button.add-field', function(e) {\n                e.preventDefault();\n                e.stopImmediatePropagation();\n                let type = $(this).data('type');\n                let typeString = M.util.get_string(type + 'field', 'ivplugin_form');\n                let newfieldmodal = `<div class=\"modal fade\" id=\"newfield-modal\" aria-labelledby=\"newfield-modal\"\n                 aria-hidden=\"true\" style=\"background: rgba(0,0,0,0.5);\">\n                    <div class=\"modal-dialog modal-lg modal-dialog-centered modal-dialog-scrollable\">\n                        <div class=\"modal-content\">\n                            <div class=\"modal-header\">\n                                <h5 class=\"modal-title\">${M.util.get_string('addformfield', 'ivplugin_form',\n                    typeString.toLowerCase())}</h5>\n                                <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">\n                                <span aria-hidden=\"true\">&times;</span>\n                                </button>\n                            </div>\n                            <div class=\"modal-body loader\">\n                            </div>\n                            <div class=\"modal-footer\">\n                                <button type=\"button\" class=\"btn btn-secondary\" data-dismiss=\"modal\">${M.util.get_string('close',\n                        'mod_interactivevideo')}</button>\n                                <button type=\"button\" class=\"btn btn-primary\" id=\"newfield-submit\">${M.util.get_string('save',\n                            'mod_interactivevideo')}</button>\n                            </div>\n                        </div>\n                    </div>\n                </div>`;\n                $('body').append(newfieldmodal);\n                $('#newfield-modal').modal('show');\n                $('#newfield-modal').on('hidden.bs.modal', function() {\n                    $(this).remove();\n                    $('body').addClass('modal-open');\n                });\n                $('#newfield-modal').on('shown.bs.modal', function() {\n                    let formfieldform = new DynamicForm(document.querySelector('#newfield-modal .modal-body'),\n                        'ivplugin_form\\\\form_fields\\\\' + type);\n                    let fields = [];\n                    if (formjson !== null) {\n                        fields = formjson.map((item) => {\n                            return {\n                                id: item.id,\n                                label: item.label,\n                                type: item.type,\n                            };\n                        });\n                    }\n\n                    formfieldform.load({\n                        contextid: M.cfg.contextid,\n                        type: type,\n                        annotationid: annotation.id,\n                        fields: JSON.stringify(fields),\n                    });\n\n                    document.querySelector('#newfield-submit').addEventListener('click', (e) => {\n                        e.preventDefault();\n                        const event = formfieldform.trigger(formfieldform.events.SUBMIT_BUTTON_PRESSED);\n                        if (!event.defaultPrevented) {\n                            formfieldform.submitFormAjax();\n                        }\n                    });\n\n                    formfieldform.addEventListener(formfieldform.events.FORM_SUBMITTED, (e) => {\n                        e.preventDefault();\n                        const response = e.detail;\n                        formjson.push(response);\n                        renderList(formjson);\n                        previewForm(formjson, response.id);\n                        $('#newfield-modal').modal('hide');\n                    });\n\n                    self.setModalDraggable('#newfield-modal .modal-dialog');\n\n                });\n            });\n\n            $(document).on('click', '#form-field-list button#edit', function(e) {\n                e.preventDefault();\n                e.stopImmediatePropagation();\n                let type = $(this).closest('li').attr('data-type');\n                let formfielddata = JSON.parse($(this).closest('li').attr('data-properties'));\n                let fields = formjson.map((item) => {\n                    return {\n                        id: item.id,\n                        label: item.label,\n                        type: item.type,\n                    };\n                });\n                formfielddata.fields = JSON.stringify(fields);\n                let typeString = M.util.get_string(type + 'field', 'ivplugin_form');\n                let editform = `<div class=\"modal fade\" id=\"editfield-modal\"\n                 aria-labelledby=\"editfield-modal\" aria-hidden=\"true\" style=\"background: rgba(0,0,0,0.5);\">\n                    <div class=\"modal-dialog modal-lg modal-dialog-centered modal-dialog-scrollable\">\n                        <div class=\"modal-content\">\n                            <div class=\"modal-header\">\n                                <h5 class=\"modal-title\">${M.util.get_string('editformfield',\n                    'ivplugin_form', typeString.toLowerCase())}</h5>\n                                <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">\n                                <span aria-hidden=\"true\">&times;</span>\n                                </button>\n                            </div>\n                            <div class=\"modal-body loader\">\n                            </div>\n                            <div class=\"modal-footer\">\n                                <button type=\"button\" class=\"btn btn-secondary\" data-dismiss=\"modal\">${M.util.get_string('close',\n                        'mod_interactivevideo')}</button>\n                                <button type=\"button\" class=\"btn btn-primary\" id=\"editfield-submit\">${M.util.get_string('save',\n                            'mod_interactivevideo')}</button>\n                            </div>\n                        </div>\n                    </div>\n                </div>`;\n                $('body').append(editform);\n                $('#editfield-modal').modal('show');\n                $('#editfield-modal').on('hidden.bs.modal', function() {\n                    $(this).remove();\n                    $('body').addClass('modal-open');\n                });\n                $('#editfield-modal').on('shown.bs.modal', function() {\n                    let formfieldform = new DynamicForm(document.querySelector('#editfield-modal .modal-body'),\n                        'ivplugin_form\\\\form_fields\\\\' + type);\n                    formfieldform.load(formfielddata);\n\n                    document.querySelector('#editfield-submit').addEventListener('click', (e) => {\n                        e.preventDefault();\n                        const event = formfieldform.trigger(formfieldform.events.SUBMIT_BUTTON_PRESSED);\n                        if (!event.defaultPrevented) {\n                            formfieldform.submitFormAjax();\n                        }\n                    });\n\n                    formfieldform.addEventListener(formfieldform.events.FORM_SUBMITTED, (e) => {\n                        e.preventDefault();\n                        const response = e.detail;\n                        const index = formjson.findIndex((item) => item.id == response.id);\n                        if (index !== -1) {\n                            formjson[index] = response;\n                        }\n                        renderList(formjson);\n                        previewForm(formjson, response.id);\n                        $('#editfield-modal').modal('hide');\n                    });\n\n                    self.setModalDraggable('#editfield-modal .modal-dialog');\n                });\n            });\n\n            $(document).on('click', '#form-field-list button#copy', function(e) {\n                e.preventDefault();\n                e.stopImmediatePropagation();\n                let formfielddata = JSON.parse($(this).closest('li').attr('data-properties'));\n                const index = formjson.findIndex((item) => item.id == formfielddata.id);\n                if (index !== -1) {\n                    formfielddata.id = Math.floor(new Date().getTime() / 1000);\n                    formjson.splice(index + 1, 0, formfielddata);\n                }\n                renderList(formjson);\n                previewForm(formjson, formfielddata.id);\n            });\n\n            $(document).on('click', '#form-field-list button#delete', function(e) {\n                e.preventDefault();\n                e.stopImmediatePropagation();\n                let id = $(this).closest('li').attr('data-id');\n                formjson = formjson.filter((item) => item.id != id);\n                renderList(formjson);\n                previewForm(formjson);\n            });\n\n            $(document).on('click', 'button#save', function(e) {\n                e.preventDefault();\n                e.stopImmediatePropagation();\n                getFormJson();\n                let json = formjson.map((item) => {\n                    delete item.annotationid;\n                    delete item.contextid;\n                    delete item.formattedlabel;\n                    return item;\n                });\n                let cleanItems = JSON.stringify(json).replace(/</g, '&lt;').replace(/>/g, '&gt;');\n                $.ajax({\n                    url: M.cfg.wwwroot + '/mod/interactivevideo/ajax.php',\n                    method: \"POST\",\n                    dataType: \"text\",\n                    data: {\n                        action: 'quickeditfield',\n                        sesskey: M.cfg.sesskey,\n                        id: annotation.id,\n                        field: 'content',\n                        contextid: M.cfg.contextid,\n                        draftitemid: 0,\n                        value: cleanItems,\n                        cmid: self.cmid,\n                        token: self.token,\n                    },\n                    success: function(data) {\n                        let updated = JSON.parse(data);\n                        dispatchEvent('annotationupdated', {\n                            annotation: updated,\n                            action: 'edit',\n                        });\n                    }\n                });\n            });\n\n            $(document).on('click', '#form-field-list li .field-label', function() {\n                let id = $(this).closest('li').attr('data-id');\n                $(`#form-preview #fitem_field-${id}, #form-preview fieldset[id^=id_field-${id}],\n                     #form-preview div#field-${id}, #form-preview [data-groupname=field-${id}],\n                      #form-preview [id^=fitem_id_field-${id}]`).addClass('field-highlight');\n                let $collapsible = $('.field-highlight').closest('fieldset.collapsible');\n                if ($collapsible && $collapsible.find('[data-toggle=\"collapse\"]').hasClass('collapsed')) {\n                    $collapsible.find('[data-toggle=\"collapse\"]').trigger('click');\n                }\n                let field = document.querySelector(`#form-preview .field-highlight`);\n                field.scrollIntoView({behavior: 'smooth', block: 'center'});\n            });\n\n            $(document).on('mouseover', '#form-field-list li', function() {\n                $(`#form-preview .field-highlight`).removeClass('field-highlight');\n                const id = $(this).attr('data-id');\n                $(`#form-preview #fitem_field-${id}, #form-preview fieldset[id^=id_field-${id}],\n                     #form-preview div#field-${id}, #form-preview [data-groupname=field-${id}],\n                      #form-preview [id^=fitem_id_field-${id}]`).addClass('field-highlight');\n            });\n\n            $(document).on('mouseout', '#form-field-list li', function() {\n                $(`#form-preview .field-highlight`).removeClass('field-highlight');\n            });\n\n            $(document).on('mouseover', '#form-preview .fitem', function() {\n                $(`#form-field-list li`).removeClass('field-highlight');\n                let group = $(this).attr('data-groupname');\n                let id;\n                if (group) {\n                    id = group.replace('field-', '');\n                } else {\n                    try {\n                        id = $(this).attr('id').match(/\\d{10}/)[0];\n                    } catch (e) {\n                        id = $(this).closest('[data-groupname]').attr('data-groupname').replace('field-', '');\n                    }\n\n                }\n                $(`#form-field-list li[data-id=${id}]`).addClass('field-highlight');\n            });\n\n            $(document).on('mouseout', '#form-preview .fitem', function() {\n                $(`#form-field-list li`).removeClass('field-highlight');\n            });\n\n            $(document).on('click', '#form-preview i#edit', function(e) {\n                e.preventDefault();\n                e.stopImmediatePropagation();\n                let id = $(this).data('id');\n                $(`#form-field-list li[data-id=${id}] button#edit`).trigger('click');\n            });\n\n            $(document).on('click', '#form-preview i#delete', function(e) {\n                e.preventDefault();\n                e.stopImmediatePropagation();\n                let id = $(this).data('id');\n                $(`#form-field-list li[data-id=${id}] button#delete`).trigger('click');\n            });\n\n            $(document).on('click', '#form-preview i#copy', function(e) {\n                e.preventDefault();\n                e.stopImmediatePropagation();\n                let id = $(this).data('id');\n                $(`#form-field-list li[data-id=${id}] button#copy`).trigger('click');\n            });\n        } else {\n            if (annotation.completiontracking && annotation.completiontracking != 'manual') {\n                let $message = $(`#message[data-id='${annotation.id}']`);\n\n                // Disable the mark-done and mark-undone buttons\n                $message.find(`#completiontoggle`).prop('disabled', true);\n                if (annotation.completed == true) {\n                    $message.find(`#completiontoggle span`)\n                        .text(`${M.util.get_string('completioncompleted', 'mod_interactivevideo')}`);\n                } else {\n                    $message.find(`#completiontoggle span`)\n                        .text(`${M.util.get_string('completionincomplete', 'mod_interactivevideo')}`);\n                }\n            }\n\n            $(document).on('click', `#message[data-id='${annotation.id}'] #submitform-submit`, async (e) => {\n                e.preventDefault();\n                e.stopImmediatePropagation();\n                const event = previewform.trigger(previewform.events.SUBMIT_BUTTON_PRESSED);\n                if (!event.defaultPrevented) {\n                    previewform.submitFormAjax();\n                }\n                previewform.addEventListener(previewform.events.FORM_SUBMITTED, () => {\n                    self.toggleCompletion(annotation.id, 'mark-done', 'automatic');\n                    formdata.reviewing = 1;\n                    if (annotation.char2 == 1 && (annotation.text1 == 0 || annotation.text1 > new Date().getTime() / 1000)) {\n                        $('#editsubmission').show();\n                    }\n                    previewForm(formjson);\n                });\n            });\n\n            $(document).on('click', `#message[data-id='${annotation.id}'] #editsubmission`, (e) => {\n                e.preventDefault();\n                e.stopImmediatePropagation();\n                formdata.reviewing = 0;\n                $('#editsubmission').hide();\n                previewForm(formjson);\n            });\n\n            $(document).on('click', `#message[data-id='${annotation.id}'] #cancel-submit`, (e) => {\n                e.preventDefault();\n                e.stopImmediatePropagation();\n                formdata.reviewing = 1;\n                $('#editsubmission').show();\n                previewForm(formjson);\n            });\n        }\n    }\n\n    completionCallback(annotations, thisItem, action, type) {\n        let msg = 'formupdated';\n        if (!thisItem.completed) {\n            msg = 'formsubmitted';\n        }\n        super.completionCallback(annotations, thisItem, action, type);\n        if (type == 'automatic') {\n            this.addNotification(M.util.get_string(msg, 'ivplugin_form'), 'success');\n        }\n    }\n\n    renderForm(annotation, f, response, node) {\n        let self = this;\n        const getFormJson = () => {\n            self.render(annotation, 'json').then((content) => {\n                return new Promise((resolve) => {\n                    let formfields = content.fields;\n                    resolve(formfields);\n                });\n            }).catch(() => {\n                // Do nothing.\n            });\n        };\n\n        let formdata = {\n            id: annotation.id,\n            contextid: M.cfg.contextid,\n            type: 'form',\n            courseid: M.cfg.courseId,\n            annotationid: 0,\n            editing: 0,\n        };\n\n        const render = (ff) => {\n            $(`#message[data-id='${annotation.id}']`).find(`${node} #form-preview`).addClass('loader').empty();\n            let newformjson = ff;\n            if (response !== null) {\n                const submission = JSON.parse(response.text1);\n                newformjson = ff.map((item) => {\n                    item.value = submission['field-' + item.id];\n                    item.default = submission['field-' + item.id];\n                    return item;\n                });\n                formdata.reviewing = 1;\n                formdata.submissionid = submission.id;\n            }\n\n            formdata.formjson = JSON.stringify(newformjson);\n\n            const previewform = new DynamicForm(document.\n                querySelector(`#message[data-id='${annotation.id}'] ${node} #form-preview`),\n                'ivplugin_form\\\\submitform_form');\n            previewform.load(formdata);\n        };\n\n        if (!f) {\n            getFormJson().then((fields) => {\n                return render(fields);\n            }).catch(() => {\n                // Do nothing.\n            });\n        } else {\n            render(f);\n        }\n\n    }\n    /**\n     * What happens when an item runs\n     * @param {Object} annotation The annotation object\n     * @returns {void}\n     */\n    runInteraction(annotation) {\n        this.player.pause();\n        let self = this;\n        if (this.isEditMode()) {\n            annotation.editmode = true; // Use editmode to render the draft content (i.e draft.php vs plugin.php).\n        }\n\n        // First render container\n        this.renderViewer(annotation);\n\n        this.enableManualCompletion();\n        if (annotation.displayoptions == 'popup') {\n            $('#annotation-modal').on('shown.bs.modal', function() {\n                self.setModalDraggable('#annotation-modal .modal-dialog');\n            });\n        }\n    }\n\n    /**\n     * Render annotation view on the report page\n     * @param {Object} annotation The annotation object\n     * @param {Array} tabledata Completion data from the report table\n     * @returns {void}\n     */\n    displayReportView(annotation, tabledata) {\n        let self = this;\n        let $message = $(`#message[data-id='${annotation.id}']`);\n        $message.closest('.modal').addClass('modal-fullscreen');\n        $message.find('#content').html(`<div class=\"tab-content\" id=\"myTabContent\">\n            <div class=\"tab-pane fade\" id=\"formtab\" role=\"tabpanel\">\n            <div id=\"formmeta\" class=\"mb-3 d-flex\"></div><div id=\"form-preview\"></div></div>\n            <div class=\"tab-pane fade show active\" id=\"responsetab\" role=\"tabpanel\"></div>\n            </div><div class=\"shadow z-index-1 h-100 bg-white overflow-auto\" id=\"responseview\">\n            <div class=\"modal-header d-flex bg-white align-items-center pr-0 sticky-top\" id=\"title\">\n                                            <h5 class=\"modal-title text-truncate mb-0\"><div class=\"d-flex align-items-center p-1\">\n                                                <select id=\"submission-list\"\n                                                class=\"custom-select rounded-sm mr-1\"></select>\n                                                <button class=\"btn p-0 previous\">\n                                                <i class=\"bi bi-chevron-left fa-fw fs-25px\"></i>\n                                                </button>\n                                                <button class=\"btn p-0 next\">\n                                                <i class=\"bi bi-chevron-right fa-fw fs-25px\"></i>\n                                                </button>\n                                            </div></h5>\n                                            <div class=\"d-flex align-items-center\">\n                                                <button class=\"btn mx-2 p-0 close\">\n                                                <i class=\"bi bi-x-lg fa-fw fs-25px\"></i>\n                                                </button>\n                                            </div>\n                                        </div>\n            <div id=\"form-preview\"></div>\n            </div>`);\n        $message.find('.btns')\n            .prepend(`<button class=\"rotatey-180 btn btn-sm mr-2 border-0\" data-toggle=\"tab\" data-target=\"#formtab\">\n            <i class=\"bi bi-input-cursor-text fs-25px\"  data-toggle=\"tooltip\"\n             title=\"${M.util.get_string('form', 'ivplugin_form')}\"></i></button>\n            <button class=\"rotatey-180 btn btn-sm mr-2 border-0\" data-toggle=\"tab\" data-target=\"#responsetab\">\n            <i class=\"bi bi-table fs-25px\" data-toggle=\"tooltip\"\n             title=\"${M.util.get_string('responses', 'ivplugin_form')}\"></i>\n            </button>`);\n\n        this.render(annotation, 'json').then(async (ct) => {\n            let logs = [];\n            let users = [];\n            const fields = JSON.stringify([...ct.fields]); // Copy the fields object.\n            let formfields = ct.fields;\n            let userids = tabledata.map((item) => item.id);\n            let logdata = await this.getLogs(annotation, userids);\n            logs = logdata;\n            logs.map(x => {\n                const completiondata = tabledata.find(y => y.id == x.userid);\n                x.completiondata = completiondata;\n                return x;\n            });\n\n            // We're going to build the table data.\n            let heading = [\n                {title: M.util.get_string('id', 'mod_interactivevideo'), \"class\": 'exportable'},\n                {title: M.util.get_string('timesubmitted', 'mod_interactivevideo'), \"class\": 'exportable time'},\n                {title: M.util.get_string('participant', 'mod_interactivevideo'), \"class\": ''},\n                {title: M.util.get_string('firstname', 'mod_interactivevideo'), \"class\": 'exportable'},\n                {title: M.util.get_string('lastname', 'mod_interactivevideo'), \"class\": 'exportable'},\n                {title: M.util.get_string('email', 'mod_interactivevideo'), \"class\": 'exportable'},\n            ];\n\n            let validfields = [];\n\n            formfields.forEach(f => {\n                if (f.type != 'header' && f.type != 'html' && f.type != 'linebreak') {\n                    let head = f.formattedlabel;\n                    if (f.helptext.text && f.helptext.text != '') {\n                        head = `<span>${f.formattedlabel}\n                            <i class=\"ml-2 bi bi-info-circle-fill text-secondary helptext\" data-fieldid=\"${f.id}\"\n                             data-toggle=\"popover\">\n                            </i></span>`;\n                    }\n                    heading.push({\n                        title: head,\n                        \"class\": 'exportable not-sortable',\n                    });\n                    validfields.push(f);\n                }\n            });\n\n            let rows = [];\n\n            logs.forEach(l => {\n                let submission = JSON.parse(l.text1);\n                let row = [\n                    l.id,\n                    `<a href=\"javascript:void(0)\" class=\"viewsubmission\" data-id=\"${l.id}\">${l.formattedtimecreated}</a>`,\n                    `<span class=\"text-truncate\">${l.completiondata.picture}</span>`,\n                    l.completiondata.firstname,\n                    l.completiondata.lastname,\n                    l.completiondata.email,\n                ];\n\n                validfields.forEach(async f => {\n                    let response = submission['field-' + f.id];\n                    if (response == undefined) {\n                        row.push('');\n                        return;\n                    }\n                    switch (f.type) {\n                        case 'text':\n                        case 'textarea':\n                            row.push(response);\n                            break;\n                        case 'editor':\n                            row.push(response.text);\n                            break;\n                        case 'select':\n                            var res = [];\n                            var options = f.options.split('\\n');\n                            options.forEach((option) => {\n                                option = option.trim();\n                                let choices = option.split('=');\n                                let value = choices[0];\n                                if (response.indexOf(value) > -1) {\n                                    res.push(choices[1]);\n                                }\n                            });\n                            row.push(res.join(', '));\n                            break;\n                        case 'radio':\n                            var options = f.options.split('\\n');\n                            options.forEach((option) => {\n                                option = option.trim();\n                                let choices = option.split('=');\n                                let value = choices[0];\n                                if (response == value) {\n                                    row.push(choices[1]);\n                                    return;\n                                }\n                            });\n                            break;\n                        case 'advcheckbox':\n                            var res = [];\n                            var options = f.options.split('\\n');\n                            var selected = Object.values(response);\n                            selected = selected.filter((item) => item != '');\n                            options.forEach((option) => {\n                                option = option.trim();\n                                let choices = option.split('=');\n                                let value = choices[0];\n                                if (selected.indexOf(value) > -1) {\n                                    res.push(choices[1]);\n                                }\n                            });\n                            row.push(res.join(', '));\n                            break;\n                        case 'date_selector':\n                            var date;\n                            if (response.day < 9) {\n                                date += '0' + response.day;\n                            } else {\n                                date += response.day;\n                            }\n                            date += '/';\n                            if (response.month < 9) {\n                                date += '0' + response.month;\n                            } else {\n                                date += response.month;\n                            }\n                            date += '/';\n                            date += response.year;\n                            if (response.hour && response.minute) {\n                                date += ' ';\n                                if (response.hour < 9) {\n                                    date += '0' + response.hour;\n                                } else {\n                                    date += response.hour;\n                                }\n                                date += ':';\n                                if (response.minute < 9) {\n                                    date += '0' + response.minute;\n                                } else {\n                                    date += response.minute;\n                                }\n                            }\n                            row.push(date);\n                            break;\n                        case 'duration':\n                            if (response) {\n                                row.push(response.number + ' ' + M.util.get_string(response.timeunit, 'ivplugin_form'));\n                            } else {\n                                row.push('');\n                            }\n                            break;\n                        case 'filemanager':\n                            if (response.length > 0) {\n                                const files = response.map((file) => {\n                                    const filename = file.split('/').pop();\n                                    return `<a href=\"${file}\" target=\"_blank\" class=\"text-truncate\">\n                                    ${decodeURIComponent(filename.replace('field-' + f.id + '_', ''))}<span class=\"d-none\">\n                                    [${file}]</span></a>`;\n                                });\n                                row.push(files.join(',<br>'));\n                            } else {\n                                row.push('');\n                            }\n                            break;\n                        default:\n                            break;\n                    }\n                });\n\n                rows.push(row);\n\n            });\n\n            users = logs.map((l) => {\n                return {\n                    id: l.id,\n                    fullname: `${l.completiondata.firstname} ${l.completiondata.lastname}`,\n                };\n            });\n\n            users.sort((a, b) => {\n                return a.fullname.localeCompare(b.fullname);\n            });\n\n            users.forEach((user) => {\n                $(`#message[data-id='${annotation.id}']`).find('#submission-list')\n                    .append(`<option value=\"${user.id}\">${user.fullname}</option>`);\n            });\n\n            $(`#message[data-id='${annotation.id}']`).find('#responsetab')\n                .html(`<div id=\"formresponsetable\" class=\"table-responsive\">\n                    <table class=\"table table-bordered table-striped w-100\">\n                    <thead>\n                        <tr>\n                            ${heading.map(h => `<th class=\"${h.class} text-truncate\">${h.title}</th>`).join('')}\n                        </tr>\n                    </thead>\n                    <tbody>\n                    </tbody>\n                    </table>\n                    </div>`);\n\n            renderAnnotationLogs({\n                heading: heading,\n                rows: rows,\n            }, '#formresponsetable');\n\n            $message.find('.btns').on('click', `[data-toggle=\"tab\"]`, function() {\n                $(`[data-toggle=\"tab\"]`).removeClass('active');\n                // Always remove the rendered form.\n                $(`#message[data-id='${annotation.id}']`).find(`#responseview #form-preview, .tab-content #form-preview`).empty();\n                if ($(this).data('target') == '#formtab') {\n                    self.renderForm(annotation, JSON.parse(fields), null, '#formtab');\n                }\n            });\n\n            $(document).on('click', `#message[data-id='${annotation.id}'] table .helptext`, async function(e) {\n                // Dismiss all other popovers.\n                $('.popover').remove();\n                e.preventDefault();\n                e.stopImmediatePropagation();\n                let $this = $(this);\n                let contentid = $(this).attr('data-fieldid');\n                let field = formfields.find((field) => field.id == contentid);\n                let content = field.helptext.text;\n                $this.popover({\n                    content: '<div class=\"loader\"></div>',\n                    title: `<span class=\"mr-2\">${field.formattedlabel}</span>`\n                        + `<i class=\"bi bi-x-circle-fill ml-auto popover-dismiss cursor-pointer\" style=\"font-size:1.5em;\"></i>`,\n                    placement: 'top',\n                    html: true,\n                    trigger: 'focus',\n                    template: `<div class=\"popover inlineannotation-popover id-${contentid}\"\n                     role=\"tooltip\"><div class=\"arrow\"></div><h3 class=\"popover-header d-flex justify-content-between\"></h3>\n                     <div class=\"popover-body rounded\"></div></div>`,\n                });\n                $this.popover('show');\n                $this.on('shown.bs.popover', async function() {\n                    let $body = $(`.popover.id-${contentid} .popover-body`);\n                    const html = await self.formatContent(content, M.cfg.contextid);\n                    $body.html(html);\n                    notifyFilter($body);\n                    $this.popover('update');\n                });\n            });\n\n            $(document).on('click', `.popover-dismiss`, function(e) {\n                e.stopImmediatePropagation();\n                $(this).closest('.popover').remove();\n            });\n\n            $(document).on('click', `#message[data-id='${annotation.id}'] .viewsubmission`, function(e) {\n                e.preventDefault();\n                e.stopImmediatePropagation();\n                let id = $(this).attr('data-id');\n                $(`#message[data-id='${annotation.id}']`).find('#responseview').addClass('show');\n                $(`#message[data-id='${annotation.id}']`).find('#submission-list').val(id).trigger('change');\n            });\n\n            $(document).on('change', `#message[data-id='${annotation.id}'] #submission-list`, function(e) {\n                e.preventDefault();\n                e.stopImmediatePropagation();\n                let id = $(this).val();\n                let log = logs.find((item) => item.id == id);\n                self.renderForm(annotation, formfields, log, '#responseview');\n                let index = users.findIndex((item) => item.id == id);\n                if (index > 0) {\n                    $(`#message[data-id='${annotation.id}']`).find('.previous').prop('disabled', false);\n                } else {\n                    $(`#message[data-id='${annotation.id}']`).find('.previous').prop('disabled', true);\n                }\n                if (index < users.length - 1) {\n                    $(`#message[data-id='${annotation.id}']`).find('.next').prop('disabled', false);\n                } else {\n                    $(`#message[data-id='${annotation.id}']`).find('.next').prop('disabled', true);\n                }\n            });\n\n            $(document).on('click', `#message[data-id='${annotation.id}'] #responseview .close`, function(e) {\n                e.preventDefault();\n                e.stopImmediatePropagation();\n                $(`#message[data-id='${annotation.id}']`).find('#responseview').removeClass('show');\n            });\n\n            $(document).on('click', `#message[data-id='${annotation.id}'] #responseview .previous`, function(e) {\n                e.preventDefault();\n                e.stopImmediatePropagation();\n                let id = $(`#message[data-id='${annotation.id}']`).find('#submission-list').val();\n                let index = users.findIndex((item) => item.id == id);\n                let prev = users[index - 1];\n                $(`#message[data-id='${annotation.id}']`).find('#submission-list').val(prev.id).trigger('change');\n            });\n\n            $(document).on('click', `#message[data-id='${annotation.id}'] #responseview .next`, function(e) {\n                e.preventDefault();\n                e.stopImmediatePropagation();\n                let id = $(`#message[data-id='${annotation.id}']`).find('#submission-list').val();\n                let index = users.findIndex((item) => item.id == id);\n                let next = users[index + 1];\n                $(`#message[data-id='${annotation.id}']`).find('#submission-list').val(next.id).trigger('change');\n            });\n            return;\n        }).catch(() => {\n            // Do nothing.\n        });\n    }\n}"],"names":["Form","Base","postEditCallback","annotation","self","this","isEditMode","formfields","M","util","get_string","dataForTemplate","id","items","template","Templates","render","appendTo","modal","on","remove","async","content","postContentRender","super","renderViewer","find","append","reportpage","text1","duedate","fetchData","Promise","resolve","reject","ajax","url","cfg","wwwroot","method","dataType","data","action","sesskey","userid","cm","annotationid","contextid","cmid","token","success","log","JSON","parse","error","formjson","renderList","empty","forEach","item","icon","field","type","stringify","formattedlabel","previewform","previewForm","selector","document","querySelector","DynamicForm","length","addClass","formdata","load","interval","setInterval","element","clearInterval","scrollIntoView","behavior","block","removeClass","fields","courseid","courseId","editing","prop","name","course","interaction","completed","then","submission","newformjson","map","value","default","reviewing","submissionid","char2","Date","getTime","catch","replaceWith","getFormJson","attr","get","sortable","handle","placeholder","stop","e","preventDefault","stopImmediatePropagation","typeString","newfieldmodal","toLowerCase","formfieldform","label","addEventListener","trigger","events","SUBMIT_BUTTON_PRESSED","defaultPrevented","submitFormAjax","FORM_SUBMITTED","response","detail","push","setModalDraggable","closest","formfielddata","editform","index","findIndex","Math","floor","splice","filter","json","cleanItems","replace","draftitemid","updated","$collapsible","hasClass","group","match","completiontracking","$message","text","toggleCompletion","show","hide","completionCallback","annotations","thisItem","msg","addNotification","renderForm","f","node","ff","runInteraction","player","pause","editmode","enableManualCompletion","displayoptions","displayReportView","tabledata","html","prepend","logs","users","ct","userids","logdata","getLogs","x","completiondata","y","heading","title","validfields","head","helptext","rows","l","row","formattedtimecreated","picture","firstname","lastname","email","undefined","res","options","split","option","choices","trim","indexOf","join","selected","Object","values","date","day","month","year","hour","minute","number","timeunit","files","file","filename","pop","decodeURIComponent","fullname","sort","a","b","localeCompare","user","h","class","$this","contentid","popover","placement","$body","formatContent","val","prev","next"],"mappings":"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"}