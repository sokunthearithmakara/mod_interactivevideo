{"version":3,"file":"main.min.js","sources":["../src/main.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Main class for content bank\n *\n * @module     ivplugin_contentbank/main\n * @copyright  2024 Sokunthearith Makara <sokunthearithmakara@gmail.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\nimport $ from 'jquery';\nimport contentbankutil from 'ivplugin_contentbank/util';\nimport ModalForm from 'core_form/modalform';\nimport Base from 'mod_interactivevideo/type/base';\n\nexport default class ContentBank extends Base {\n    /**\n     * Called when the edit form is loaded.\n     * @param {Object} form The form object\n     * @param {Event} event The event object\n     * @return {void}\n     */\n    onEditFormLoaded(form, event) {\n        let self = this;\n        let body = form.modal.modal.find('.modal-body');\n        contentbankutil.init(M.cfg.courseContextId);\n        // Refresh the content from the content bank.\n        body.off('click', '#refreshcontentbank').on('click', '#refreshcontentbank', function(e) {\n            e.preventDefault();\n            $(this).find('i').addClass('fa-spin');\n            const currentid = $('[name=contentid]').val();\n            $('.contentbank-container').html(`<div class=\"d-flex justify-content-center align-items-center\"\n            style=\"height: 150px;\"><div class=\"spinner-grow text-secondary\" role=\"status\">\n            <span class=\"sr-only\">Loading...</span></div></div>`);\n            contentbankutil.refreshContentBank(currentid, M.cfg.courseContextId, $(this).data('editable'), function() {\n                $('#refreshcontentbank i').removeClass('fa-spin');\n            });\n        });\n\n        // Upload a new content.\n        body.off('click', '#uploadcontentbank').on('click', '#uploadcontentbank', function(e) {\n            e.preventDefault();\n            const uploadForm = new ModalForm({\n                formClass: \"core_contentbank\\\\form\\\\upload_files\",\n                args: {\n                    contextid: M.cfg.courseContextId,\n                },\n                modalConfig: {\n                    title: M.util.get_string('uploadcontent', 'ivplugin_contentbank')\n                }\n            });\n\n            uploadForm.addEventListener(uploadForm.events.FORM_SUBMITTED, (e) => {\n                self.addNotification(M.util.get_string('contentuploaded', 'ivplugin_contentbank'), 'success');\n                const returnurl = e.detail.returnurl;\n                const contentid = returnurl.match(/id=(\\d+)/)[1];\n                $('[name=contentid]').val(contentid);\n                setTimeout(function() {\n                    $('#refreshcontentbank').trigger('click');\n                }, 1000);\n            });\n\n            uploadForm.addEventListener(uploadForm.events.ERROR, () => {\n                self.addNotification(M.util.get_string('contentuploaderror', 'ivplugin_contentbank'));\n            });\n\n            uploadForm.show();\n        });\n        return {form, event};\n    }\n\n    /**\n     * Handles the rendering of content annotations and applies specific classes and conditions.\n     *\n     * @param {Object} annotation - The annotation object containing details about the content.\n     * @param {Function} callback - The callback function to be executed if certain conditions are met.\n     * @returns {boolean|Function} - Returns true if the annotation does not meet the conditions for completion tracking,\n     *                               otherwise returns the callback function.\n     */\n    postContentRender(annotation, callback) {\n        $(`#message[data-id='${annotation.id}']`).addClass('hascontentbank');\n        if (annotation.hascompletion == 1\n            && annotation.completiontracking != 'manual' && !annotation.completed) {\n            return callback;\n        }\n        return true;\n    }\n\n    /**\n     * Initialize the container to display the annotation\n     * @param {Object} annotation The annotation object\n     * @returns {void}\n     */\n    renderContainer(annotation) {\n        super.renderContainer(annotation);\n        let $message = $(`#message[data-id='${annotation.id}']`);\n        $message.find('.modal-body').addClass('p-0');\n        let $completiontoggle = $message.find('#completiontoggle');\n        $message.find('#title .info').remove();\n        switch (annotation.completiontracking) {\n            case 'complete':\n                $completiontoggle.before(`<i class=\"bi bi-info-circle-fill mr-2\" data-toggle=\"tooltip\" data-container=\"#wrapper\"\n                    data-trigger=\"hover\"\n                     data-title=\"${M.util.get_string(\"completiononcomplete\", \"mod_interactivevideo\")}\"></i>`);\n                break;\n            case 'completepass':\n                $completiontoggle.before(`<i class=\"bi bi-info-circle-fill mr-2\" data-toggle=\"tooltip\" data-container=\"#wrapper\"\n    data-trigger=\"hover\"\n     data-title=\"${M.util.get_string(\"completiononcompletepass\", \"mod_interactivevideo\")}\"></i>`);\n                break;\n            case 'completefull':\n                $completiontoggle.before(`<i class=\"bi bi-info-circle-fill mr-2\" data-toggle=\"tooltip\" data-container=\"#wrapper\"\n            data-trigger=\"hover\" data-title=\"${M.util.get_string(\"completiononcompletefull\", \"mod_interactivevideo\")}\"></i>`);\n                break;\n        }\n        $message.find('[data-toggle=\"tooltip\"]').tooltip();\n        return $message;\n    }\n\n    /**\n     * Resizes the iframe within a modal body based on the height of the iframe content.\n     *\n     * @param {Object} annotation - The annotation object containing the id.\n     */\n    resizeIframe(annotation) {\n        const modalbody = document.querySelector(`#message[data-id='${annotation.id}'] .modal-body`);\n        const resizeObserver = new ResizeObserver(() => {\n            const iframe = modalbody.querySelector('iframe.h5p-player');\n            if (iframe) {\n                const height = iframe.scrollHeight;\n                modalbody.style.height = `${height + 2000}px`;\n            }\n        });\n\n        resizeObserver.observe(modalbody);\n    }\n\n    /**\n     * Run the interaction\n     * @param {Object} annotation The annotation object\n     * @returns {void}\n     */\n    async runInteraction(annotation) {\n        await this.player.pause();\n        const annoid = annotation.id;\n        let self = this;\n        let $message;\n\n        const xAPICheck = (annotation, listenToEvents = true) => {\n            const detectH5P = () => {\n                let H5P;\n                try { // Try to get the H5P object.\n                    H5P = document.querySelector(`#message[data-id='${annoid}'] iframe`).contentWindow.H5P;\n                } catch (e) {\n                    H5P = null;\n                }\n                if (typeof H5P !== 'undefined' && H5P !== null) {\n                    if (H5P.externalDispatcher === undefined) {\n                        requestAnimationFrame(detectH5P);\n                        return;\n                    }\n                    if (!listenToEvents) {\n                        return;\n                    }\n                    if (self.isEditMode()) {\n                        $message.find(`#title .btns .xapi`).remove();\n                        $message.find(`#title .btns`)\n                            .prepend(`<div class=\"xapi alert-secondary px-2\n                         rounded-pill\">${M.util.get_string('xapicheck', 'ivplugin_contentbank')}</div>`);\n                    }\n                    let statements = [];\n                    try {\n                        H5P.externalDispatcher.on('xAPI', function(event) {\n                            if (event.data.statement.verb.id == 'http://adlnet.gov/expapi/verbs/completed'\n                                || event.data.statement.verb.id == 'http://adlnet.gov/expapi/verbs/answered') {\n                                statements.push(event.data.statement);\n                            }\n                            if ((event.data.statement.verb.id == 'http://adlnet.gov/expapi/verbs/completed'\n                                || event.data.statement.verb.id == 'http://adlnet.gov/expapi/verbs/answered')\n                                && event.data.statement.object.id.indexOf('subContentId') < 0) {\n                                if (self.isEditMode()) {\n                                    $(`#message[data-id='${annotation.id}'] #title .btns .xapi`).remove();\n                                    $(`#message[data-id='${annotation.id}'] #title .btns`)\n                                        .prepend(`<div class=\"xapi alert-success d-inline px-2 rounded-pill\">\n                                        <i class=\"fa fa-check mr-2\"></i>\n                                        ${M.util.get_string('xapieventdetected', 'ivplugin_h5pupload')}\n                                        </div>`);\n                                    const audio = new Audio(M.cfg.wwwroot + '/mod/interactivevideo/sounds/pop.mp3');\n                                    audio.play();\n                                    return;\n                                }\n                                let complete = false;\n                                let textclass = '';\n                                if (annotation.completiontracking == 'completepass'\n                                    && event.data.statement.result && event.data.statement.result.score.scaled >= 0.5) {\n                                    complete = true;\n                                } else if (annotation.completiontracking == 'completefull'\n                                    && event.data.statement.result && event.data.statement.result.score.scaled == 1) {\n                                    complete = true;\n                                } else if (annotation.completiontracking == 'complete') {\n                                    complete = true;\n                                }\n                                if (event.data.statement.result.score.scaled < 0.5) {\n                                    textclass = 'fa fa-check text-danger';\n                                } else if (event.data.statement.result.score.scaled < 1) {\n                                    textclass = 'fa fa-check text-success';\n                                } else {\n                                    textclass = 'bi bi-check2-all text-success';\n                                }\n                                if (complete && !annotation.completed) {\n                                    let details = {};\n                                    const completeTime = new Date();\n                                    details.xp = annotation.xp;\n                                    if (annotation.char1 == '1') { // Partial points.\n                                        details.xp = (event.data.statement.result.score.scaled * annotation.xp).toFixed(2);\n                                    }\n                                    details.duration = completeTime.getTime() - $('#video-wrapper').data('timestamp');\n                                    details.timecompleted = completeTime.getTime();\n                                    const completiontime = completeTime.toLocaleString();\n                                    let duration = self.formatTime(details.duration / 1000);\n                                    details.reportView = `<span data-toggle=\"tooltip\" data-html=\"true\"\n                     data-title='<span class=\"d-flex flex-column align-items-start\"><span><i class=\"bi bi-calendar mr-2\"></i>\n                     ${completiontime}</span><span><i class=\"bi bi-stopwatch mr-2\"></i>${duration}</span>\n                     <span><i class=\"bi bi-list-check mr-2\"></i>\n                     ${event.data.statement.result.score.raw}/${event.data.statement.result.score.max}</span></span>'>\n                     <i class=\"${textclass}\"></i><br><span>${Number(details.xp)}</span></span>`;\n                                    details.details = statements;\n                                    self.toggleCompletion(annoid, 'mark-done', 'automatic', details);\n                                }\n                            }\n                        });\n                    } catch (e) {\n                        requestAnimationFrame(detectH5P);\n                    }\n                } else {\n                    requestAnimationFrame(detectH5P);\n                }\n            };\n            requestAnimationFrame(detectH5P);\n        };\n\n        const applyContent = async function(annotation) {\n            const data = await self.render(annotation);\n            $message.find(`.modal-body`).html(data).attr('id', 'content').fadeIn(300);\n            if (annotation.hascompletion != 1 || self.isEditMode()) {\n                return;\n            }\n            if (!annotation.completed && annotation.completiontracking == 'view') {\n                self.toggleCompletion(annoid, 'mark-done', 'automatic');\n            }\n            xAPICheck(annotation, !annotation.completed && annotation.completiontracking != 'manual');\n        };\n\n\n        await this.renderViewer(annotation);\n        $message = this.renderContainer(annotation);\n        applyContent(annotation);\n\n        this.enableManualCompletion(annotation);\n\n        this.resizeIframe(annotation);\n\n        if (annotation.displayoptions == 'popup') {\n            $('#annotation-modal').on('shown.bs.modal', function() {\n                self.setModalDraggable('#annotation-modal .modal-dialog');\n            });\n        }\n    }\n}"],"names":["ContentBank","Base","onEditFormLoaded","form","event","self","this","body","modal","find","init","M","cfg","courseContextId","off","on","e","preventDefault","addClass","currentid","val","html","refreshContentBank","data","removeClass","uploadForm","ModalForm","formClass","args","contextid","modalConfig","title","util","get_string","addEventListener","events","FORM_SUBMITTED","addNotification","contentid","detail","returnurl","match","setTimeout","trigger","ERROR","show","postContentRender","annotation","callback","id","hascompletion","completiontracking","completed","renderContainer","$message","$completiontoggle","remove","before","tooltip","resizeIframe","modalbody","document","querySelector","ResizeObserver","iframe","height","scrollHeight","style","observe","player","pause","annoid","renderViewer","async","render","attr","fadeIn","isEditMode","toggleCompletion","listenToEvents","detectH5P","H5P","contentWindow","undefined","externalDispatcher","requestAnimationFrame","prepend","statements","statement","verb","push","object","indexOf","Audio","wwwroot","play","complete","textclass","result","score","scaled","details","completeTime","Date","xp","char1","toFixed","duration","getTime","timecompleted","completiontime","toLocaleString","formatTime","reportView","raw","max","Number","xAPICheck","applyContent","enableManualCompletion","displayoptions","setModalDraggable"],"mappings":"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"}