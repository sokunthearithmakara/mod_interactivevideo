{"version":3,"file":"main.min.js","sources":["../src/main.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * TODO describe module main\n *\n * @module     ivplugin_contentbank/main\n * @copyright  2024 Sokunthearith Makara <sokunthearithmakara@gmail.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\nimport $ from 'jquery';\nimport contentbankutil from 'ivplugin_contentbank/util';\nimport ModalForm from 'core_form/modalform';\nimport Base from 'mod_interactivevideo/type/base';\n\nexport default class ContentBank extends Base {\n    /**\n     * Called when the edit form is loaded.\n     * @param {Object} form The form object\n     * @param {Event} event The event object\n     * @return {void}\n     */\n    onEditFormLoaded(form, event) {\n        let body = form.modal.modal.find('.modal-body');\n        contentbankutil.init(M.cfg.courseContextId);\n        // Refresh the content from the content bank.\n        body.on('click', '#refreshcontentbank', function (e) {\n            e.preventDefault();\n            $(this).find('i').addClass('fa-spin');\n            var currentid = $('[name=contentid]').val();\n            $('.contentbank-container').html(`<div class=\"d-flex justify-content-center align-items-center\"\n            style=\"height: 150px;\"><div class=\"spinner-grow text-secondary\" role=\"status\">\n            <span class=\"sr-only\">Loading...</span></div></div>`);\n            contentbankutil.refreshContentBank(currentid, M.cfg.courseContextId, $(this).data('editable'), function () {\n                $('#refreshcontentbank i').removeClass('fa-spin');\n            });\n        });\n\n        // Upload a new content.\n        body.on('click', '#uploadcontentbank', function (e) {\n            e.preventDefault();\n            var uploadForm = new ModalForm({\n                formClass: \"core_contentbank\\\\form\\\\upload_files\",\n                args: {\n                    contextid: M.cfg.courseContextId,\n                },\n                modalConfig: {\n                    title: M.util.get_string('uploadcontent', 'ivplugin_contentbank')\n                }\n            });\n\n            uploadForm.addEventListener(uploadForm.events.FORM_SUBMITTED, (e) => {\n                this.addNotification(M.util.get_string('contentuploaded', 'ivplugin_contentbank'), 'success');\n                var returnurl = e.detail.returnurl;\n                var contentid = returnurl.match(/id=(\\d+)/)[1];\n                $('[name=contentid]').val(contentid);\n                $('#refreshcontentbank').trigger('click');\n            });\n\n            uploadForm.addEventListener(uploadForm.events.ERROR, () => {\n                this.addNotification(M.util.get_string('contentuploaderror', 'ivplugin_contentbank'));\n            });\n\n            uploadForm.show();\n        });\n        return {form, event};\n    }\n\n    /**\n     * Initialize the container to display the annotation\n     * @param {Object} annotation The annotation object\n     * @returns {void}\n     */\n    renderContainer(annotation) {\n        let $message = $(`#message[data-id='${annotation.id}']`);\n        $message.addClass('hascontentbank');\n        if (annotation.completiontracking && annotation.completiontracking != 'manual') {\n            // Disable the mark-done and mark-undone buttons\n            let $completiontoggle = $message.find('#completiontoggle');\n            $completiontoggle.prop('disabled', true);\n            if (annotation.completed == true) {\n                $completiontoggle.find(`span`)\n                    .text(`${M.util.get_string('completioncompleted', 'ivplugin_contentbank')}`);\n            } else {\n                $completiontoggle.find(`span`)\n                    .text(`${M.util.get_string('completionincomplete', 'ivplugin_contentbank')}`);\n            }\n        }\n        return $message;\n    }\n\n    /**\n     * Run the interaction\n     * @param {Object} annotation The annotation object\n     * @returns {void}\n     */\n    runInteraction(annotation) {\n        var annoid = annotation.id;\n        var self = this;\n        let $message;\n\n        const xAPICheck = (annotation) => {\n            var H5P;\n            var iframeinterval = setInterval(function () {\n                try {// Try to get the H5P object.\n                    H5P = document.querySelector(`#message[data-id='${annoid}'] iframe`).contentWindow.H5P;\n                } catch (e) {\n                    H5P = null;\n                }\n\n                if (typeof H5P !== 'undefined' && H5P !== null) {\n                    if (self.isEditMode()) {\n                        $message.find(`#title .btns .xapi`).remove();\n                        $message.find(`#title .btns`)\n                            .prepend(`<div class=\"xapi alert-secondary px-2\n                         rounded-pill\">${M.util.get_string('xapicheck', 'ivplugin_contentbank')}</div>`);\n                    }\n                    H5P.externalDispatcher.on('xAPI', function (event) {\n                        if ((event.data.statement.verb.id == 'http://adlnet.gov/expapi/verbs/completed'\n                            || event.data.statement.verb.id == 'http://adlnet.gov/expapi/verbs/answered')\n                            && event.data.statement.object.id.indexOf('subContentId') < 0) {\n                            if (self.isEditMode()) {\n                                $message.find(`#title .btns .xapi`).remove();\n                                $message.find(`#title .btns`)\n                                    .prepend(`<div class=\"xapi alert-success px-2\n                                 rounded-pill\"><i class=\"fa fa-check mr-2\"></i>\n                                 ${M.util.get_string('xapieventdetected', 'ivplugin_contentbank')}</div>`);\n                                var audio = new Audio(M.cfg.wwwroot + '/mod/interactivevideo/sounds/pop.mp3');\n                                audio.play();\n                                return;\n                            }\n                            var complete = false;\n                            if (annotation.completiontracking == 'completepass'\n                                && event.data.statement.result && event.data.statement.result.score.scaled >= 0.5) {\n                                complete = true;\n                            } else if (annotation.completiontracking == 'completefull'\n                                && event.data.statement.result && event.data.statement.result.score.scaled == 1) {\n                                complete = true;\n                            } else if (annotation.completiontracking == 'complete') {\n                                complete = true;\n                            }\n                            if (complete && !annotation.completed) {\n                                self.toggleCompletion(annoid, 'mark-done', 'automatic');\n                            }\n                        }\n                    });\n\n                    clearInterval(iframeinterval);\n                }\n            }, 1000);\n        };\n\n        // Apply content.\n        const applyContent = (annotation) => {\n            this.render(annotation).then((data) => {\n                $message.find(`.modal-body`).html(data).attr('id', 'content').fadeIn(300);\n                if (!annotation.completed && annotation.completiontracking != 'manual') {\n                    xAPICheck(annotation);\n                }\n            });\n        };\n\n        this.renderViewer(annotation).then(() => {\n            $message = this.renderContainer(annotation);\n            applyContent(annotation);\n        });\n\n        this.enableManualCompletion();\n\n        if (annotation.displayoptions == 'popup') {\n            $('#annotation-modal').on('shown.bs.modal', function () {\n                self.setModalDraggable('#annotation-modal .modal-dialog');\n            });\n        }\n    }\n}"],"names":["ContentBank","Base","onEditFormLoaded","form","event","body","modal","find","init","M","cfg","courseContextId","on","e","preventDefault","this","addClass","currentid","val","html","refreshContentBank","data","removeClass","uploadForm","ModalForm","formClass","args","contextid","modalConfig","title","util","get_string","addEventListener","events","FORM_SUBMITTED","addNotification","contentid","detail","returnurl","match","trigger","ERROR","show","renderContainer","annotation","$message","id","completiontracking","$completiontoggle","prop","completed","text","runInteraction","annoid","self","applyContent","render","then","attr","fadeIn","H5P","iframeinterval","setInterval","document","querySelector","contentWindow","isEditMode","remove","prepend","externalDispatcher","statement","verb","object","indexOf","Audio","wwwroot","play","complete","result","score","scaled","toggleCompletion","clearInterval","xAPICheck","renderViewer","enableManualCompletion","displayoptions","setModalDraggable"],"mappings":"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"}